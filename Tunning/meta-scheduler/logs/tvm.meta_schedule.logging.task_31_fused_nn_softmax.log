2024-04-30 19:06:09 [INFO] [task_scheduler.cc:160] Initializing Task #31: "fused_nn_softmax"
2024-04-30 19:06:09 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(10)), "float32"), T_softmax_norm: T.Buffer((T.int64(1), T.int64(10)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        T_softmax_maxelem = T.alloc_buffer((T.int64(1),))
        T_softmax_exp = T.alloc_buffer((T.int64(1), T.int64(10)))
        T_softmax_expsum = T.alloc_buffer((T.int64(1),))
        for i0, k in T.grid(T.int64(1), T.int64(10)):
            with T.block("T_softmax_maxelem"):
                v_i0, v_k = T.axis.remap("SR", [i0, k])
                T.reads(p0[v_i0, v_k])
                T.writes(T_softmax_maxelem[v_i0])
                with T.init():
                    T_softmax_maxelem[v_i0] = T.float32(-3.4028234663852886e+38)
                T_softmax_maxelem[v_i0] = T.max(T_softmax_maxelem[v_i0], p0[v_i0, v_k])
        for i0, i1 in T.grid(T.int64(1), T.int64(10)):
            with T.block("T_softmax_exp"):
                v_i0, v_i1 = T.axis.remap("SS", [i0, i1])
                T.reads(p0[v_i0, v_i1], T_softmax_maxelem[v_i0])
                T.writes(T_softmax_exp[v_i0, v_i1])
                T_softmax_exp[v_i0, v_i1] = T.exp(p0[v_i0, v_i1] - T_softmax_maxelem[v_i0])
        for i0, k in T.grid(T.int64(1), T.int64(10)):
            with T.block("T_softmax_expsum"):
                v_i0, v_k = T.axis.remap("SR", [i0, k])
                T.reads(T_softmax_exp[v_i0, v_k])
                T.writes(T_softmax_expsum[v_i0])
                with T.init():
                    T_softmax_expsum[v_i0] = T.float32(0)
                T_softmax_expsum[v_i0] = T_softmax_expsum[v_i0] + T_softmax_exp[v_i0, v_k]
        for i0, i1 in T.grid(T.int64(1), T.int64(10)):
            with T.block("T_softmax_norm"):
                v_i0, v_i1 = T.axis.remap("SS", [i0, i1])
                T.reads(T_softmax_exp[v_i0, v_i1], T_softmax_expsum[v_i0])
                T.writes(T_softmax_norm[v_i0, v_i1])
                T.block_attr({"axis": 1})
                T_softmax_norm[v_i0, v_i1] = T_softmax_exp[v_i0, v_i1] / T_softmax_expsum[v_i0]
2024-04-30 19:06:09 [INFO] [task_scheduler.cc:164] Total 9 design space(s) generated
2024-04-30 19:06:09 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(10)), "float32"), T_softmax_norm: T.Buffer((T.int64(1), T.int64(10)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 96, "meta_schedule.unroll_explicit": 16, "meta_schedule.vectorize": 64})
            T_softmax_maxelem = T.alloc_buffer((T.int64(1),))
            T_softmax_exp = T.alloc_buffer((T.int64(1), T.int64(10)))
            T_softmax_expsum = T.alloc_buffer((T.int64(1),))
            T_softmax_expsum_rf = T.alloc_buffer((T.int64(1), T.int64(2)))
            T_softmax_maxelem_rf = T.alloc_buffer((T.int64(1), T.int64(5)))
            for i0, k_0, k_1 in T.grid(T.int64(1), T.int64(5), T.int64(2)):
                with T.block("T_softmax_maxelem_rf"):
                    vk_0, v_i0, vk_1 = T.axis.remap("SSR", [k_0, i0, k_1])
                    T.reads(p0[v_i0, vk_0 * T.int64(2) + vk_1])
                    T.writes(T_softmax_maxelem_rf[v_i0, vk_0])
                    with T.init():
                        T_softmax_maxelem_rf[v_i0, vk_0] = T.float32(-3.4028234663852886e+38)
                    T_softmax_maxelem_rf[v_i0, vk_0] = T.max(T_softmax_maxelem_rf[v_i0, vk_0], p0[v_i0, vk_0 * T.int64(2) + vk_1])
            for i0, k_0 in T.grid(T.int64(1), T.int64(5)):
                with T.block("T_softmax_maxelem"):
                    vk_0, v_i0 = T.axis.remap("RS", [k_0, i0])
                    T.reads(T_softmax_maxelem_rf[v_i0, vk_0])
                    T.writes(T_softmax_maxelem[v_i0])
                    with T.init():
                        T_softmax_maxelem[v_i0] = T.float32(-3.4028234663852886e+38)
                    T_softmax_maxelem[v_i0] = T.max(T_softmax_maxelem[v_i0], T_softmax_maxelem_rf[v_i0, vk_0])
            for i0, i1 in T.grid(T.int64(1), T.int64(10)):
                with T.block("T_softmax_exp"):
                    v_i0, v_i1 = T.axis.remap("SS", [i0, i1])
                    T.reads(p0[v_i0, v_i1], T_softmax_maxelem[v_i0])
                    T.writes(T_softmax_exp[v_i0, v_i1])
                    T_softmax_exp[v_i0, v_i1] = T.exp(p0[v_i0, v_i1] - T_softmax_maxelem[v_i0])
            for i0, i1 in T.grid(T.int64(1), T.int64(10)):
                for ax0, ax1, ax2 in T.grid(T.int64(2), T.int64(1), T.int64(5)):
                    with T.block("T_softmax_expsum_rf"):
                        vk_0, v_i0, vk_1 = T.axis.remap("SSR", [ax0, ax1, ax2])
                        T.reads(T_softmax_exp[v_i0, vk_0 * T.int64(5) + vk_1])
                        T.writes(T_softmax_expsum_rf[v_i0, vk_0])
                        with T.init():
                            T_softmax_expsum_rf[v_i0, vk_0] = T.float32(0)
                        T_softmax_expsum_rf[v_i0, vk_0] = T_softmax_expsum_rf[v_i0, vk_0] + T_softmax_exp[v_i0, vk_0 * T.int64(5) + vk_1]
                for ax0, ax1 in T.grid(T.int64(2), T.int64(1)):
                    with T.block("T_softmax_expsum"):
                        vk_0, v_i0 = T.axis.remap("RS", [ax0, ax1])
                        T.reads(T_softmax_expsum_rf[v_i0, vk_0])
                        T.writes(T_softmax_expsum[v_i0])
                        with T.init():
                            T_softmax_expsum[v_i0] = T.float32(0)
                        T_softmax_expsum[v_i0] = T_softmax_expsum[v_i0] + T_softmax_expsum_rf[v_i0, vk_0]
                with T.block("T_softmax_norm"):
                    v_i0, v_i1 = T.axis.remap("SS", [i0, i1])
                    T.reads(T_softmax_exp[v_i0, v_i1], T_softmax_expsum[v_i0])
                    T.writes(T_softmax_norm[v_i0, v_i1])
                    T.block_attr({"axis": 1})
                    T_softmax_norm[v_i0, v_i1] = T_softmax_exp[v_i0, v_i1] / T_softmax_expsum[v_i0]
b0 = sch.get_block(name="T_softmax_maxelem", func_name="main")
b1 = sch.get_block(name="T_softmax_exp", func_name="main")
b2 = sch.get_block(name="T_softmax_expsum", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
l4, l5 = sch.get_loops(block=b2)
v6, v7 = sch.sample_perfect_tile(loop=l5, n=2, max_innermost_factor=64, decision=[2, 5])
l8, l9 = sch.split(loop=l5, factors=[v6, v7], preserve_unit_iters=True, disable_predication=False)
b10 = sch.rfactor(loop=l8, factor_axis=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.random_compute_producer", ann_val=1)
l11, l12 = sch.get_loops(block=b0)
v13, v14 = sch.sample_perfect_tile(loop=l12, n=2, max_innermost_factor=64, decision=[5, 2])
l15, l16 = sch.split(loop=l12, factors=[v13, v14], preserve_unit_iters=True, disable_predication=False)
b17 = sch.rfactor(loop=l15, factor_axis=1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer", ann_val=1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=96)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v18 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v18)
b19, = sch.get_producers(block=b2)
sch.unannotate(block_or_loop=b2, ann_key="meta_schedule.random_compute_producer")
l20 = sch.sample_compute_location(block=b2, decision=1)
sch.compute_at(block=b2, loop=l20, preserve_unit_loops=True, index=-1)
l21 = sch.sample_compute_location(block=b19, decision=1)
sch.compute_at(block=b19, loop=l21, preserve_unit_loops=True, index=-1)
l22 = sch.sample_compute_location(block=b1, decision=-1)
sch.compute_at(block=b1, loop=l22, preserve_unit_loops=True, index=-1)
b23, = sch.get_producers(block=b0)
sch.unannotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer")
l24 = sch.sample_compute_location(block=b0, decision=-1)
sch.compute_at(block=b0, loop=l24, preserve_unit_loops=True, index=-1)
l25 = sch.sample_compute_location(block=b23, decision=-1)
sch.compute_at(block=b23, loop=l25, preserve_unit_loops=True, index=-1)
2024-04-30 19:06:09 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(10)), "float32"), T_softmax_norm: T.Buffer((T.int64(1), T.int64(10)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 96, "meta_schedule.unroll_explicit": 512, "meta_schedule.vectorize": 64})
            T_softmax_maxelem = T.alloc_buffer((T.int64(1),))
            T_softmax_exp = T.alloc_buffer((T.int64(1), T.int64(10)))
            T_softmax_expsum = T.alloc_buffer((T.int64(1),))
            T_softmax_expsum_rf = T.alloc_buffer((T.int64(1), T.int64(2)))
            T_softmax_maxelem_rf = T.alloc_buffer((T.int64(1), T.int64(2)))
            for i0, i1 in T.grid(T.int64(1), T.int64(10)):
                for ax0, ax1, ax2 in T.grid(T.int64(2), T.int64(1), T.int64(5)):
                    with T.block("T_softmax_maxelem_rf"):
                        vk_1, v_i0, vk_0 = T.axis.remap("SSR", [ax0, ax1, ax2])
                        T.reads(p0[v_i0, vk_0 * T.int64(2) + vk_1])
                        T.writes(T_softmax_maxelem_rf[v_i0, vk_1])
                        with T.init():
                            T_softmax_maxelem_rf[v_i0, vk_1] = T.float32(-3.4028234663852886e+38)
                        T_softmax_maxelem_rf[v_i0, vk_1] = T.max(T_softmax_maxelem_rf[v_i0, vk_1], p0[v_i0, vk_0 * T.int64(2) + vk_1])
                for ax0, ax1 in T.grid(T.int64(2), T.int64(1)):
                    with T.block("T_softmax_maxelem"):
                        vk_1, v_i0 = T.axis.remap("RS", [ax0, ax1])
                        T.reads(T_softmax_maxelem_rf[v_i0, vk_1])
                        T.writes(T_softmax_maxelem[v_i0])
                        with T.init():
                            T_softmax_maxelem[v_i0] = T.float32(-3.4028234663852886e+38)
                        T_softmax_maxelem[v_i0] = T.max(T_softmax_maxelem[v_i0], T_softmax_maxelem_rf[v_i0, vk_1])
                with T.block("T_softmax_exp"):
                    v_i0, v_i1 = T.axis.remap("SS", [i0, i1])
                    T.reads(p0[v_i0, v_i1], T_softmax_maxelem[v_i0])
                    T.writes(T_softmax_exp[v_i0, v_i1])
                    T_softmax_exp[v_i0, v_i1] = T.exp(p0[v_i0, v_i1] - T_softmax_maxelem[v_i0])
            for i0, i1 in T.grid(T.int64(1), T.int64(10)):
                for ax0 in range(T.int64(2)):
                    for ax0_1, ax1, ax2 in T.grid(T.int64(1), T.int64(1), T.int64(5)):
                        with T.block("T_softmax_expsum_rf"):
                            vk_0 = T.axis.spatial(T.int64(2), ax0 + ax0_1)
                            v_i0, vk_1 = T.axis.remap("SR", [ax1, ax2])
                            T.reads(T_softmax_exp[v_i0, vk_0 * T.int64(5) + vk_1])
                            T.writes(T_softmax_expsum_rf[v_i0, vk_0])
                            with T.init():
                                T_softmax_expsum_rf[v_i0, vk_0] = T.float32(0)
                            T_softmax_expsum_rf[v_i0, vk_0] = T_softmax_expsum_rf[v_i0, vk_0] + T_softmax_exp[v_i0, vk_0 * T.int64(5) + vk_1]
                    for ax1 in range(T.int64(1)):
                        with T.block("T_softmax_expsum"):
                            vk_0, v_i0 = T.axis.remap("RS", [ax0, ax1])
                            T.reads(T_softmax_expsum_rf[v_i0, vk_0])
                            T.writes(T_softmax_expsum[v_i0])
                            with T.init():
                                T_softmax_expsum[v_i0] = T.float32(0)
                            T_softmax_expsum[v_i0] = T_softmax_expsum[v_i0] + T_softmax_expsum_rf[v_i0, vk_0]
                with T.block("T_softmax_norm"):
                    v_i0, v_i1 = T.axis.remap("SS", [i0, i1])
                    T.reads(T_softmax_exp[v_i0, v_i1], T_softmax_expsum[v_i0])
                    T.writes(T_softmax_norm[v_i0, v_i1])
                    T.block_attr({"axis": 1})
                    T_softmax_norm[v_i0, v_i1] = T_softmax_exp[v_i0, v_i1] / T_softmax_expsum[v_i0]
b0 = sch.get_block(name="T_softmax_maxelem", func_name="main")
b1 = sch.get_block(name="T_softmax_exp", func_name="main")
b2 = sch.get_block(name="T_softmax_expsum", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
l4, l5 = sch.get_loops(block=b2)
v6, v7 = sch.sample_perfect_tile(loop=l5, n=2, max_innermost_factor=64, decision=[2, 5])
l8, l9 = sch.split(loop=l5, factors=[v6, v7], preserve_unit_iters=True, disable_predication=False)
b10 = sch.rfactor(loop=l8, factor_axis=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.random_compute_producer", ann_val=1)
l11, l12 = sch.get_loops(block=b0)
v13, v14 = sch.sample_perfect_tile(loop=l12, n=2, max_innermost_factor=64, decision=[5, 2])
l15, l16 = sch.split(loop=l12, factors=[v13, v14], preserve_unit_iters=True, disable_predication=False)
b17 = sch.rfactor(loop=l16, factor_axis=1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer", ann_val=1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=96)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v18 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v18)
b19, = sch.get_producers(block=b2)
sch.unannotate(block_or_loop=b2, ann_key="meta_schedule.random_compute_producer")
l20 = sch.sample_compute_location(block=b2, decision=1)
sch.compute_at(block=b2, loop=l20, preserve_unit_loops=True, index=-1)
l21 = sch.sample_compute_location(block=b19, decision=2)
sch.compute_at(block=b19, loop=l21, preserve_unit_loops=True, index=-1)
l22 = sch.sample_compute_location(block=b1, decision=-1)
sch.compute_at(block=b1, loop=l22, preserve_unit_loops=True, index=-1)
b23, = sch.get_producers(block=b0)
sch.unannotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer")
l24 = sch.sample_compute_location(block=b0, decision=1)
sch.compute_at(block=b0, loop=l24, preserve_unit_loops=True, index=-1)
l25 = sch.sample_compute_location(block=b23, decision=1)
sch.compute_at(block=b23, loop=l25, preserve_unit_loops=True, index=-1)
2024-04-30 19:06:09 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(10)), "float32"), T_softmax_norm: T.Buffer((T.int64(1), T.int64(10)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 96, "meta_schedule.unroll_explicit": 64, "meta_schedule.vectorize": 64})
            T_softmax_maxelem = T.alloc_buffer((T.int64(1),))
            T_softmax_expsum = T.alloc_buffer((T.int64(1),))
            T_softmax_expsum_rf = T.alloc_buffer((T.int64(1), T.int64(2)))
            for i0, k in T.grid(T.int64(1), T.int64(10)):
                with T.block("T_softmax_maxelem"):
                    v_i0, v_k = T.axis.remap("SR", [i0, k])
                    T.reads(p0[v_i0, v_k])
                    T.writes(T_softmax_maxelem[v_i0])
                    with T.init():
                        T_softmax_maxelem[v_i0] = T.float32(-3.4028234663852886e+38)
                    T_softmax_maxelem[v_i0] = T.max(T_softmax_maxelem[v_i0], p0[v_i0, v_k])
            for i0, k_0, k_1 in T.grid(T.int64(1), T.int64(2), T.int64(5)):
                with T.block("T_softmax_expsum_rf"):
                    vk_0, v_i0, vk_1 = T.axis.remap("SSR", [k_0, i0, k_1])
                    T.reads(p0[v_i0, vk_0 * T.int64(5) + vk_1], T_softmax_maxelem[v_i0])
                    T.writes(T_softmax_expsum_rf[v_i0, vk_0])
                    with T.init():
                        T_softmax_expsum_rf[v_i0, vk_0] = T.float32(0)
                    T_softmax_expsum_rf[v_i0, vk_0] = T_softmax_expsum_rf[v_i0, vk_0] + T.exp(p0[v_i0, vk_0 * T.int64(5) + vk_1] - T_softmax_maxelem[v_i0])
            for i0, k_0 in T.grid(T.int64(1), T.int64(2)):
                with T.block("T_softmax_expsum"):
                    vk_0, v_i0 = T.axis.remap("RS", [k_0, i0])
                    T.reads(T_softmax_expsum_rf[v_i0, vk_0])
                    T.writes(T_softmax_expsum[v_i0])
                    with T.init():
                        T_softmax_expsum[v_i0] = T.float32(0)
                    T_softmax_expsum[v_i0] = T_softmax_expsum[v_i0] + T_softmax_expsum_rf[v_i0, vk_0]
            for i0, i1 in T.grid(T.int64(1), T.int64(10)):
                with T.block("T_softmax_norm"):
                    v_i0, v_i1 = T.axis.remap("SS", [i0, i1])
                    T.reads(p0[v_i0, v_i1], T_softmax_maxelem[v_i0], T_softmax_expsum[v_i0])
                    T.writes(T_softmax_norm[v_i0, v_i1])
                    T.block_attr({"axis": 1})
                    T_softmax_norm[v_i0, v_i1] = T.exp(p0[v_i0, v_i1] - T_softmax_maxelem[v_i0]) / T_softmax_expsum[v_i0]
b0 = sch.get_block(name="T_softmax_maxelem", func_name="main")
b1 = sch.get_block(name="T_softmax_exp", func_name="main")
b2 = sch.get_block(name="T_softmax_expsum", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
l4, l5 = sch.get_loops(block=b2)
v6, v7 = sch.sample_perfect_tile(loop=l5, n=2, max_innermost_factor=64, decision=[2, 5])
l8, l9 = sch.split(loop=l5, factors=[v6, v7], preserve_unit_iters=True, disable_predication=False)
b10 = sch.rfactor(loop=l8, factor_axis=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.random_compute_producer", ann_val=1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=96)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v11 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v11)
b12, = sch.get_producers(block=b2)
sch.unannotate(block_or_loop=b2, ann_key="meta_schedule.random_compute_producer")
l13 = sch.sample_compute_location(block=b2, decision=-1)
sch.compute_at(block=b2, loop=l13, preserve_unit_loops=True, index=-1)
l14 = sch.sample_compute_location(block=b12, decision=-1)
sch.compute_at(block=b12, loop=l14, preserve_unit_loops=True, index=-1)
l15 = sch.sample_compute_location(block=b1, decision=-2)
sch.compute_at(block=b1, loop=l15, preserve_unit_loops=True, index=-1)
l16 = sch.sample_compute_location(block=b0, decision=-1)
sch.compute_at(block=b0, loop=l16, preserve_unit_loops=True, index=-1)
2024-04-30 19:06:09 [INFO] [task_scheduler.cc:170] Design space #3:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(10)), "float32"), T_softmax_norm: T.Buffer((T.int64(1), T.int64(10)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 96, "meta_schedule.unroll_explicit": 512, "meta_schedule.vectorize": 64})
            T_softmax_maxelem = T.alloc_buffer((T.int64(1),))
            T_softmax_exp = T.alloc_buffer((T.int64(1), T.int64(10)))
            T_softmax_expsum = T.alloc_buffer((T.int64(1),))
            T_softmax_expsum_rf = T.alloc_buffer((T.int64(1), T.int64(5)))
            T_softmax_maxelem_rf = T.alloc_buffer((T.int64(1), T.int64(2)))
            for i0, i1 in T.grid(T.int64(1), T.int64(10)):
                for ax0, ax1, ax2 in T.grid(T.int64(2), T.int64(1), T.int64(5)):
                    with T.block("T_softmax_maxelem_rf"):
                        vk_0, v_i0, vk_1 = T.axis.remap("SSR", [ax0, ax1, ax2])
                        T.reads(p0[v_i0, vk_0 * T.int64(5) + vk_1])
                        T.writes(T_softmax_maxelem_rf[v_i0, vk_0])
                        with T.init():
                            T_softmax_maxelem_rf[v_i0, vk_0] = T.float32(-3.4028234663852886e+38)
                        T_softmax_maxelem_rf[v_i0, vk_0] = T.max(T_softmax_maxelem_rf[v_i0, vk_0], p0[v_i0, vk_0 * T.int64(5) + vk_1])
                for ax0, ax1 in T.grid(T.int64(2), T.int64(1)):
                    with T.block("T_softmax_maxelem"):
                        vk_0, v_i0 = T.axis.remap("RS", [ax0, ax1])
                        T.reads(T_softmax_maxelem_rf[v_i0, vk_0])
                        T.writes(T_softmax_maxelem[v_i0])
                        with T.init():
                            T_softmax_maxelem[v_i0] = T.float32(-3.4028234663852886e+38)
                        T_softmax_maxelem[v_i0] = T.max(T_softmax_maxelem[v_i0], T_softmax_maxelem_rf[v_i0, vk_0])
                with T.block("T_softmax_exp"):
                    v_i0, v_i1 = T.axis.remap("SS", [i0, i1])
                    T.reads(p0[v_i0, v_i1], T_softmax_maxelem[v_i0])
                    T.writes(T_softmax_exp[v_i0, v_i1])
                    T_softmax_exp[v_i0, v_i1] = T.exp(p0[v_i0, v_i1] - T_softmax_maxelem[v_i0])
            for i0, k_0, k_1 in T.grid(T.int64(1), T.int64(2), T.int64(5)):
                with T.block("T_softmax_expsum_rf"):
                    vk_1, v_i0, vk_0 = T.axis.remap("SSR", [k_1, i0, k_0])
                    T.reads(T_softmax_exp[v_i0, vk_0 * T.int64(5) + vk_1])
                    T.writes(T_softmax_expsum_rf[v_i0, vk_1])
                    with T.init():
                        T_softmax_expsum_rf[v_i0, vk_1] = T.float32(0)
                    T_softmax_expsum_rf[v_i0, vk_1] = T_softmax_expsum_rf[v_i0, vk_1] + T_softmax_exp[v_i0, vk_0 * T.int64(5) + vk_1]
            for i0, i1 in T.grid(T.int64(1), T.int64(10)):
                for ax0, ax1 in T.grid(T.int64(5), T.int64(1)):
                    with T.block("T_softmax_expsum"):
                        vk_1, v_i0 = T.axis.remap("RS", [ax0, ax1])
                        T.reads(T_softmax_expsum_rf[v_i0, vk_1])
                        T.writes(T_softmax_expsum[v_i0])
                        with T.init():
                            T_softmax_expsum[v_i0] = T.float32(0)
                        T_softmax_expsum[v_i0] = T_softmax_expsum[v_i0] + T_softmax_expsum_rf[v_i0, vk_1]
                with T.block("T_softmax_norm"):
                    v_i0, v_i1 = T.axis.remap("SS", [i0, i1])
                    T.reads(T_softmax_exp[v_i0, v_i1], T_softmax_expsum[v_i0])
                    T.writes(T_softmax_norm[v_i0, v_i1])
                    T.block_attr({"axis": 1})
                    T_softmax_norm[v_i0, v_i1] = T_softmax_exp[v_i0, v_i1] / T_softmax_expsum[v_i0]
b0 = sch.get_block(name="T_softmax_maxelem", func_name="main")
b1 = sch.get_block(name="T_softmax_exp", func_name="main")
b2 = sch.get_block(name="T_softmax_expsum", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
l4, l5 = sch.get_loops(block=b2)
v6, v7 = sch.sample_perfect_tile(loop=l5, n=2, max_innermost_factor=64, decision=[2, 5])
l8, l9 = sch.split(loop=l5, factors=[v6, v7], preserve_unit_iters=True, disable_predication=False)
b10 = sch.rfactor(loop=l9, factor_axis=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.random_compute_producer", ann_val=1)
l11, l12 = sch.get_loops(block=b0)
v13, v14 = sch.sample_perfect_tile(loop=l12, n=2, max_innermost_factor=64, decision=[2, 5])
l15, l16 = sch.split(loop=l12, factors=[v13, v14], preserve_unit_iters=True, disable_predication=False)
b17 = sch.rfactor(loop=l15, factor_axis=1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer", ann_val=1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=96)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v18 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v18)
b19, = sch.get_producers(block=b2)
sch.unannotate(block_or_loop=b2, ann_key="meta_schedule.random_compute_producer")
l20 = sch.sample_compute_location(block=b2, decision=1)
sch.compute_at(block=b2, loop=l20, preserve_unit_loops=True, index=-1)
l21 = sch.sample_compute_location(block=b19, decision=-1)
sch.compute_at(block=b19, loop=l21, preserve_unit_loops=True, index=-1)
l22 = sch.sample_compute_location(block=b1, decision=-1)
sch.compute_at(block=b1, loop=l22, preserve_unit_loops=True, index=-1)
b23, = sch.get_producers(block=b0)
sch.unannotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer")
l24 = sch.sample_compute_location(block=b0, decision=1)
sch.compute_at(block=b0, loop=l24, preserve_unit_loops=True, index=-1)
l25 = sch.sample_compute_location(block=b23, decision=1)
sch.compute_at(block=b23, loop=l25, preserve_unit_loops=True, index=-1)
2024-04-30 19:06:09 [INFO] [task_scheduler.cc:170] Design space #4:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(10)), "float32"), T_softmax_norm: T.Buffer((T.int64(1), T.int64(10)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 96, "meta_schedule.unroll_explicit": 64, "meta_schedule.vectorize": 64})
            T_softmax_maxelem = T.alloc_buffer((T.int64(1),))
            T_softmax_exp = T.alloc_buffer((T.int64(1), T.int64(10)))
            T_softmax_expsum = T.alloc_buffer((T.int64(1),))
            T_softmax_expsum_rf = T.alloc_buffer((T.int64(1), T.int64(5)))
            T_softmax_maxelem_rf = T.alloc_buffer((T.int64(1), T.int64(5)))
            for i0, i1 in T.grid(T.int64(1), T.int64(10)):
                for ax0, ax1, ax2 in T.grid(T.int64(5), T.int64(1), T.int64(2)):
                    with T.block("T_softmax_maxelem_rf"):
                        vk_1, v_i0, vk_0 = T.axis.remap("SSR", [ax0, ax1, ax2])
                        T.reads(p0[v_i0, vk_0 * T.int64(5) + vk_1])
                        T.writes(T_softmax_maxelem_rf[v_i0, vk_1])
                        with T.init():
                            T_softmax_maxelem_rf[v_i0, vk_1] = T.float32(-3.4028234663852886e+38)
                        T_softmax_maxelem_rf[v_i0, vk_1] = T.max(T_softmax_maxelem_rf[v_i0, vk_1], p0[v_i0, vk_0 * T.int64(5) + vk_1])
                for ax0, ax1 in T.grid(T.int64(5), T.int64(1)):
                    with T.block("T_softmax_maxelem"):
                        vk_1, v_i0 = T.axis.remap("RS", [ax0, ax1])
                        T.reads(T_softmax_maxelem_rf[v_i0, vk_1])
                        T.writes(T_softmax_maxelem[v_i0])
                        with T.init():
                            T_softmax_maxelem[v_i0] = T.float32(-3.4028234663852886e+38)
                        T_softmax_maxelem[v_i0] = T.max(T_softmax_maxelem[v_i0], T_softmax_maxelem_rf[v_i0, vk_1])
                with T.block("T_softmax_exp"):
                    v_i0, v_i1 = T.axis.remap("SS", [i0, i1])
                    T.reads(p0[v_i0, v_i1], T_softmax_maxelem[v_i0])
                    T.writes(T_softmax_exp[v_i0, v_i1])
                    T_softmax_exp[v_i0, v_i1] = T.exp(p0[v_i0, v_i1] - T_softmax_maxelem[v_i0])
            for i0, k_0, k_1 in T.grid(T.int64(1), T.int64(2), T.int64(5)):
                with T.block("T_softmax_expsum_rf"):
                    vk_1, v_i0, vk_0 = T.axis.remap("SSR", [k_1, i0, k_0])
                    T.reads(T_softmax_exp[v_i0, vk_0 * T.int64(5) + vk_1])
                    T.writes(T_softmax_expsum_rf[v_i0, vk_1])
                    with T.init():
                        T_softmax_expsum_rf[v_i0, vk_1] = T.float32(0)
                    T_softmax_expsum_rf[v_i0, vk_1] = T_softmax_expsum_rf[v_i0, vk_1] + T_softmax_exp[v_i0, vk_0 * T.int64(5) + vk_1]
            for i0, k_1 in T.grid(T.int64(1), T.int64(5)):
                with T.block("T_softmax_expsum"):
                    vk_1, v_i0 = T.axis.remap("RS", [k_1, i0])
                    T.reads(T_softmax_expsum_rf[v_i0, vk_1])
                    T.writes(T_softmax_expsum[v_i0])
                    with T.init():
                        T_softmax_expsum[v_i0] = T.float32(0)
                    T_softmax_expsum[v_i0] = T_softmax_expsum[v_i0] + T_softmax_expsum_rf[v_i0, vk_1]
            for i0, i1 in T.grid(T.int64(1), T.int64(10)):
                with T.block("T_softmax_norm"):
                    v_i0, v_i1 = T.axis.remap("SS", [i0, i1])
                    T.reads(T_softmax_exp[v_i0, v_i1], T_softmax_expsum[v_i0])
                    T.writes(T_softmax_norm[v_i0, v_i1])
                    T.block_attr({"axis": 1})
                    T_softmax_norm[v_i0, v_i1] = T_softmax_exp[v_i0, v_i1] / T_softmax_expsum[v_i0]
b0 = sch.get_block(name="T_softmax_maxelem", func_name="main")
b1 = sch.get_block(name="T_softmax_exp", func_name="main")
b2 = sch.get_block(name="T_softmax_expsum", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
l4, l5 = sch.get_loops(block=b2)
v6, v7 = sch.sample_perfect_tile(loop=l5, n=2, max_innermost_factor=64, decision=[2, 5])
l8, l9 = sch.split(loop=l5, factors=[v6, v7], preserve_unit_iters=True, disable_predication=False)
b10 = sch.rfactor(loop=l9, factor_axis=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.random_compute_producer", ann_val=1)
l11, l12 = sch.get_loops(block=b0)
v13, v14 = sch.sample_perfect_tile(loop=l12, n=2, max_innermost_factor=64, decision=[2, 5])
l15, l16 = sch.split(loop=l12, factors=[v13, v14], preserve_unit_iters=True, disable_predication=False)
b17 = sch.rfactor(loop=l16, factor_axis=1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer", ann_val=1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=96)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v18 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v18)
b19, = sch.get_producers(block=b2)
sch.unannotate(block_or_loop=b2, ann_key="meta_schedule.random_compute_producer")
l20 = sch.sample_compute_location(block=b2, decision=-1)
sch.compute_at(block=b2, loop=l20, preserve_unit_loops=True, index=-1)
l21 = sch.sample_compute_location(block=b19, decision=-1)
sch.compute_at(block=b19, loop=l21, preserve_unit_loops=True, index=-1)
l22 = sch.sample_compute_location(block=b1, decision=-1)
sch.compute_at(block=b1, loop=l22, preserve_unit_loops=True, index=-1)
b23, = sch.get_producers(block=b0)
sch.unannotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer")
l24 = sch.sample_compute_location(block=b0, decision=1)
sch.compute_at(block=b0, loop=l24, preserve_unit_loops=True, index=-1)
l25 = sch.sample_compute_location(block=b23, decision=1)
sch.compute_at(block=b23, loop=l25, preserve_unit_loops=True, index=-1)
2024-04-30 19:06:09 [INFO] [task_scheduler.cc:170] Design space #5:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(10)), "float32"), T_softmax_norm: T.Buffer((T.int64(1), T.int64(10)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 96, "meta_schedule.unroll_explicit": 16, "meta_schedule.vectorize": 64})
            T_softmax_maxelem = T.alloc_buffer((T.int64(1),))
            T_softmax_exp = T.alloc_buffer((T.int64(1), T.int64(10)))
            T_softmax_expsum = T.alloc_buffer((T.int64(1),))
            T_softmax_expsum_rf = T.alloc_buffer((T.int64(1), T.int64(5)))
            for i0, k in T.grid(T.int64(1), T.int64(10)):
                with T.block("T_softmax_maxelem"):
                    v_i0, v_k = T.axis.remap("SR", [i0, k])
                    T.reads(p0[v_i0, v_k])
                    T.writes(T_softmax_maxelem[v_i0])
                    with T.init():
                        T_softmax_maxelem[v_i0] = T.float32(-3.4028234663852886e+38)
                    T_softmax_maxelem[v_i0] = T.max(T_softmax_maxelem[v_i0], p0[v_i0, v_k])
            for i0, i1 in T.grid(T.int64(1), T.int64(10)):
                with T.block("T_softmax_exp"):
                    v_i0, v_i1 = T.axis.remap("SS", [i0, i1])
                    T.reads(p0[v_i0, v_i1], T_softmax_maxelem[v_i0])
                    T.writes(T_softmax_exp[v_i0, v_i1])
                    T_softmax_exp[v_i0, v_i1] = T.exp(p0[v_i0, v_i1] - T_softmax_maxelem[v_i0])
            for i0, k_0, k_1 in T.grid(T.int64(1), T.int64(2), T.int64(5)):
                with T.block("T_softmax_expsum_rf"):
                    vk_1, v_i0, vk_0 = T.axis.remap("SSR", [k_1, i0, k_0])
                    T.reads(T_softmax_exp[v_i0, vk_0 * T.int64(5) + vk_1])
                    T.writes(T_softmax_expsum_rf[v_i0, vk_1])
                    with T.init():
                        T_softmax_expsum_rf[v_i0, vk_1] = T.float32(0)
                    T_softmax_expsum_rf[v_i0, vk_1] = T_softmax_expsum_rf[v_i0, vk_1] + T_softmax_exp[v_i0, vk_0 * T.int64(5) + vk_1]
            for i0, k_1 in T.grid(T.int64(1), T.int64(5)):
                with T.block("T_softmax_expsum"):
                    vk_1, v_i0 = T.axis.remap("RS", [k_1, i0])
                    T.reads(T_softmax_expsum_rf[v_i0, vk_1])
                    T.writes(T_softmax_expsum[v_i0])
                    with T.init():
                        T_softmax_expsum[v_i0] = T.float32(0)
                    T_softmax_expsum[v_i0] = T_softmax_expsum[v_i0] + T_softmax_expsum_rf[v_i0, vk_1]
            for i0, i1 in T.grid(T.int64(1), T.int64(10)):
                with T.block("T_softmax_norm"):
                    v_i0, v_i1 = T.axis.remap("SS", [i0, i1])
                    T.reads(T_softmax_exp[v_i0, v_i1], T_softmax_expsum[v_i0])
                    T.writes(T_softmax_norm[v_i0, v_i1])
                    T.block_attr({"axis": 1})
                    T_softmax_norm[v_i0, v_i1] = T_softmax_exp[v_i0, v_i1] / T_softmax_expsum[v_i0]
b0 = sch.get_block(name="T_softmax_maxelem", func_name="main")
b1 = sch.get_block(name="T_softmax_exp", func_name="main")
b2 = sch.get_block(name="T_softmax_expsum", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
l4, l5 = sch.get_loops(block=b2)
v6, v7 = sch.sample_perfect_tile(loop=l5, n=2, max_innermost_factor=64, decision=[2, 5])
l8, l9 = sch.split(loop=l5, factors=[v6, v7], preserve_unit_iters=True, disable_predication=False)
b10 = sch.rfactor(loop=l9, factor_axis=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.random_compute_producer", ann_val=1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=96)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v11 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v11)
b12, = sch.get_producers(block=b2)
sch.unannotate(block_or_loop=b2, ann_key="meta_schedule.random_compute_producer")
l13 = sch.sample_compute_location(block=b2, decision=-1)
sch.compute_at(block=b2, loop=l13, preserve_unit_loops=True, index=-1)
l14 = sch.sample_compute_location(block=b12, decision=-1)
sch.compute_at(block=b12, loop=l14, preserve_unit_loops=True, index=-1)
l15 = sch.sample_compute_location(block=b1, decision=-1)
sch.compute_at(block=b1, loop=l15, preserve_unit_loops=True, index=-1)
l16 = sch.sample_compute_location(block=b0, decision=-1)
sch.compute_at(block=b0, loop=l16, preserve_unit_loops=True, index=-1)
2024-04-30 19:06:09 [INFO] [task_scheduler.cc:170] Design space #6:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(10)), "float32"), T_softmax_norm: T.Buffer((T.int64(1), T.int64(10)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 96, "meta_schedule.unroll_explicit": 512, "meta_schedule.vectorize": 64})
            T_softmax_maxelem = T.alloc_buffer((T.int64(1),))
            T_softmax_exp = T.alloc_buffer((T.int64(1), T.int64(10)))
            T_softmax_expsum = T.alloc_buffer((T.int64(1),))
            T_softmax_maxelem_rf = T.alloc_buffer((T.int64(1), T.int64(2)))
            for i0, k_0, k_1 in T.grid(T.int64(1), T.int64(2), T.int64(5)):
                with T.block("T_softmax_maxelem_rf"):
                    vk_0, v_i0, vk_1 = T.axis.remap("SSR", [k_0, i0, k_1])
                    T.reads(p0[v_i0, vk_0 * T.int64(5) + vk_1])
                    T.writes(T_softmax_maxelem_rf[v_i0, vk_0])
                    with T.init():
                        T_softmax_maxelem_rf[v_i0, vk_0] = T.float32(-3.4028234663852886e+38)
                    T_softmax_maxelem_rf[v_i0, vk_0] = T.max(T_softmax_maxelem_rf[v_i0, vk_0], p0[v_i0, vk_0 * T.int64(5) + vk_1])
            for i0, k_0 in T.grid(T.int64(1), T.int64(2)):
                with T.block("T_softmax_maxelem"):
                    vk_0, v_i0 = T.axis.remap("RS", [k_0, i0])
                    T.reads(T_softmax_maxelem_rf[v_i0, vk_0])
                    T.writes(T_softmax_maxelem[v_i0])
                    with T.init():
                        T_softmax_maxelem[v_i0] = T.float32(-3.4028234663852886e+38)
                    T_softmax_maxelem[v_i0] = T.max(T_softmax_maxelem[v_i0], T_softmax_maxelem_rf[v_i0, vk_0])
            for i0, i1 in T.grid(T.int64(1), T.int64(10)):
                with T.block("T_softmax_exp"):
                    v_i0, v_i1 = T.axis.remap("SS", [i0, i1])
                    T.reads(p0[v_i0, v_i1], T_softmax_maxelem[v_i0])
                    T.writes(T_softmax_exp[v_i0, v_i1])
                    T_softmax_exp[v_i0, v_i1] = T.exp(p0[v_i0, v_i1] - T_softmax_maxelem[v_i0])
            for i0, k in T.grid(T.int64(1), T.int64(10)):
                with T.block("T_softmax_expsum"):
                    v_i0, v_k = T.axis.remap("SR", [i0, k])
                    T.reads(T_softmax_exp[v_i0, v_k])
                    T.writes(T_softmax_expsum[v_i0])
                    with T.init():
                        T_softmax_expsum[v_i0] = T.float32(0)
                    T_softmax_expsum[v_i0] = T_softmax_expsum[v_i0] + T_softmax_exp[v_i0, v_k]
            for i0, i1 in T.grid(T.int64(1), T.int64(10)):
                with T.block("T_softmax_norm"):
                    v_i0, v_i1 = T.axis.remap("SS", [i0, i1])
                    T.reads(T_softmax_exp[v_i0, v_i1], T_softmax_expsum[v_i0])
                    T.writes(T_softmax_norm[v_i0, v_i1])
                    T.block_attr({"axis": 1})
                    T_softmax_norm[v_i0, v_i1] = T_softmax_exp[v_i0, v_i1] / T_softmax_expsum[v_i0]
b0 = sch.get_block(name="T_softmax_maxelem", func_name="main")
b1 = sch.get_block(name="T_softmax_exp", func_name="main")
b2 = sch.get_block(name="T_softmax_expsum", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
l4, l5 = sch.get_loops(block=b0)
v6, v7 = sch.sample_perfect_tile(loop=l5, n=2, max_innermost_factor=64, decision=[2, 5])
l8, l9 = sch.split(loop=l5, factors=[v6, v7], preserve_unit_iters=True, disable_predication=False)
b10 = sch.rfactor(loop=l8, factor_axis=1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer", ann_val=1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=96)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v11 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v11)
l12 = sch.sample_compute_location(block=b2, decision=-1)
sch.compute_at(block=b2, loop=l12, preserve_unit_loops=True, index=-1)
l13 = sch.sample_compute_location(block=b1, decision=-1)
sch.compute_at(block=b1, loop=l13, preserve_unit_loops=True, index=-1)
b14, = sch.get_producers(block=b0)
sch.unannotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer")
l15 = sch.sample_compute_location(block=b0, decision=-1)
sch.compute_at(block=b0, loop=l15, preserve_unit_loops=True, index=-1)
l16 = sch.sample_compute_location(block=b14, decision=-1)
sch.compute_at(block=b14, loop=l16, preserve_unit_loops=True, index=-1)
2024-04-30 19:06:09 [INFO] [task_scheduler.cc:170] Design space #7:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(10)), "float32"), T_softmax_norm: T.Buffer((T.int64(1), T.int64(10)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 96, "meta_schedule.unroll_explicit": 0, "meta_schedule.vectorize": 64})
            T_softmax_maxelem = T.alloc_buffer((T.int64(1),))
            T_softmax_expsum = T.alloc_buffer((T.int64(1),))
            T_softmax_maxelem_rf = T.alloc_buffer((T.int64(1), T.int64(5)))
            for i0, k_0, k_1 in T.grid(T.int64(1), T.int64(2), T.int64(5)):
                with T.block("T_softmax_maxelem_rf"):
                    vk_1, v_i0, vk_0 = T.axis.remap("SSR", [k_1, i0, k_0])
                    T.reads(p0[v_i0, vk_0 * T.int64(5) + vk_1])
                    T.writes(T_softmax_maxelem_rf[v_i0, vk_1])
                    with T.init():
                        T_softmax_maxelem_rf[v_i0, vk_1] = T.float32(-3.4028234663852886e+38)
                    T_softmax_maxelem_rf[v_i0, vk_1] = T.max(T_softmax_maxelem_rf[v_i0, vk_1], p0[v_i0, vk_0 * T.int64(5) + vk_1])
            for i0, k_1 in T.grid(T.int64(1), T.int64(5)):
                with T.block("T_softmax_maxelem"):
                    vk_1, v_i0 = T.axis.remap("RS", [k_1, i0])
                    T.reads(T_softmax_maxelem_rf[v_i0, vk_1])
                    T.writes(T_softmax_maxelem[v_i0])
                    with T.init():
                        T_softmax_maxelem[v_i0] = T.float32(-3.4028234663852886e+38)
                    T_softmax_maxelem[v_i0] = T.max(T_softmax_maxelem[v_i0], T_softmax_maxelem_rf[v_i0, vk_1])
            for i0, k in T.grid(T.int64(1), T.int64(10)):
                with T.block("T_softmax_expsum"):
                    v_i0, v_k = T.axis.remap("SR", [i0, k])
                    T.reads(p0[v_i0, v_k], T_softmax_maxelem[v_i0])
                    T.writes(T_softmax_expsum[v_i0])
                    with T.init():
                        T_softmax_expsum[v_i0] = T.float32(0)
                    T_softmax_expsum[v_i0] = T_softmax_expsum[v_i0] + T.exp(p0[v_i0, v_k] - T_softmax_maxelem[v_i0])
            for i0, i1 in T.grid(T.int64(1), T.int64(10)):
                with T.block("T_softmax_norm"):
                    v_i0, v_i1 = T.axis.remap("SS", [i0, i1])
                    T.reads(p0[v_i0, v_i1], T_softmax_maxelem[v_i0], T_softmax_expsum[v_i0])
                    T.writes(T_softmax_norm[v_i0, v_i1])
                    T.block_attr({"axis": 1})
                    T_softmax_norm[v_i0, v_i1] = T.exp(p0[v_i0, v_i1] - T_softmax_maxelem[v_i0]) / T_softmax_expsum[v_i0]
b0 = sch.get_block(name="T_softmax_maxelem", func_name="main")
b1 = sch.get_block(name="T_softmax_exp", func_name="main")
b2 = sch.get_block(name="T_softmax_expsum", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
l4, l5 = sch.get_loops(block=b0)
v6, v7 = sch.sample_perfect_tile(loop=l5, n=2, max_innermost_factor=64, decision=[2, 5])
l8, l9 = sch.split(loop=l5, factors=[v6, v7], preserve_unit_iters=True, disable_predication=False)
b10 = sch.rfactor(loop=l9, factor_axis=1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer", ann_val=1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=96)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v11 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v11)
l12 = sch.sample_compute_location(block=b2, decision=-1)
sch.compute_at(block=b2, loop=l12, preserve_unit_loops=True, index=-1)
l13 = sch.sample_compute_location(block=b1, decision=-2)
sch.compute_at(block=b1, loop=l13, preserve_unit_loops=True, index=-1)
b14, = sch.get_producers(block=b0)
sch.unannotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer")
l15 = sch.sample_compute_location(block=b0, decision=-1)
sch.compute_at(block=b0, loop=l15, preserve_unit_loops=True, index=-1)
l16 = sch.sample_compute_location(block=b14, decision=-1)
sch.compute_at(block=b14, loop=l16, preserve_unit_loops=True, index=-1)
2024-04-30 19:06:09 [INFO] [task_scheduler.cc:170] Design space #8:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(10)), "float32"), T_softmax_norm: T.Buffer((T.int64(1), T.int64(10)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 96, "meta_schedule.unroll_explicit": 512, "meta_schedule.vectorize": 64})
            T_softmax_maxelem = T.alloc_buffer((T.int64(1),))
            T_softmax_exp = T.alloc_buffer((T.int64(1), T.int64(10)))
            T_softmax_expsum = T.alloc_buffer((T.int64(1),))
            for i0, i1 in T.grid(T.int64(1), T.int64(10)):
                for ax0, ax1 in T.grid(T.int64(1), T.int64(10)):
                    for ax0_1, ax1_1 in T.grid(T.int64(1), T.int64(10)):
                        with T.block("T_softmax_maxelem"):
                            v_i0, v_k = T.axis.remap("SR", [ax0_1, ax1_1])
                            T.reads(p0[v_i0, v_k])
                            T.writes(T_softmax_maxelem[v_i0])
                            with T.init():
                                T_softmax_maxelem[v_i0] = T.float32(-3.4028234663852886e+38)
                            T_softmax_maxelem[v_i0] = T.max(T_softmax_maxelem[v_i0], p0[v_i0, v_k])
                    with T.block("T_softmax_exp"):
                        v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                        T.reads(p0[v_i0, v_i1], T_softmax_maxelem[v_i0])
                        T.writes(T_softmax_exp[v_i0, v_i1])
                        T_softmax_exp[v_i0, v_i1] = T.exp(p0[v_i0, v_i1] - T_softmax_maxelem[v_i0])
                for ax0, ax1 in T.grid(T.int64(1), T.int64(10)):
                    with T.block("T_softmax_expsum"):
                        v_i0, v_k = T.axis.remap("SR", [ax0, ax1])
                        T.reads(T_softmax_exp[v_i0, v_k])
                        T.writes(T_softmax_expsum[v_i0])
                        with T.init():
                            T_softmax_expsum[v_i0] = T.float32(0)
                        T_softmax_expsum[v_i0] = T_softmax_expsum[v_i0] + T_softmax_exp[v_i0, v_k]
                with T.block("T_softmax_norm"):
                    v_i0, v_i1 = T.axis.remap("SS", [i0, i1])
                    T.reads(T_softmax_exp[v_i0, v_i1], T_softmax_expsum[v_i0])
                    T.writes(T_softmax_norm[v_i0, v_i1])
                    T.block_attr({"axis": 1})
                    T_softmax_norm[v_i0, v_i1] = T_softmax_exp[v_i0, v_i1] / T_softmax_expsum[v_i0]
b0 = sch.get_block(name="T_softmax_maxelem", func_name="main")
b1 = sch.get_block(name="T_softmax_exp", func_name="main")
b2 = sch.get_block(name="T_softmax_expsum", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=96)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v4 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v4)
l5 = sch.sample_compute_location(block=b2, decision=1)
sch.compute_at(block=b2, loop=l5, preserve_unit_loops=True, index=-1)
l6 = sch.sample_compute_location(block=b1, decision=1)
sch.compute_at(block=b1, loop=l6, preserve_unit_loops=True, index=-1)
l7 = sch.sample_compute_location(block=b0, decision=3)
sch.compute_at(block=b0, loop=l7, preserve_unit_loops=True, index=-1)
2024-04-30 19:13:55 [INFO] [task_scheduler.cc:160] Initializing Task #31: "fused_nn_softmax"
2024-04-30 19:13:55 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(10)), "float32"), T_softmax_norm: T.Buffer((T.int64(1), T.int64(10)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        T_softmax_maxelem = T.alloc_buffer((T.int64(1),))
        T_softmax_exp = T.alloc_buffer((T.int64(1), T.int64(10)))
        T_softmax_expsum = T.alloc_buffer((T.int64(1),))
        for i0, k in T.grid(T.int64(1), T.int64(10)):
            with T.block("T_softmax_maxelem"):
                v_i0, v_k = T.axis.remap("SR", [i0, k])
                T.reads(p0[v_i0, v_k])
                T.writes(T_softmax_maxelem[v_i0])
                with T.init():
                    T_softmax_maxelem[v_i0] = T.float32(-3.4028234663852886e+38)
                T_softmax_maxelem[v_i0] = T.max(T_softmax_maxelem[v_i0], p0[v_i0, v_k])
        for i0, i1 in T.grid(T.int64(1), T.int64(10)):
            with T.block("T_softmax_exp"):
                v_i0, v_i1 = T.axis.remap("SS", [i0, i1])
                T.reads(p0[v_i0, v_i1], T_softmax_maxelem[v_i0])
                T.writes(T_softmax_exp[v_i0, v_i1])
                T_softmax_exp[v_i0, v_i1] = T.exp(p0[v_i0, v_i1] - T_softmax_maxelem[v_i0])
        for i0, k in T.grid(T.int64(1), T.int64(10)):
            with T.block("T_softmax_expsum"):
                v_i0, v_k = T.axis.remap("SR", [i0, k])
                T.reads(T_softmax_exp[v_i0, v_k])
                T.writes(T_softmax_expsum[v_i0])
                with T.init():
                    T_softmax_expsum[v_i0] = T.float32(0)
                T_softmax_expsum[v_i0] = T_softmax_expsum[v_i0] + T_softmax_exp[v_i0, v_k]
        for i0, i1 in T.grid(T.int64(1), T.int64(10)):
            with T.block("T_softmax_norm"):
                v_i0, v_i1 = T.axis.remap("SS", [i0, i1])
                T.reads(T_softmax_exp[v_i0, v_i1], T_softmax_expsum[v_i0])
                T.writes(T_softmax_norm[v_i0, v_i1])
                T.block_attr({"axis": 1})
                T_softmax_norm[v_i0, v_i1] = T_softmax_exp[v_i0, v_i1] / T_softmax_expsum[v_i0]
2024-04-30 19:13:55 [INFO] [task_scheduler.cc:164] Total 9 design space(s) generated
2024-04-30 19:13:55 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(10)), "float32"), T_softmax_norm: T.Buffer((T.int64(1), T.int64(10)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 96, "meta_schedule.unroll_explicit": 64, "meta_schedule.vectorize": 64})
            T_softmax_maxelem = T.alloc_buffer((T.int64(1),))
            T_softmax_exp = T.alloc_buffer((T.int64(1), T.int64(10)))
            T_softmax_expsum = T.alloc_buffer((T.int64(1),))
            T_softmax_expsum_rf = T.alloc_buffer((T.int64(1), T.int64(10)))
            T_softmax_maxelem_rf = T.alloc_buffer((T.int64(1), T.int64(2)))
            for i0, k_0, k_1 in T.grid(T.int64(1), T.int64(2), T.int64(5)):
                with T.block("T_softmax_maxelem_rf"):
                    vk_0, v_i0, vk_1 = T.axis.remap("SSR", [k_0, i0, k_1])
                    T.reads(p0[v_i0, vk_0 * T.int64(5) + vk_1])
                    T.writes(T_softmax_maxelem_rf[v_i0, vk_0])
                    with T.init():
                        T_softmax_maxelem_rf[v_i0, vk_0] = T.float32(-3.4028234663852886e+38)
                    T_softmax_maxelem_rf[v_i0, vk_0] = T.max(T_softmax_maxelem_rf[v_i0, vk_0], p0[v_i0, vk_0 * T.int64(5) + vk_1])
            for i0, k_0 in T.grid(T.int64(1), T.int64(2)):
                with T.block("T_softmax_maxelem"):
                    vk_0, v_i0 = T.axis.remap("RS", [k_0, i0])
                    T.reads(T_softmax_maxelem_rf[v_i0, vk_0])
                    T.writes(T_softmax_maxelem[v_i0])
                    with T.init():
                        T_softmax_maxelem[v_i0] = T.float32(-3.4028234663852886e+38)
                    T_softmax_maxelem[v_i0] = T.max(T_softmax_maxelem[v_i0], T_softmax_maxelem_rf[v_i0, vk_0])
            for i0, i1 in T.grid(T.int64(1), T.int64(10)):
                with T.block("T_softmax_exp"):
                    v_i0, v_i1 = T.axis.remap("SS", [i0, i1])
                    T.reads(p0[v_i0, v_i1], T_softmax_maxelem[v_i0])
                    T.writes(T_softmax_exp[v_i0, v_i1])
                    T_softmax_exp[v_i0, v_i1] = T.exp(p0[v_i0, v_i1] - T_softmax_maxelem[v_i0])
            for i0, k_0, k_1 in T.grid(T.int64(1), T.int64(10), T.int64(1)):
                with T.block("T_softmax_expsum_rf"):
                    vk_0, v_i0, vk_1 = T.axis.remap("SSR", [k_0, i0, k_1])
                    T.reads(T_softmax_exp[v_i0, vk_0 + vk_1])
                    T.writes(T_softmax_expsum_rf[v_i0, vk_0])
                    with T.init():
                        T_softmax_expsum_rf[v_i0, vk_0] = T.float32(0)
                    T_softmax_expsum_rf[v_i0, vk_0] = T_softmax_expsum_rf[v_i0, vk_0] + T_softmax_exp[v_i0, vk_0 + vk_1]
            for i0, k_0 in T.grid(T.int64(1), T.int64(10)):
                with T.block("T_softmax_expsum"):
                    vk_0, v_i0 = T.axis.remap("RS", [k_0, i0])
                    T.reads(T_softmax_expsum_rf[v_i0, vk_0])
                    T.writes(T_softmax_expsum[v_i0])
                    with T.init():
                        T_softmax_expsum[v_i0] = T.float32(0)
                    T_softmax_expsum[v_i0] = T_softmax_expsum[v_i0] + T_softmax_expsum_rf[v_i0, vk_0]
            for i0, i1 in T.grid(T.int64(1), T.int64(10)):
                with T.block("T_softmax_norm"):
                    v_i0, v_i1 = T.axis.remap("SS", [i0, i1])
                    T.reads(T_softmax_exp[v_i0, v_i1], T_softmax_expsum[v_i0])
                    T.writes(T_softmax_norm[v_i0, v_i1])
                    T.block_attr({"axis": 1})
                    T_softmax_norm[v_i0, v_i1] = T_softmax_exp[v_i0, v_i1] / T_softmax_expsum[v_i0]
b0 = sch.get_block(name="T_softmax_maxelem", func_name="main")
b1 = sch.get_block(name="T_softmax_exp", func_name="main")
b2 = sch.get_block(name="T_softmax_expsum", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
l4, l5 = sch.get_loops(block=b2)
v6, v7 = sch.sample_perfect_tile(loop=l5, n=2, max_innermost_factor=64, decision=[10, 1])
l8, l9 = sch.split(loop=l5, factors=[v6, v7], preserve_unit_iters=True, disable_predication=False)
b10 = sch.rfactor(loop=l8, factor_axis=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.random_compute_producer", ann_val=1)
l11, l12 = sch.get_loops(block=b0)
v13, v14 = sch.sample_perfect_tile(loop=l12, n=2, max_innermost_factor=64, decision=[2, 5])
l15, l16 = sch.split(loop=l12, factors=[v13, v14], preserve_unit_iters=True, disable_predication=False)
b17 = sch.rfactor(loop=l15, factor_axis=1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer", ann_val=1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=96)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v18 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v18)
b19, = sch.get_producers(block=b2)
sch.unannotate(block_or_loop=b2, ann_key="meta_schedule.random_compute_producer")
l20 = sch.sample_compute_location(block=b2, decision=-1)
sch.compute_at(block=b2, loop=l20, preserve_unit_loops=True, index=-1)
l21 = sch.sample_compute_location(block=b19, decision=-1)
sch.compute_at(block=b19, loop=l21, preserve_unit_loops=True, index=-1)
l22 = sch.sample_compute_location(block=b1, decision=-1)
sch.compute_at(block=b1, loop=l22, preserve_unit_loops=True, index=-1)
b23, = sch.get_producers(block=b0)
sch.unannotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer")
l24 = sch.sample_compute_location(block=b0, decision=-1)
sch.compute_at(block=b0, loop=l24, preserve_unit_loops=True, index=-1)
l25 = sch.sample_compute_location(block=b23, decision=-1)
sch.compute_at(block=b23, loop=l25, preserve_unit_loops=True, index=-1)
2024-04-30 19:13:55 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(10)), "float32"), T_softmax_norm: T.Buffer((T.int64(1), T.int64(10)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 96, "meta_schedule.unroll_explicit": 16, "meta_schedule.vectorize": 64})
            T_softmax_maxelem = T.alloc_buffer((T.int64(1),))
            T_softmax_exp = T.alloc_buffer((T.int64(1), T.int64(10)))
            T_softmax_expsum = T.alloc_buffer((T.int64(1),))
            T_softmax_expsum_rf = T.alloc_buffer((T.int64(1), T.int64(10)))
            T_softmax_maxelem_rf = T.alloc_buffer((T.int64(1), T.int64(5)))
            for i0, i1 in T.grid(T.int64(1), T.int64(10)):
                for ax0, ax1, ax2 in T.grid(T.int64(5), T.int64(1), T.int64(2)):
                    with T.block("T_softmax_maxelem_rf"):
                        vk_1, v_i0, vk_0 = T.axis.remap("SSR", [ax0, ax1, ax2])
                        T.reads(p0[v_i0, vk_0 * T.int64(5) + vk_1])
                        T.writes(T_softmax_maxelem_rf[v_i0, vk_1])
                        with T.init():
                            T_softmax_maxelem_rf[v_i0, vk_1] = T.float32(-3.4028234663852886e+38)
                        T_softmax_maxelem_rf[v_i0, vk_1] = T.max(T_softmax_maxelem_rf[v_i0, vk_1], p0[v_i0, vk_0 * T.int64(5) + vk_1])
                for ax0, ax1 in T.grid(T.int64(5), T.int64(1)):
                    with T.block("T_softmax_maxelem"):
                        vk_1, v_i0 = T.axis.remap("RS", [ax0, ax1])
                        T.reads(T_softmax_maxelem_rf[v_i0, vk_1])
                        T.writes(T_softmax_maxelem[v_i0])
                        with T.init():
                            T_softmax_maxelem[v_i0] = T.float32(-3.4028234663852886e+38)
                        T_softmax_maxelem[v_i0] = T.max(T_softmax_maxelem[v_i0], T_softmax_maxelem_rf[v_i0, vk_1])
                with T.block("T_softmax_exp"):
                    v_i0, v_i1 = T.axis.remap("SS", [i0, i1])
                    T.reads(p0[v_i0, v_i1], T_softmax_maxelem[v_i0])
                    T.writes(T_softmax_exp[v_i0, v_i1])
                    T_softmax_exp[v_i0, v_i1] = T.exp(p0[v_i0, v_i1] - T_softmax_maxelem[v_i0])
            for i0, k_0, k_1 in T.grid(T.int64(1), T.int64(10), T.int64(1)):
                with T.block("T_softmax_expsum_rf"):
                    vk_0, v_i0, vk_1 = T.axis.remap("SSR", [k_0, i0, k_1])
                    T.reads(T_softmax_exp[v_i0, vk_0 + vk_1])
                    T.writes(T_softmax_expsum_rf[v_i0, vk_0])
                    with T.init():
                        T_softmax_expsum_rf[v_i0, vk_0] = T.float32(0)
                    T_softmax_expsum_rf[v_i0, vk_0] = T_softmax_expsum_rf[v_i0, vk_0] + T_softmax_exp[v_i0, vk_0 + vk_1]
            for i0, k_0 in T.grid(T.int64(1), T.int64(10)):
                with T.block("T_softmax_expsum"):
                    vk_0, v_i0 = T.axis.remap("RS", [k_0, i0])
                    T.reads(T_softmax_expsum_rf[v_i0, vk_0])
                    T.writes(T_softmax_expsum[v_i0])
                    with T.init():
                        T_softmax_expsum[v_i0] = T.float32(0)
                    T_softmax_expsum[v_i0] = T_softmax_expsum[v_i0] + T_softmax_expsum_rf[v_i0, vk_0]
            for i0, i1 in T.grid(T.int64(1), T.int64(10)):
                with T.block("T_softmax_norm"):
                    v_i0, v_i1 = T.axis.remap("SS", [i0, i1])
                    T.reads(T_softmax_exp[v_i0, v_i1], T_softmax_expsum[v_i0])
                    T.writes(T_softmax_norm[v_i0, v_i1])
                    T.block_attr({"axis": 1})
                    T_softmax_norm[v_i0, v_i1] = T_softmax_exp[v_i0, v_i1] / T_softmax_expsum[v_i0]
b0 = sch.get_block(name="T_softmax_maxelem", func_name="main")
b1 = sch.get_block(name="T_softmax_exp", func_name="main")
b2 = sch.get_block(name="T_softmax_expsum", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
l4, l5 = sch.get_loops(block=b2)
v6, v7 = sch.sample_perfect_tile(loop=l5, n=2, max_innermost_factor=64, decision=[10, 1])
l8, l9 = sch.split(loop=l5, factors=[v6, v7], preserve_unit_iters=True, disable_predication=False)
b10 = sch.rfactor(loop=l8, factor_axis=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.random_compute_producer", ann_val=1)
l11, l12 = sch.get_loops(block=b0)
v13, v14 = sch.sample_perfect_tile(loop=l12, n=2, max_innermost_factor=64, decision=[2, 5])
l15, l16 = sch.split(loop=l12, factors=[v13, v14], preserve_unit_iters=True, disable_predication=False)
b17 = sch.rfactor(loop=l16, factor_axis=1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer", ann_val=1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=96)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v18 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v18)
b19, = sch.get_producers(block=b2)
sch.unannotate(block_or_loop=b2, ann_key="meta_schedule.random_compute_producer")
l20 = sch.sample_compute_location(block=b2, decision=-1)
sch.compute_at(block=b2, loop=l20, preserve_unit_loops=True, index=-1)
l21 = sch.sample_compute_location(block=b19, decision=-1)
sch.compute_at(block=b19, loop=l21, preserve_unit_loops=True, index=-1)
l22 = sch.sample_compute_location(block=b1, decision=-1)
sch.compute_at(block=b1, loop=l22, preserve_unit_loops=True, index=-1)
b23, = sch.get_producers(block=b0)
sch.unannotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer")
l24 = sch.sample_compute_location(block=b0, decision=1)
sch.compute_at(block=b0, loop=l24, preserve_unit_loops=True, index=-1)
l25 = sch.sample_compute_location(block=b23, decision=1)
sch.compute_at(block=b23, loop=l25, preserve_unit_loops=True, index=-1)
2024-04-30 19:13:55 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(10)), "float32"), T_softmax_norm: T.Buffer((T.int64(1), T.int64(10)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 96, "meta_schedule.unroll_explicit": 64, "meta_schedule.vectorize": 64})
            T_softmax_maxelem = T.alloc_buffer((T.int64(1),))
            T_softmax_exp = T.alloc_buffer((T.int64(1), T.int64(10)))
            T_softmax_expsum = T.alloc_buffer((T.int64(1),))
            T_softmax_expsum_rf = T.alloc_buffer((T.int64(1), T.int64(10)))
            for i0, i1 in T.grid(T.int64(1), T.int64(10)):
                for ax0, ax1 in T.grid(T.int64(1), T.int64(10)):
                    with T.block("T_softmax_maxelem"):
                        v_i0, v_k = T.axis.remap("SR", [ax0, ax1])
                        T.reads(p0[v_i0, v_k])
                        T.writes(T_softmax_maxelem[v_i0])
                        with T.init():
                            T_softmax_maxelem[v_i0] = T.float32(-3.4028234663852886e+38)
                        T_softmax_maxelem[v_i0] = T.max(T_softmax_maxelem[v_i0], p0[v_i0, v_k])
                with T.block("T_softmax_exp"):
                    v_i0, v_i1 = T.axis.remap("SS", [i0, i1])
                    T.reads(p0[v_i0, v_i1], T_softmax_maxelem[v_i0])
                    T.writes(T_softmax_exp[v_i0, v_i1])
                    T_softmax_exp[v_i0, v_i1] = T.exp(p0[v_i0, v_i1] - T_softmax_maxelem[v_i0])
            for i0, i1 in T.grid(T.int64(1), T.int64(10)):
                for ax0 in range(T.int64(10)):
                    for ax0_1, ax1, ax2 in T.grid(T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("T_softmax_expsum_rf"):
                            vk_0 = T.axis.spatial(T.int64(10), ax0 + ax0_1)
                            v_i0, vk_1 = T.axis.remap("SR", [ax1, ax2])
                            T.reads(T_softmax_exp[v_i0, vk_0 + vk_1])
                            T.writes(T_softmax_expsum_rf[v_i0, vk_0])
                            with T.init():
                                T_softmax_expsum_rf[v_i0, vk_0] = T.float32(0)
                            T_softmax_expsum_rf[v_i0, vk_0] = T_softmax_expsum_rf[v_i0, vk_0] + T_softmax_exp[v_i0, vk_0 + vk_1]
                    for ax1 in range(T.int64(1)):
                        with T.block("T_softmax_expsum"):
                            vk_0, v_i0 = T.axis.remap("RS", [ax0, ax1])
                            T.reads(T_softmax_expsum_rf[v_i0, vk_0])
                            T.writes(T_softmax_expsum[v_i0])
                            with T.init():
                                T_softmax_expsum[v_i0] = T.float32(0)
                            T_softmax_expsum[v_i0] = T_softmax_expsum[v_i0] + T_softmax_expsum_rf[v_i0, vk_0]
                with T.block("T_softmax_norm"):
                    v_i0, v_i1 = T.axis.remap("SS", [i0, i1])
                    T.reads(T_softmax_exp[v_i0, v_i1], T_softmax_expsum[v_i0])
                    T.writes(T_softmax_norm[v_i0, v_i1])
                    T.block_attr({"axis": 1})
                    T_softmax_norm[v_i0, v_i1] = T_softmax_exp[v_i0, v_i1] / T_softmax_expsum[v_i0]
b0 = sch.get_block(name="T_softmax_maxelem", func_name="main")
b1 = sch.get_block(name="T_softmax_exp", func_name="main")
b2 = sch.get_block(name="T_softmax_expsum", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
l4, l5 = sch.get_loops(block=b2)
v6, v7 = sch.sample_perfect_tile(loop=l5, n=2, max_innermost_factor=64, decision=[10, 1])
l8, l9 = sch.split(loop=l5, factors=[v6, v7], preserve_unit_iters=True, disable_predication=False)
b10 = sch.rfactor(loop=l8, factor_axis=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.random_compute_producer", ann_val=1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=96)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v11 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v11)
b12, = sch.get_producers(block=b2)
sch.unannotate(block_or_loop=b2, ann_key="meta_schedule.random_compute_producer")
l13 = sch.sample_compute_location(block=b2, decision=1)
sch.compute_at(block=b2, loop=l13, preserve_unit_loops=True, index=-1)
l14 = sch.sample_compute_location(block=b12, decision=2)
sch.compute_at(block=b12, loop=l14, preserve_unit_loops=True, index=-1)
l15 = sch.sample_compute_location(block=b1, decision=-1)
sch.compute_at(block=b1, loop=l15, preserve_unit_loops=True, index=-1)
l16 = sch.sample_compute_location(block=b0, decision=1)
sch.compute_at(block=b0, loop=l16, preserve_unit_loops=True, index=-1)
2024-04-30 19:13:55 [INFO] [task_scheduler.cc:170] Design space #3:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(10)), "float32"), T_softmax_norm: T.Buffer((T.int64(1), T.int64(10)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 96, "meta_schedule.unroll_explicit": 0, "meta_schedule.vectorize": 64})
            T_softmax_maxelem = T.alloc_buffer((T.int64(1),))
            T_softmax_expsum = T.alloc_buffer((T.int64(1),))
            T_softmax_expsum_rf = T.alloc_buffer((T.int64(1), T.int64(1)))
            T_softmax_maxelem_rf = T.alloc_buffer((T.int64(1), T.int64(5)))
            for i0, k_0, k_1 in T.grid(T.int64(1), T.int64(5), T.int64(2)):
                with T.block("T_softmax_maxelem_rf"):
                    vk_0, v_i0, vk_1 = T.axis.remap("SSR", [k_0, i0, k_1])
                    T.reads(p0[v_i0, vk_0 * T.int64(2) + vk_1])
                    T.writes(T_softmax_maxelem_rf[v_i0, vk_0])
                    with T.init():
                        T_softmax_maxelem_rf[v_i0, vk_0] = T.float32(-3.4028234663852886e+38)
                    T_softmax_maxelem_rf[v_i0, vk_0] = T.max(T_softmax_maxelem_rf[v_i0, vk_0], p0[v_i0, vk_0 * T.int64(2) + vk_1])
            for i0, k_0 in T.grid(T.int64(1), T.int64(5)):
                with T.block("T_softmax_maxelem"):
                    vk_0, v_i0 = T.axis.remap("RS", [k_0, i0])
                    T.reads(T_softmax_maxelem_rf[v_i0, vk_0])
                    T.writes(T_softmax_maxelem[v_i0])
                    with T.init():
                        T_softmax_maxelem[v_i0] = T.float32(-3.4028234663852886e+38)
                    T_softmax_maxelem[v_i0] = T.max(T_softmax_maxelem[v_i0], T_softmax_maxelem_rf[v_i0, vk_0])
            for i0, k_0, k_1 in T.grid(T.int64(1), T.int64(10), T.int64(1)):
                with T.block("T_softmax_expsum_rf"):
                    vk_1, v_i0, vk_0 = T.axis.remap("SSR", [k_1, i0, k_0])
                    T.reads(p0[v_i0, vk_0 + vk_1], T_softmax_maxelem[v_i0])
                    T.writes(T_softmax_expsum_rf[v_i0, vk_1])
                    with T.init():
                        T_softmax_expsum_rf[v_i0, vk_1] = T.float32(0)
                    T_softmax_expsum_rf[v_i0, vk_1] = T_softmax_expsum_rf[v_i0, vk_1] + T.exp(p0[v_i0, vk_0 + vk_1] - T_softmax_maxelem[v_i0])
            for i0, i1 in T.grid(T.int64(1), T.int64(10)):
                for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                    with T.block("T_softmax_expsum"):
                        vk_1, v_i0 = T.axis.remap("RS", [ax0, ax1])
                        T.reads(T_softmax_expsum_rf[v_i0, vk_1])
                        T.writes(T_softmax_expsum[v_i0])
                        with T.init():
                            T_softmax_expsum[v_i0] = T.float32(0)
                        T_softmax_expsum[v_i0] = T_softmax_expsum[v_i0] + T_softmax_expsum_rf[v_i0, vk_1]
                with T.block("T_softmax_norm"):
                    v_i0, v_i1 = T.axis.remap("SS", [i0, i1])
                    T.reads(p0[v_i0, v_i1], T_softmax_maxelem[v_i0], T_softmax_expsum[v_i0])
                    T.writes(T_softmax_norm[v_i0, v_i1])
                    T.block_attr({"axis": 1})
                    T_softmax_norm[v_i0, v_i1] = T.exp(p0[v_i0, v_i1] - T_softmax_maxelem[v_i0]) / T_softmax_expsum[v_i0]
b0 = sch.get_block(name="T_softmax_maxelem", func_name="main")
b1 = sch.get_block(name="T_softmax_exp", func_name="main")
b2 = sch.get_block(name="T_softmax_expsum", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
l4, l5 = sch.get_loops(block=b2)
v6, v7 = sch.sample_perfect_tile(loop=l5, n=2, max_innermost_factor=64, decision=[10, 1])
l8, l9 = sch.split(loop=l5, factors=[v6, v7], preserve_unit_iters=True, disable_predication=False)
b10 = sch.rfactor(loop=l9, factor_axis=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.random_compute_producer", ann_val=1)
l11, l12 = sch.get_loops(block=b0)
v13, v14 = sch.sample_perfect_tile(loop=l12, n=2, max_innermost_factor=64, decision=[5, 2])
l15, l16 = sch.split(loop=l12, factors=[v13, v14], preserve_unit_iters=True, disable_predication=False)
b17 = sch.rfactor(loop=l15, factor_axis=1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer", ann_val=1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=96)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v18 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v18)
b19, = sch.get_producers(block=b2)
sch.unannotate(block_or_loop=b2, ann_key="meta_schedule.random_compute_producer")
l20 = sch.sample_compute_location(block=b2, decision=1)
sch.compute_at(block=b2, loop=l20, preserve_unit_loops=True, index=-1)
l21 = sch.sample_compute_location(block=b19, decision=-1)
sch.compute_at(block=b19, loop=l21, preserve_unit_loops=True, index=-1)
l22 = sch.sample_compute_location(block=b1, decision=-2)
sch.compute_at(block=b1, loop=l22, preserve_unit_loops=True, index=-1)
b23, = sch.get_producers(block=b0)
sch.unannotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer")
l24 = sch.sample_compute_location(block=b0, decision=-1)
sch.compute_at(block=b0, loop=l24, preserve_unit_loops=True, index=-1)
l25 = sch.sample_compute_location(block=b23, decision=-1)
sch.compute_at(block=b23, loop=l25, preserve_unit_loops=True, index=-1)
2024-04-30 19:13:55 [INFO] [task_scheduler.cc:170] Design space #4:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(10)), "float32"), T_softmax_norm: T.Buffer((T.int64(1), T.int64(10)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 96, "meta_schedule.unroll_explicit": 64, "meta_schedule.vectorize": 64})
            T_softmax_maxelem = T.alloc_buffer((T.int64(1),))
            T_softmax_expsum = T.alloc_buffer((T.int64(1),))
            T_softmax_expsum_rf = T.alloc_buffer((T.int64(1), T.int64(1)))
            T_softmax_maxelem_rf = T.alloc_buffer((T.int64(1), T.int64(2)))
            for i0, k_0, k_1 in T.grid(T.int64(1), T.int64(5), T.int64(2)):
                with T.block("T_softmax_maxelem_rf"):
                    vk_1, v_i0, vk_0 = T.axis.remap("SSR", [k_1, i0, k_0])
                    T.reads(p0[v_i0, vk_0 * T.int64(2) + vk_1])
                    T.writes(T_softmax_maxelem_rf[v_i0, vk_1])
                    with T.init():
                        T_softmax_maxelem_rf[v_i0, vk_1] = T.float32(-3.4028234663852886e+38)
                    T_softmax_maxelem_rf[v_i0, vk_1] = T.max(T_softmax_maxelem_rf[v_i0, vk_1], p0[v_i0, vk_0 * T.int64(2) + vk_1])
            for i0, k_1 in T.grid(T.int64(1), T.int64(2)):
                with T.block("T_softmax_maxelem"):
                    vk_1, v_i0 = T.axis.remap("RS", [k_1, i0])
                    T.reads(T_softmax_maxelem_rf[v_i0, vk_1])
                    T.writes(T_softmax_maxelem[v_i0])
                    with T.init():
                        T_softmax_maxelem[v_i0] = T.float32(-3.4028234663852886e+38)
                    T_softmax_maxelem[v_i0] = T.max(T_softmax_maxelem[v_i0], T_softmax_maxelem_rf[v_i0, vk_1])
            for i0, k_0, k_1 in T.grid(T.int64(1), T.int64(10), T.int64(1)):
                with T.block("T_softmax_expsum_rf"):
                    vk_1, v_i0, vk_0 = T.axis.remap("SSR", [k_1, i0, k_0])
                    T.reads(p0[v_i0, vk_0 + vk_1], T_softmax_maxelem[v_i0])
                    T.writes(T_softmax_expsum_rf[v_i0, vk_1])
                    with T.init():
                        T_softmax_expsum_rf[v_i0, vk_1] = T.float32(0)
                    T_softmax_expsum_rf[v_i0, vk_1] = T_softmax_expsum_rf[v_i0, vk_1] + T.exp(p0[v_i0, vk_0 + vk_1] - T_softmax_maxelem[v_i0])
            for i0, k_1 in T.grid(T.int64(1), T.int64(1)):
                with T.block("T_softmax_expsum"):
                    vk_1, v_i0 = T.axis.remap("RS", [k_1, i0])
                    T.reads(T_softmax_expsum_rf[v_i0, vk_1])
                    T.writes(T_softmax_expsum[v_i0])
                    with T.init():
                        T_softmax_expsum[v_i0] = T.float32(0)
                    T_softmax_expsum[v_i0] = T_softmax_expsum[v_i0] + T_softmax_expsum_rf[v_i0, vk_1]
            for i0, i1 in T.grid(T.int64(1), T.int64(10)):
                with T.block("T_softmax_norm"):
                    v_i0, v_i1 = T.axis.remap("SS", [i0, i1])
                    T.reads(p0[v_i0, v_i1], T_softmax_maxelem[v_i0], T_softmax_expsum[v_i0])
                    T.writes(T_softmax_norm[v_i0, v_i1])
                    T.block_attr({"axis": 1})
                    T_softmax_norm[v_i0, v_i1] = T.exp(p0[v_i0, v_i1] - T_softmax_maxelem[v_i0]) / T_softmax_expsum[v_i0]
b0 = sch.get_block(name="T_softmax_maxelem", func_name="main")
b1 = sch.get_block(name="T_softmax_exp", func_name="main")
b2 = sch.get_block(name="T_softmax_expsum", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
l4, l5 = sch.get_loops(block=b2)
v6, v7 = sch.sample_perfect_tile(loop=l5, n=2, max_innermost_factor=64, decision=[10, 1])
l8, l9 = sch.split(loop=l5, factors=[v6, v7], preserve_unit_iters=True, disable_predication=False)
b10 = sch.rfactor(loop=l9, factor_axis=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.random_compute_producer", ann_val=1)
l11, l12 = sch.get_loops(block=b0)
v13, v14 = sch.sample_perfect_tile(loop=l12, n=2, max_innermost_factor=64, decision=[5, 2])
l15, l16 = sch.split(loop=l12, factors=[v13, v14], preserve_unit_iters=True, disable_predication=False)
b17 = sch.rfactor(loop=l16, factor_axis=1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer", ann_val=1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=96)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v18 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v18)
b19, = sch.get_producers(block=b2)
sch.unannotate(block_or_loop=b2, ann_key="meta_schedule.random_compute_producer")
l20 = sch.sample_compute_location(block=b2, decision=-1)
sch.compute_at(block=b2, loop=l20, preserve_unit_loops=True, index=-1)
l21 = sch.sample_compute_location(block=b19, decision=-1)
sch.compute_at(block=b19, loop=l21, preserve_unit_loops=True, index=-1)
l22 = sch.sample_compute_location(block=b1, decision=-2)
sch.compute_at(block=b1, loop=l22, preserve_unit_loops=True, index=-1)
b23, = sch.get_producers(block=b0)
sch.unannotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer")
l24 = sch.sample_compute_location(block=b0, decision=-1)
sch.compute_at(block=b0, loop=l24, preserve_unit_loops=True, index=-1)
l25 = sch.sample_compute_location(block=b23, decision=-1)
sch.compute_at(block=b23, loop=l25, preserve_unit_loops=True, index=-1)
2024-04-30 19:13:55 [INFO] [task_scheduler.cc:170] Design space #5:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(10)), "float32"), T_softmax_norm: T.Buffer((T.int64(1), T.int64(10)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 96, "meta_schedule.unroll_explicit": 16, "meta_schedule.vectorize": 64})
            T_softmax_maxelem = T.alloc_buffer((T.int64(1),))
            T_softmax_exp = T.alloc_buffer((T.int64(1), T.int64(10)))
            T_softmax_expsum = T.alloc_buffer((T.int64(1),))
            T_softmax_expsum_rf = T.alloc_buffer((T.int64(1), T.int64(1)))
            for i0, k in T.grid(T.int64(1), T.int64(10)):
                with T.block("T_softmax_maxelem"):
                    v_i0, v_k = T.axis.remap("SR", [i0, k])
                    T.reads(p0[v_i0, v_k])
                    T.writes(T_softmax_maxelem[v_i0])
                    with T.init():
                        T_softmax_maxelem[v_i0] = T.float32(-3.4028234663852886e+38)
                    T_softmax_maxelem[v_i0] = T.max(T_softmax_maxelem[v_i0], p0[v_i0, v_k])
            for i0, i1 in T.grid(T.int64(1), T.int64(10)):
                with T.block("T_softmax_exp"):
                    v_i0, v_i1 = T.axis.remap("SS", [i0, i1])
                    T.reads(p0[v_i0, v_i1], T_softmax_maxelem[v_i0])
                    T.writes(T_softmax_exp[v_i0, v_i1])
                    T_softmax_exp[v_i0, v_i1] = T.exp(p0[v_i0, v_i1] - T_softmax_maxelem[v_i0])
            for i0, i1 in T.grid(T.int64(1), T.int64(10)):
                for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(1), T.int64(10)):
                    with T.block("T_softmax_expsum_rf"):
                        vk_1, v_i0, vk_0 = T.axis.remap("SSR", [ax0, ax1, ax2])
                        T.reads(T_softmax_exp[v_i0, vk_0 + vk_1])
                        T.writes(T_softmax_expsum_rf[v_i0, vk_1])
                        with T.init():
                            T_softmax_expsum_rf[v_i0, vk_1] = T.float32(0)
                        T_softmax_expsum_rf[v_i0, vk_1] = T_softmax_expsum_rf[v_i0, vk_1] + T_softmax_exp[v_i0, vk_0 + vk_1]
                for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                    with T.block("T_softmax_expsum"):
                        vk_1, v_i0 = T.axis.remap("RS", [ax0, ax1])
                        T.reads(T_softmax_expsum_rf[v_i0, vk_1])
                        T.writes(T_softmax_expsum[v_i0])
                        with T.init():
                            T_softmax_expsum[v_i0] = T.float32(0)
                        T_softmax_expsum[v_i0] = T_softmax_expsum[v_i0] + T_softmax_expsum_rf[v_i0, vk_1]
                with T.block("T_softmax_norm"):
                    v_i0, v_i1 = T.axis.remap("SS", [i0, i1])
                    T.reads(T_softmax_exp[v_i0, v_i1], T_softmax_expsum[v_i0])
                    T.writes(T_softmax_norm[v_i0, v_i1])
                    T.block_attr({"axis": 1})
                    T_softmax_norm[v_i0, v_i1] = T_softmax_exp[v_i0, v_i1] / T_softmax_expsum[v_i0]
b0 = sch.get_block(name="T_softmax_maxelem", func_name="main")
b1 = sch.get_block(name="T_softmax_exp", func_name="main")
b2 = sch.get_block(name="T_softmax_expsum", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
l4, l5 = sch.get_loops(block=b2)
v6, v7 = sch.sample_perfect_tile(loop=l5, n=2, max_innermost_factor=64, decision=[10, 1])
l8, l9 = sch.split(loop=l5, factors=[v6, v7], preserve_unit_iters=True, disable_predication=False)
b10 = sch.rfactor(loop=l9, factor_axis=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.random_compute_producer", ann_val=1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=96)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v11 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v11)
b12, = sch.get_producers(block=b2)
sch.unannotate(block_or_loop=b2, ann_key="meta_schedule.random_compute_producer")
l13 = sch.sample_compute_location(block=b2, decision=1)
sch.compute_at(block=b2, loop=l13, preserve_unit_loops=True, index=-1)
l14 = sch.sample_compute_location(block=b12, decision=1)
sch.compute_at(block=b12, loop=l14, preserve_unit_loops=True, index=-1)
l15 = sch.sample_compute_location(block=b1, decision=-1)
sch.compute_at(block=b1, loop=l15, preserve_unit_loops=True, index=-1)
l16 = sch.sample_compute_location(block=b0, decision=-1)
sch.compute_at(block=b0, loop=l16, preserve_unit_loops=True, index=-1)
2024-04-30 19:13:55 [INFO] [task_scheduler.cc:170] Design space #6:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(10)), "float32"), T_softmax_norm: T.Buffer((T.int64(1), T.int64(10)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 96, "meta_schedule.unroll_explicit": 16, "meta_schedule.vectorize": 64})
            T_softmax_maxelem = T.alloc_buffer((T.int64(1),))
            T_softmax_expsum = T.alloc_buffer((T.int64(1),))
            T_softmax_maxelem_rf = T.alloc_buffer((T.int64(1), T.int64(5)))
            for i0, k_0, k_1 in T.grid(T.int64(1), T.int64(5), T.int64(2)):
                with T.block("T_softmax_maxelem_rf"):
                    vk_0, v_i0, vk_1 = T.axis.remap("SSR", [k_0, i0, k_1])
                    T.reads(p0[v_i0, vk_0 * T.int64(2) + vk_1])
                    T.writes(T_softmax_maxelem_rf[v_i0, vk_0])
                    with T.init():
                        T_softmax_maxelem_rf[v_i0, vk_0] = T.float32(-3.4028234663852886e+38)
                    T_softmax_maxelem_rf[v_i0, vk_0] = T.max(T_softmax_maxelem_rf[v_i0, vk_0], p0[v_i0, vk_0 * T.int64(2) + vk_1])
            for i0, k_0 in T.grid(T.int64(1), T.int64(5)):
                with T.block("T_softmax_maxelem"):
                    vk_0, v_i0 = T.axis.remap("RS", [k_0, i0])
                    T.reads(T_softmax_maxelem_rf[v_i0, vk_0])
                    T.writes(T_softmax_maxelem[v_i0])
                    with T.init():
                        T_softmax_maxelem[v_i0] = T.float32(-3.4028234663852886e+38)
                    T_softmax_maxelem[v_i0] = T.max(T_softmax_maxelem[v_i0], T_softmax_maxelem_rf[v_i0, vk_0])
            for i0, i1 in T.grid(T.int64(1), T.int64(10)):
                for ax0, ax1 in T.grid(T.int64(1), T.int64(10)):
                    with T.block("T_softmax_expsum"):
                        v_i0, v_k = T.axis.remap("SR", [ax0, ax1])
                        T.reads(p0[v_i0, v_k], T_softmax_maxelem[v_i0])
                        T.writes(T_softmax_expsum[v_i0])
                        with T.init():
                            T_softmax_expsum[v_i0] = T.float32(0)
                        T_softmax_expsum[v_i0] = T_softmax_expsum[v_i0] + T.exp(p0[v_i0, v_k] - T_softmax_maxelem[v_i0])
                with T.block("T_softmax_norm"):
                    v_i0, v_i1 = T.axis.remap("SS", [i0, i1])
                    T.reads(p0[v_i0, v_i1], T_softmax_maxelem[v_i0], T_softmax_expsum[v_i0])
                    T.writes(T_softmax_norm[v_i0, v_i1])
                    T.block_attr({"axis": 1})
                    T_softmax_norm[v_i0, v_i1] = T.exp(p0[v_i0, v_i1] - T_softmax_maxelem[v_i0]) / T_softmax_expsum[v_i0]
b0 = sch.get_block(name="T_softmax_maxelem", func_name="main")
b1 = sch.get_block(name="T_softmax_exp", func_name="main")
b2 = sch.get_block(name="T_softmax_expsum", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
l4, l5 = sch.get_loops(block=b0)
v6, v7 = sch.sample_perfect_tile(loop=l5, n=2, max_innermost_factor=64, decision=[5, 2])
l8, l9 = sch.split(loop=l5, factors=[v6, v7], preserve_unit_iters=True, disable_predication=False)
b10 = sch.rfactor(loop=l8, factor_axis=1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer", ann_val=1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=96)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v11 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v11)
l12 = sch.sample_compute_location(block=b2, decision=1)
sch.compute_at(block=b2, loop=l12, preserve_unit_loops=True, index=-1)
l13 = sch.sample_compute_location(block=b1, decision=-2)
sch.compute_at(block=b1, loop=l13, preserve_unit_loops=True, index=-1)
b14, = sch.get_producers(block=b0)
sch.unannotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer")
l15 = sch.sample_compute_location(block=b0, decision=-1)
sch.compute_at(block=b0, loop=l15, preserve_unit_loops=True, index=-1)
l16 = sch.sample_compute_location(block=b14, decision=-1)
sch.compute_at(block=b14, loop=l16, preserve_unit_loops=True, index=-1)
2024-04-30 19:13:55 [INFO] [task_scheduler.cc:170] Design space #7:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(10)), "float32"), T_softmax_norm: T.Buffer((T.int64(1), T.int64(10)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 96, "meta_schedule.unroll_explicit": 512, "meta_schedule.vectorize": 64})
            T_softmax_maxelem = T.alloc_buffer((T.int64(1),))
            T_softmax_expsum = T.alloc_buffer((T.int64(1),))
            T_softmax_maxelem_rf = T.alloc_buffer((T.int64(1), T.int64(2)))
            for i0, k_0, k_1 in T.grid(T.int64(1), T.int64(5), T.int64(2)):
                with T.block("T_softmax_maxelem_rf"):
                    vk_1, v_i0, vk_0 = T.axis.remap("SSR", [k_1, i0, k_0])
                    T.reads(p0[v_i0, vk_0 * T.int64(2) + vk_1])
                    T.writes(T_softmax_maxelem_rf[v_i0, vk_1])
                    with T.init():
                        T_softmax_maxelem_rf[v_i0, vk_1] = T.float32(-3.4028234663852886e+38)
                    T_softmax_maxelem_rf[v_i0, vk_1] = T.max(T_softmax_maxelem_rf[v_i0, vk_1], p0[v_i0, vk_0 * T.int64(2) + vk_1])
            for i0, k_1 in T.grid(T.int64(1), T.int64(2)):
                with T.block("T_softmax_maxelem"):
                    vk_1, v_i0 = T.axis.remap("RS", [k_1, i0])
                    T.reads(T_softmax_maxelem_rf[v_i0, vk_1])
                    T.writes(T_softmax_maxelem[v_i0])
                    with T.init():
                        T_softmax_maxelem[v_i0] = T.float32(-3.4028234663852886e+38)
                    T_softmax_maxelem[v_i0] = T.max(T_softmax_maxelem[v_i0], T_softmax_maxelem_rf[v_i0, vk_1])
            for i0, k in T.grid(T.int64(1), T.int64(10)):
                with T.block("T_softmax_expsum"):
                    v_i0, v_k = T.axis.remap("SR", [i0, k])
                    T.reads(p0[v_i0, v_k], T_softmax_maxelem[v_i0])
                    T.writes(T_softmax_expsum[v_i0])
                    with T.init():
                        T_softmax_expsum[v_i0] = T.float32(0)
                    T_softmax_expsum[v_i0] = T_softmax_expsum[v_i0] + T.exp(p0[v_i0, v_k] - T_softmax_maxelem[v_i0])
            for i0, i1 in T.grid(T.int64(1), T.int64(10)):
                with T.block("T_softmax_norm"):
                    v_i0, v_i1 = T.axis.remap("SS", [i0, i1])
                    T.reads(p0[v_i0, v_i1], T_softmax_maxelem[v_i0], T_softmax_expsum[v_i0])
                    T.writes(T_softmax_norm[v_i0, v_i1])
                    T.block_attr({"axis": 1})
                    T_softmax_norm[v_i0, v_i1] = T.exp(p0[v_i0, v_i1] - T_softmax_maxelem[v_i0]) / T_softmax_expsum[v_i0]
b0 = sch.get_block(name="T_softmax_maxelem", func_name="main")
b1 = sch.get_block(name="T_softmax_exp", func_name="main")
b2 = sch.get_block(name="T_softmax_expsum", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
l4, l5 = sch.get_loops(block=b0)
v6, v7 = sch.sample_perfect_tile(loop=l5, n=2, max_innermost_factor=64, decision=[5, 2])
l8, l9 = sch.split(loop=l5, factors=[v6, v7], preserve_unit_iters=True, disable_predication=False)
b10 = sch.rfactor(loop=l9, factor_axis=1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer", ann_val=1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=96)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v11 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v11)
l12 = sch.sample_compute_location(block=b2, decision=-1)
sch.compute_at(block=b2, loop=l12, preserve_unit_loops=True, index=-1)
l13 = sch.sample_compute_location(block=b1, decision=-2)
sch.compute_at(block=b1, loop=l13, preserve_unit_loops=True, index=-1)
b14, = sch.get_producers(block=b0)
sch.unannotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer")
l15 = sch.sample_compute_location(block=b0, decision=-1)
sch.compute_at(block=b0, loop=l15, preserve_unit_loops=True, index=-1)
l16 = sch.sample_compute_location(block=b14, decision=-1)
sch.compute_at(block=b14, loop=l16, preserve_unit_loops=True, index=-1)
2024-04-30 19:13:55 [INFO] [task_scheduler.cc:170] Design space #8:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(10)), "float32"), T_softmax_norm: T.Buffer((T.int64(1), T.int64(10)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 96, "meta_schedule.unroll_explicit": 0, "meta_schedule.vectorize": 64})
            T_softmax_maxelem = T.alloc_buffer((T.int64(1),))
            T_softmax_expsum = T.alloc_buffer((T.int64(1),))
            for i0, k in T.grid(T.int64(1), T.int64(10)):
                with T.block("T_softmax_maxelem"):
                    v_i0, v_k = T.axis.remap("SR", [i0, k])
                    T.reads(p0[v_i0, v_k])
                    T.writes(T_softmax_maxelem[v_i0])
                    with T.init():
                        T_softmax_maxelem[v_i0] = T.float32(-3.4028234663852886e+38)
                    T_softmax_maxelem[v_i0] = T.max(T_softmax_maxelem[v_i0], p0[v_i0, v_k])
            for i0, i1 in T.grid(T.int64(1), T.int64(10)):
                for ax0, ax1 in T.grid(T.int64(1), T.int64(10)):
                    with T.block("T_softmax_expsum"):
                        v_i0, v_k = T.axis.remap("SR", [ax0, ax1])
                        T.reads(p0[v_i0, v_k], T_softmax_maxelem[v_i0])
                        T.writes(T_softmax_expsum[v_i0])
                        with T.init():
                            T_softmax_expsum[v_i0] = T.float32(0)
                        T_softmax_expsum[v_i0] = T_softmax_expsum[v_i0] + T.exp(p0[v_i0, v_k] - T_softmax_maxelem[v_i0])
                with T.block("T_softmax_norm"):
                    v_i0, v_i1 = T.axis.remap("SS", [i0, i1])
                    T.reads(p0[v_i0, v_i1], T_softmax_maxelem[v_i0], T_softmax_expsum[v_i0])
                    T.writes(T_softmax_norm[v_i0, v_i1])
                    T.block_attr({"axis": 1})
                    T_softmax_norm[v_i0, v_i1] = T.exp(p0[v_i0, v_i1] - T_softmax_maxelem[v_i0]) / T_softmax_expsum[v_i0]
b0 = sch.get_block(name="T_softmax_maxelem", func_name="main")
b1 = sch.get_block(name="T_softmax_exp", func_name="main")
b2 = sch.get_block(name="T_softmax_expsum", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=96)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v4 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v4)
l5 = sch.sample_compute_location(block=b2, decision=1)
sch.compute_at(block=b2, loop=l5, preserve_unit_loops=True, index=-1)
l6 = sch.sample_compute_location(block=b1, decision=-2)
sch.compute_at(block=b1, loop=l6, preserve_unit_loops=True, index=-1)
l7 = sch.sample_compute_location(block=b0, decision=-1)
sch.compute_at(block=b0, loop=l7, preserve_unit_loops=True, index=-1)
2024-04-30 19:35:51 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-30 19:35:51 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-30 19:35:52 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xe825c78)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x9426e38)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x86bbfe8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x21542ba8)]: 0 failure(s)
2024-04-30 19:35:52 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-30 19:35:53 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xe825c78)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x9426e38)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x86bbfe8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x21542ba8)]: 0 failure(s)
2024-04-30 19:35:54 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xe825c78)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x9426e38)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x86bbfe8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x21542ba8)]: 0 failure(s)
2024-04-30 19:35:55 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xe825c78)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x9426e38)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x86bbfe8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x21542ba8)]: 0 failure(s)
2024-04-30 19:35:56 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xe825c78)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x9426e38)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x86bbfe8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x21542ba8)]: 0 failure(s)
2024-04-30 19:35:56 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9993  0.9991  0.9983  0.9977  0.9974  0.9962  0.9952  0.9935  0.9927  0.9896  0.9877  0.9876  0.9871  0.9871  0.9858  0.9850
[17 : 32]:	0.9849  0.9830  0.9827  0.9827  0.9809  0.9808  0.9804  0.9798  0.9797  0.9790  0.9782  0.9776  0.9775  0.9773  0.9773  0.9756
[33 : 48]:	0.9754  0.9740  0.9723  0.9721  0.9721  0.9704  0.9703  0.9703  0.9702  0.9699  0.9687  0.9686  0.9684  0.9675  0.9675  0.9671
[49 : 64]:	0.9622  0.9619  0.9608  0.9606  0.9594  0.9591  0.9584  0.9582  0.9578  0.9576  0.9561  0.9558  0.9511  0.9507  0.9502  0.9497
2024-04-30 19:35:56 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-30 19:35:56 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-30 19:36:41 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_softmax] Trial #1: GFLOPs: 0.0042. Time: 9.4670 us. Best GFLOPs: 0.0042
2024-04-30 19:36:41 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_softmax] Trial #2: GFLOPs: 0.0035. Time: 11.3454 us. Best GFLOPs: 0.0042
2024-04-30 19:36:41 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_softmax] Trial #3: GFLOPs: 0.0036. Time: 11.2209 us. Best GFLOPs: 0.0042
2024-04-30 19:36:41 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_softmax] Trial #4: GFLOPs: 0.0034. Time: 11.8590 us. Best GFLOPs: 0.0042
2024-04-30 19:36:41 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_softmax] Trial #5: GFLOPs: 0.0035. Time: 11.5438 us. Best GFLOPs: 0.0042
2024-04-30 19:36:41 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_softmax] Trial #6: GFLOPs: 0.0044. Time: 9.1355 us. Best GFLOPs: 0.0044
2024-04-30 19:36:41 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_softmax] Trial #7: GFLOPs: 0.2887. Time: 0.1386 us. Best GFLOPs: 0.2887
2024-04-30 19:36:41 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_softmax] Trial #8: GFLOPs: 0.0048. Time: 8.3367 us. Best GFLOPs: 0.2887
2024-04-30 19:36:41 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_softmax] Trial #9: GFLOPs: 0.0032. Time: 12.4118 us. Best GFLOPs: 0.2887
2024-04-30 19:36:41 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_softmax] Trial #10: GFLOPs: 0.0017. Time: 23.9482 us. Best GFLOPs: 0.2887
2024-04-30 19:36:41 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_softmax] Trial #11: GFLOPs: 0.0041. Time: 9.6912 us. Best GFLOPs: 0.2887
2024-04-30 19:36:41 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_softmax] Trial #12: GFLOPs: 0.0018. Time: 22.2775 us. Best GFLOPs: 0.2887
2024-04-30 19:36:41 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_softmax] Trial #13: GFLOPs: 0.0043. Time: 9.3324 us. Best GFLOPs: 0.2887
2024-04-30 19:36:41 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_softmax] Trial #14: GFLOPs: 0.0021. Time: 18.7261 us. Best GFLOPs: 0.2887
2024-04-30 19:36:41 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_softmax] Trial #15: GFLOPs: 0.0021. Time: 18.6949 us. Best GFLOPs: 0.2887
2024-04-30 19:36:41 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_softmax] Trial #16: GFLOPs: 0.0044. Time: 9.1132 us. Best GFLOPs: 0.2887
2024-04-30 19:36:41 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_softmax] Trial #17: GFLOPs: 0.0039. Time: 10.2569 us. Best GFLOPs: 0.2887
2024-04-30 19:36:41 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_softmax] Trial #18: GFLOPs: 0.0033. Time: 12.1178 us. Best GFLOPs: 0.2887
2024-04-30 19:36:41 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_softmax] Trial #19: GFLOPs: 0.1534. Time: 0.2608 us. Best GFLOPs: 0.2887
2024-04-30 19:36:41 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_softmax] Trial #20: GFLOPs: 0.0040. Time: 10.0620 us. Best GFLOPs: 0.2887
2024-04-30 19:36:41 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_softmax] Trial #21: GFLOPs: 0.0035. Time: 11.3836 us. Best GFLOPs: 0.2887
2024-04-30 19:36:41 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_softmax] Trial #22: GFLOPs: 0.0043. Time: 9.3381 us. Best GFLOPs: 0.2887
2024-04-30 19:36:41 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_softmax] Trial #23: GFLOPs: 0.0039. Time: 10.1702 us. Best GFLOPs: 0.2887
2024-04-30 19:36:41 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_softmax] Trial #24: GFLOPs: 0.1957. Time: 0.2044 us. Best GFLOPs: 0.2887
2024-04-30 19:36:41 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_softmax] Trial #25: GFLOPs: 0.0012. Time: 34.1450 us. Best GFLOPs: 0.2887
2024-04-30 19:36:41 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_softmax] Trial #26: GFLOPs: 0.0042. Time: 9.4514 us. Best GFLOPs: 0.2887
2024-04-30 19:36:41 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_softmax] Trial #27: GFLOPs: 0.4255. Time: 0.0940 us. Best GFLOPs: 0.4255
2024-04-30 19:36:41 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_softmax] Trial #28: GFLOPs: 0.0038. Time: 10.4660 us. Best GFLOPs: 0.4255
2024-04-30 19:36:41 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_softmax] Trial #29: GFLOPs: 0.0038. Time: 10.5191 us. Best GFLOPs: 0.4255
2024-04-30 19:36:41 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_softmax] Trial #30: GFLOPs: 0.0034. Time: 11.6540 us. Best GFLOPs: 0.4255
2024-04-30 19:36:41 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_softmax] Trial #31: GFLOPs: 0.0038. Time: 10.6068 us. Best GFLOPs: 0.4255
2024-04-30 19:36:41 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_softmax] Trial #32: GFLOPs: 0.0021. Time: 19.3227 us. Best GFLOPs: 0.4255
2024-04-30 19:36:41 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_softmax] Trial #33: GFLOPs: 0.0037. Time: 10.7995 us. Best GFLOPs: 0.4255
2024-04-30 19:36:41 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_softmax] Trial #34: GFLOPs: 0.0015. Time: 27.0757 us. Best GFLOPs: 0.4255
2024-04-30 19:36:41 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_softmax] Trial #35: GFLOPs: 0.0042. Time: 9.5645 us. Best GFLOPs: 0.4255
2024-04-30 19:36:41 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_softmax] Trial #36: GFLOPs: 0.0043. Time: 9.3641 us. Best GFLOPs: 0.4255
2024-04-30 19:36:41 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_softmax] Trial #37: GFLOPs: 0.0039. Time: 10.2923 us. Best GFLOPs: 0.4255
2024-04-30 19:36:41 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_softmax] Trial #38: GFLOPs: 0.0037. Time: 10.8272 us. Best GFLOPs: 0.4255
2024-04-30 19:36:41 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_softmax] Trial #39: GFLOPs: 0.0034. Time: 11.8732 us. Best GFLOPs: 0.4255
2024-04-30 19:36:41 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_softmax] Trial #40: GFLOPs: 0.0039. Time: 10.3490 us. Best GFLOPs: 0.4255
2024-04-30 19:36:41 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_softmax] Trial #41: GFLOPs: 0.0040. Time: 10.1216 us. Best GFLOPs: 0.4255
2024-04-30 19:36:41 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_softmax] Trial #42: GFLOPs: 0.0037. Time: 10.8950 us. Best GFLOPs: 0.4255
2024-04-30 19:36:41 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_softmax] Trial #43: GFLOPs: 0.0022. Time: 18.5155 us. Best GFLOPs: 0.4255
2024-04-30 19:36:41 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_softmax] Trial #44: GFLOPs: 0.0037. Time: 10.8014 us. Best GFLOPs: 0.4255
2024-04-30 19:36:41 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_softmax] Trial #45: GFLOPs: 0.0019. Time: 21.4998 us. Best GFLOPs: 0.4255
2024-04-30 19:36:41 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_softmax] Trial #46: GFLOPs: 0.0036. Time: 11.0202 us. Best GFLOPs: 0.4255
2024-04-30 19:36:41 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_softmax] Trial #47: GFLOPs: 0.0035. Time: 11.4285 us. Best GFLOPs: 0.4255
2024-04-30 19:36:41 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_softmax] Trial #48: GFLOPs: 0.0039. Time: 10.1444 us. Best GFLOPs: 0.4255
2024-04-30 19:36:41 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_softmax] Trial #49: GFLOPs: 0.0044. Time: 8.9911 us. Best GFLOPs: 0.4255
2024-04-30 19:36:41 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_softmax] Trial #50: GFLOPs: 0.0023. Time: 17.7433 us. Best GFLOPs: 0.4255
2024-04-30 19:36:41 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_softmax] Trial #51: GFLOPs: 0.0043. Time: 9.3276 us. Best GFLOPs: 0.4255
2024-04-30 19:36:41 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_softmax] Trial #52: GFLOPs: 0.2357. Time: 0.1697 us. Best GFLOPs: 0.4255
2024-04-30 19:36:41 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_softmax] Trial #53: GFLOPs: 0.0038. Time: 10.4610 us. Best GFLOPs: 0.4255
2024-04-30 19:36:41 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_softmax] Trial #54: GFLOPs: 0.4990. Time: 0.0802 us. Best GFLOPs: 0.4990
2024-04-30 19:36:41 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_softmax] Trial #55: GFLOPs: 0.0042. Time: 9.5697 us. Best GFLOPs: 0.4990
2024-04-30 19:36:41 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_softmax] Trial #56: GFLOPs: 0.0040. Time: 9.9644 us. Best GFLOPs: 0.4990
2024-04-30 19:36:41 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_softmax] Trial #57: GFLOPs: 0.0039. Time: 10.2563 us. Best GFLOPs: 0.4990
2024-04-30 19:36:41 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_softmax] Trial #58: GFLOPs: 0.0043. Time: 9.3152 us. Best GFLOPs: 0.4990
2024-04-30 19:36:41 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_softmax] Trial #59: GFLOPs: 0.0044. Time: 9.1151 us. Best GFLOPs: 0.4990
2024-04-30 19:36:41 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_softmax] Trial #60: GFLOPs: 0.0039. Time: 10.1599 us. Best GFLOPs: 0.4990
2024-04-30 19:36:41 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_softmax] Trial #61: GFLOPs: 0.4527. Time: 0.0884 us. Best GFLOPs: 0.4990
2024-04-30 19:36:41 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_softmax] Trial #62: GFLOPs: 0.0036. Time: 11.1177 us. Best GFLOPs: 0.4990
2024-04-30 19:36:41 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_softmax] Trial #63: GFLOPs: 0.3271. Time: 0.1223 us. Best GFLOPs: 0.4990
2024-04-30 19:36:41 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_softmax] Trial #64: GFLOPs: 0.0035. Time: 11.5670 us. Best GFLOPs: 0.4990
