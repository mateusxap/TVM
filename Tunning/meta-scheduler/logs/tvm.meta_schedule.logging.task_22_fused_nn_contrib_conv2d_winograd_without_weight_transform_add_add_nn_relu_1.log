2024-04-30 19:06:07 [INFO] [task_scheduler.cc:160] Initializing Task #22: "fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1"
2024-04-30 19:06:07 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(2), T.int64(2), T.int64(256)), "float32"), p1: T.Buffer((T.int64(6), T.int64(6), T.int64(256), T.int64(256)), "float32"), p2: T.Buffer((T.int64(1), T.int64(1), T.int64(1), T.int64(256)), "float32"), p3: T.Buffer((T.int64(1), T.int64(1), T.int64(1), T.int64(256)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(2), T.int64(2), T.int64(256)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(6), T.int64(6), T.int64(256)))
        input_tile = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(1), T.int64(256)))
        B = T.alloc_buffer((T.int64(6), T.int64(6)))
        data_pack = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(1), T.int64(256)))
        bgemm = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(1), T.int64(256)))
        A = T.alloc_buffer((T.int64(6), T.int64(4)))
        inverse = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(1), T.int64(256)))
        conv2d_winograd = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(2), T.int64(256)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(2), T.int64(256)))
        T_add_1 = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(2), T.int64(256)))
        for i0, i1, i2, i3 in T.grid(T.int64(1), T.int64(6), T.int64(6), T.int64(256)):
            with T.block("data_pad"):
                v_i0, v_i1, v_i2, v_i3 = T.axis.remap("SSSS", [i0, i1, i2, i3])
                T.reads(p0[v_i0, v_i1 - T.int64(1), v_i2 - T.int64(1), v_i3])
                T.writes(data_pad[v_i0, v_i1, v_i2, v_i3])
                T.block_attr({"schedule_rule": "None"})
                data_pad[v_i0, v_i1, v_i2, v_i3] = T.if_then_else(T.int64(1) <= v_i1 and v_i1 < T.int64(3) and T.int64(1) <= v_i2 and v_i2 < T.int64(3), p0[v_i0, v_i1 - T.int64(1), v_i2 - T.int64(1), v_i3], T.float32(0))
        for eps, nu, p, ci in T.grid(T.int64(6), T.int64(6), T.int64(1), T.int64(256)):
            with T.block("input_tile"):
                v_eps, v_nu, v_p, v_ci = T.axis.remap("SSSS", [eps, nu, p, ci])
                T.reads(data_pad[v_p, v_eps, v_nu, v_ci])
                T.writes(input_tile[v_eps, v_nu, v_p, v_ci])
                T.block_attr({"schedule_rule": "None"})
                input_tile[v_eps, v_nu, v_p, v_ci] = data_pad[v_p, v_eps, v_nu, v_ci]
        for i, j in T.grid(T.int64(6), T.int64(6)):
            with T.block("B"):
                v_i, v_j = T.axis.remap("SS", [i, j])
                T.reads()
                T.writes(B[v_i, v_j])
                T.block_attr({"schedule_rule": "None"})
                B[v_i, v_j] = T.Select(v_i % T.int64(6) == T.int64(5) and v_j % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(5) and v_j % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(5) and v_j % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(5) and v_j % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(5) and v_j % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(5) and v_j % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(4) and v_j % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_i % T.int64(6) == T.int64(4) and v_j % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(4) and v_j % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(4) and v_j % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(4) and v_j % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(4) and v_j % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(3) and v_j % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_i % T.int64(6) == T.int64(3) and v_j % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_i % T.int64(6) == T.int64(3) and v_j % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_i % T.int64(6) == T.int64(3) and v_j % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_i % T.int64(6) == T.int64(3) and v_j % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_i % T.int64(6) == T.int64(3) and v_j % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_i % T.int64(6) == T.int64(2) and v_j % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_i % T.int64(6) == T.int64(2) and v_j % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_i % T.int64(6) == T.int64(2) and v_j % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_i % T.int64(6) == T.int64(2) and v_j % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_i % T.int64(6) == T.int64(2) and v_j % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_i % T.int64(6) == T.int64(2) and v_j % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_i % T.int64(6) == T.int64(1) and v_j % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(1) and v_j % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_i % T.int64(6) == T.int64(1) and v_j % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_i % T.int64(6) == T.int64(1) and v_j % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_i % T.int64(6) == T.int64(1) and v_j % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(1) and v_j % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_i % T.int64(6) == T.int64(0) and v_j % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(0) and v_j % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(0) and v_j % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(0) and v_j % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(0) and v_j % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(0) and v_j % T.int64(6) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))))))))))))))
        for eps, nu, p, ci, r_a, r_b in T.grid(T.int64(6), T.int64(6), T.int64(1), T.int64(256), T.int64(6), T.int64(6)):
            with T.block("data_pack"):
                v_eps, v_nu, v_p, v_ci, v_r_a, v_r_b = T.axis.remap("SSSSRR", [eps, nu, p, ci, r_a, r_b])
                T.reads(input_tile[v_r_a, v_r_b, v_p, v_ci], B[T.min(v_r_a, v_r_b):T.min(v_r_a, v_r_b) + (T.max(v_r_a, v_r_b) + T.int64(1) - T.min(v_r_a, v_r_b)), T.min(v_eps, v_nu):T.min(v_eps, v_nu) + (T.max(v_eps, v_nu) + T.int64(1) - T.min(v_eps, v_nu))])
                T.writes(data_pack[v_eps, v_nu, v_p, v_ci])
                T.block_attr({"schedule_rule": "conv2d_nhwc_winograd_data_pack"})
                with T.init():
                    data_pack[v_eps, v_nu, v_p, v_ci] = T.float32(0)
                data_pack[v_eps, v_nu, v_p, v_ci] = data_pack[v_eps, v_nu, v_p, v_ci] + input_tile[v_r_a, v_r_b, v_p, v_ci] * B[v_r_a, v_eps] * B[v_r_b, v_nu]
        for eps, nu, p, co, ci in T.grid(T.int64(6), T.int64(6), T.int64(1), T.int64(256), T.int64(256)):
            with T.block("bgemm"):
                v_eps, v_nu, v_p, v_co, v_ci = T.axis.remap("SSSSR", [eps, nu, p, co, ci])
                T.reads(data_pack[v_eps, v_nu, v_p, v_ci], p1[v_eps, v_nu, v_co, v_ci])
                T.writes(bgemm[v_eps, v_nu, v_p, v_co])
                T.block_attr({"meta_schedule.write_cache_level": [2]})
                with T.init():
                    bgemm[v_eps, v_nu, v_p, v_co] = T.float32(0)
                bgemm[v_eps, v_nu, v_p, v_co] = bgemm[v_eps, v_nu, v_p, v_co] + data_pack[v_eps, v_nu, v_p, v_ci] * p1[v_eps, v_nu, v_co, v_ci]
        for i, j in T.grid(T.int64(6), T.int64(4)):
            with T.block("A"):
                v_i, v_j = T.axis.remap("SS", [i, j])
                T.reads()
                T.writes(A[v_i, v_j])
                T.block_attr({"schedule_rule": "None"})
                A[v_i, v_j] = T.Select(v_i % T.int64(6) == T.int64(5) and v_j % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(5) and v_j % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(5) and v_j % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(5) and v_j % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(4) and v_j % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_i % T.int64(6) == T.int64(4) and v_j % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_i % T.int64(6) == T.int64(4) and v_j % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_i % T.int64(6) == T.int64(4) and v_j % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(3) and v_j % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_i % T.int64(6) == T.int64(3) and v_j % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_i % T.int64(6) == T.int64(3) and v_j % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_i % T.int64(6) == T.int64(3) and v_j % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(2) and v_j % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(2) and v_j % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(2) and v_j % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(2) and v_j % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(1) and v_j % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_i % T.int64(6) == T.int64(1) and v_j % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(1) and v_j % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_i % T.int64(6) == T.int64(1) and v_j % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(0) and v_j % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(0) and v_j % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(0) and v_j % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(0) and v_j % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))
        for vh, vw, p, co, r_a, r_b in T.grid(T.int64(4), T.int64(4), T.int64(1), T.int64(256), T.int64(6), T.int64(6)):
            with T.block("inverse"):
                v_vh, v_vw, v_p, v_co, v_r_a, v_r_b = T.axis.remap("SSSSRR", [vh, vw, p, co, r_a, r_b])
                T.reads(bgemm[v_r_a, v_r_b, v_p, v_co], A[T.min(v_r_a, v_r_b):T.min(v_r_a, v_r_b) + (T.max(v_r_a, v_r_b) + T.int64(1) - T.min(v_r_a, v_r_b)), T.min(v_vh, v_vw):T.min(v_vh, v_vw) + (T.max(v_vh, v_vw) + T.int64(1) - T.min(v_vh, v_vw))])
                T.writes(inverse[v_vh, v_vw, v_p, v_co])
                T.block_attr({"schedule_rule": "conv2d_nhwc_winograd_inverse"})
                with T.init():
                    inverse[v_vh, v_vw, v_p, v_co] = T.float32(0)
                inverse[v_vh, v_vw, v_p, v_co] = inverse[v_vh, v_vw, v_p, v_co] + bgemm[v_r_a, v_r_b, v_p, v_co] * A[v_r_a, v_vh] * A[v_r_b, v_vw]
        for n, h, w, co in T.grid(T.int64(1), T.int64(2), T.int64(2), T.int64(256)):
            with T.block("conv2d_winograd"):
                v_n, v_h, v_w, v_co = T.axis.remap("SSSS", [n, h, w, co])
                T.reads(inverse[v_h % T.int64(4), v_w % T.int64(4), v_h // T.int64(4) + v_w // T.int64(4) + v_n, v_co])
                T.writes(conv2d_winograd[v_n, v_h, v_w, v_co])
                conv2d_winograd[v_n, v_h, v_w, v_co] = inverse[v_h % T.int64(4), v_w % T.int64(4), v_h // T.int64(4) + v_w // T.int64(4) + v_n, v_co]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(2), T.int64(256)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(conv2d_winograd[v_ax0, v_ax1, v_ax2, v_ax3], p2[v_ax0, T.int64(0), T.int64(0), v_ax3])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3] = conv2d_winograd[v_ax0, v_ax1, v_ax2, v_ax3] + p2[v_ax0, T.int64(0), T.int64(0), v_ax3]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(2), T.int64(256)):
            with T.block("T_add_1"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3], p3[v_ax0, T.int64(0), T.int64(0), v_ax3])
                T.writes(T_add_1[v_ax0, v_ax1, v_ax2, v_ax3])
                T_add_1[v_ax0, v_ax1, v_ax2, v_ax3] = T_add[v_ax0, v_ax1, v_ax2, v_ax3] + p3[v_ax0, T.int64(0), T.int64(0), v_ax3]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(2), T.int64(256)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(T_add_1[v_ax0, v_ax1, v_ax2, v_ax3])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(T_add_1[v_ax0, v_ax1, v_ax2, v_ax3], T.float32(0))
2024-04-30 19:06:07 [INFO] [task_scheduler.cc:164] Total 1 design space(s) generated
2024-04-30 19:06:08 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(2), T.int64(2), T.int64(256)), "float32"), p1: T.Buffer((T.int64(6), T.int64(6), T.int64(256), T.int64(256)), "float32"), p2: T.Buffer((T.int64(1), T.int64(1), T.int64(1), T.int64(256)), "float32"), p3: T.Buffer((T.int64(1), T.int64(1), T.int64(1), T.int64(256)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(2), T.int64(2), T.int64(256)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 96, "meta_schedule.unroll_explicit": 0, "meta_schedule.vectorize": 64})
            data_pad = T.alloc_buffer((T.int64(1), T.int64(6), T.int64(6), T.int64(256)))
            input_tile = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(1), T.int64(256)))
            data_pack = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(1), T.int64(256)))
            bgemm = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(1), T.int64(256)))
            inverse = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(1), T.int64(256)))
            bgemm_global = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(1), T.int64(256)))
            for p_0, ci_0, p_1, ci_1 in T.grid(T.int64(1), T.int64(256), T.int64(1), T.int64(1)):
                for eps in T.unroll(T.int64(6)):
                    for nu in T.unroll(T.int64(6)):
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(6), T.int64(6), T.int64(1)):
                            with T.block("data_pad"):
                                v_i0, v_i1, v_i2 = T.axis.remap("SSS", [ax0, ax1, ax2])
                                v_i3 = T.axis.spatial(T.int64(256), ci_0 + ax3)
                                T.reads(p0[v_i0, v_i1 - T.int64(1), v_i2 - T.int64(1), v_i3])
                                T.writes(data_pad[v_i0, v_i1, v_i2, v_i3])
                                T.block_attr({"schedule_rule": "None"})
                                data_pad[v_i0, v_i1, v_i2, v_i3] = T.if_then_else(T.int64(1) <= v_i1 and v_i1 < T.int64(3) and T.int64(1) <= v_i2 and v_i2 < T.int64(3), p0[v_i0, v_i1 - T.int64(1), v_i2 - T.int64(1), v_i3], T.float32(0))
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(6), T.int64(6), T.int64(1), T.int64(1)):
                            with T.block("input_tile"):
                                v_eps, v_nu, v_p = T.axis.remap("SSS", [ax0, ax1, ax2])
                                v_ci = T.axis.spatial(T.int64(256), ci_0 + ax3)
                                T.reads(data_pad[v_p, v_eps, v_nu, v_ci])
                                T.writes(input_tile[v_eps, v_nu, v_p, v_ci])
                                T.block_attr({"schedule_rule": "None"})
                                input_tile[v_eps, v_nu, v_p, v_ci] = data_pad[v_p, v_eps, v_nu, v_ci]
                        for r_a in T.unroll(T.int64(6)):
                            for r_b in T.unroll(T.int64(6)):
                                with T.block("data_pack"):
                                    v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                    v_p = T.axis.spatial(T.int64(1), p_0 + p_1)
                                    v_ci = T.axis.spatial(T.int64(256), ci_0 + ci_1)
                                    v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                    T.reads(input_tile[v_r_a, v_r_b, v_p, v_ci])
                                    T.writes(data_pack[v_eps, v_nu, v_p, v_ci])
                                    T.block_attr({"schedule_rule": "conv2d_nhwc_winograd_data_pack"})
                                    with T.init():
                                        data_pack[v_eps, v_nu, v_p, v_ci] = T.float32(0)
                                    data_pack[v_eps, v_nu, v_p, v_ci] = data_pack[v_eps, v_nu, v_p, v_ci] + input_tile[v_r_a, v_r_b, v_p, v_ci] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))))))))))))))
            for eps_0, nu_0, p_0, co_0, eps_1, nu_1, p_1, co_1 in T.grid(T.int64(1), T.int64(6), T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                for ci_0, eps_2, nu_2, p_2, co_2, ci_1, eps_3, nu_3, p_3, co_3 in T.grid(T.int64(64), T.int64(3), T.int64(1), T.int64(1), T.int64(8), T.int64(4), T.int64(2), T.int64(1), T.int64(1), T.int64(1)):
                    with T.block("bgemm"):
                        v_eps = T.axis.spatial(T.int64(6), eps_0 * T.int64(6) + eps_1 * T.int64(6) + eps_2 * T.int64(2) + eps_3)
                        v_nu = T.axis.spatial(T.int64(6), nu_0 + nu_1 + nu_2 + nu_3)
                        v_p = T.axis.spatial(T.int64(1), p_0 + p_1 + p_2 + p_3)
                        v_co = T.axis.spatial(T.int64(256), co_0 * T.int64(8) + co_1 * T.int64(8) + co_2 + co_3)
                        v_ci = T.axis.reduce(T.int64(256), ci_0 * T.int64(4) + ci_1)
                        T.reads(data_pack[v_eps, v_nu, v_p, v_ci], p1[v_eps, v_nu, v_co, v_ci])
                        T.writes(bgemm_global[v_eps, v_nu, v_p, v_co])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS", "meta_schedule.write_cache_level": [2]})
                        with T.init():
                            bgemm_global[v_eps, v_nu, v_p, v_co] = T.float32(0)
                        bgemm_global[v_eps, v_nu, v_p, v_co] = bgemm_global[v_eps, v_nu, v_p, v_co] + data_pack[v_eps, v_nu, v_p, v_ci] * p1[v_eps, v_nu, v_co, v_ci]
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(6), T.int64(1), T.int64(1), T.int64(8)):
                    with T.block("bgemm_global"):
                        v0 = T.axis.spatial(T.int64(6), ax0)
                        v1 = T.axis.spatial(T.int64(6), nu_0 + ax1)
                        v2 = T.axis.spatial(T.int64(1), ax2)
                        v3 = T.axis.spatial(T.int64(256), co_0 * T.int64(8) + ax3)
                        T.reads(bgemm_global[v0, v1, v2, v3])
                        T.writes(bgemm[v0, v1, v2, v3])
                        bgemm[v0, v1, v2, v3] = bgemm_global[v0, v1, v2, v3]
            for p_0, co_0, p_1, co_1 in T.grid(T.int64(1), T.int64(256), T.int64(1), T.int64(1)):
                for vh in T.unroll(T.int64(4)):
                    for vw in T.unroll(T.int64(4)):
                        for r_a in T.unroll(T.int64(6)):
                            for r_b in T.unroll(T.int64(6)):
                                with T.block("inverse"):
                                    v_vh, v_vw = T.axis.remap("SS", [vh, vw])
                                    v_p = T.axis.spatial(T.int64(1), p_0 + p_1)
                                    v_co = T.axis.spatial(T.int64(256), co_0 + co_1)
                                    v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                    T.reads(bgemm[v_r_a, v_r_b, v_p, v_co])
                                    T.writes(inverse[v_vh, v_vw, v_p, v_co])
                                    T.block_attr({"schedule_rule": "conv2d_nhwc_winograd_inverse"})
                                    with T.init():
                                        inverse[v_vh, v_vw, v_p, v_co] = T.float32(0)
                                    inverse[v_vh, v_vw, v_p, v_co] = inverse[v_vh, v_vw, v_p, v_co] + bgemm[v_r_a, v_r_b, v_p, v_co] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(2), T.int64(256)):
                with T.block("T_relu"):
                    v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                    T.reads(inverse[v_ax1 % T.int64(4), v_ax2 % T.int64(4), v_ax1 // T.int64(4) + v_ax2 // T.int64(4) + v_ax0, v_ax3], p2[v_ax0, T.int64(0), T.int64(0), v_ax3], p3[v_ax0, T.int64(0), T.int64(0), v_ax3])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(inverse[v_ax1 % T.int64(4), v_ax2 % T.int64(4), v_ax1 // T.int64(4) + v_ax2 // T.int64(4) + v_ax0, v_ax3] + p2[v_ax0, T.int64(0), T.int64(0), v_ax3] + p3[v_ax0, T.int64(0), T.int64(0), v_ax3], T.float32(0))
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="T_add", func_name="main")
b5 = sch.get_block(name="T_add_1", func_name="main")
b6 = sch.get_block(name="root", func_name="main")
b7, b8 = sch.get_producers(block=b2)
sch.compute_inline(block=b8)
l9, l10, l11, l12, l13, l14 = sch.get_loops(block=b2)
v15, v16 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 1])
l17, l18 = sch.split(loop=l11, factors=[v15, v16], preserve_unit_iters=True, disable_predication=False)
v19, v20 = sch.sample_perfect_tile(loop=l12, n=2, max_innermost_factor=64, decision=[256, 1])
l21, l22 = sch.split(loop=l12, factors=[v19, v20], preserve_unit_iters=True, disable_predication=False)
sch.unroll(loop=l9)
sch.unroll(loop=l10)
sch.unroll(loop=l13)
sch.unroll(loop=l14)
sch.reorder(l17, l21, l18, l22, l9, l10, l13, l14)
b23, b24 = sch.get_producers(block=b0)
sch.compute_inline(block=b24)
b25, = sch.get_producers(block=b23)
l26, l27, l28, l29, l30, l31 = sch.get_loops(block=b0)
v32, v33 = sch.sample_perfect_tile(loop=l28, n=2, max_innermost_factor=64, decision=[1, 1])
l34, l35 = sch.split(loop=l28, factors=[v32, v33], preserve_unit_iters=True, disable_predication=False)
v36, v37 = sch.sample_perfect_tile(loop=l29, n=2, max_innermost_factor=64, decision=[256, 1])
l38, l39 = sch.split(loop=l29, factors=[v36, v37], preserve_unit_iters=True, disable_predication=False)
sch.unroll(loop=l26)
sch.unroll(loop=l27)
sch.unroll(loop=l30)
sch.unroll(loop=l31)
sch.reorder(l34, l38, l35, l39, l26, l27, l30, l31)
l40 = sch.sample_compute_location(block=b23, decision=5)
sch.compute_at(block=b23, loop=l40, preserve_unit_loops=True, index=-1)
l41 = sch.sample_compute_location(block=b25, decision=5)
sch.compute_at(block=b25, loop=l41, preserve_unit_loops=True, index=-1)
sch.compute_inline(block=b5)
sch.compute_inline(block=b4)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l42, l43, l44, l45, l46 = sch.get_loops(block=b1)
v47, v48, v49, v50 = sch.sample_perfect_tile(loop=l42, n=4, max_innermost_factor=64, decision=[1, 1, 3, 2])
l51, l52, l53, l54 = sch.split(loop=l42, factors=[v47, v48, v49, v50], preserve_unit_iters=True, disable_predication=False)
v55, v56, v57, v58 = sch.sample_perfect_tile(loop=l43, n=4, max_innermost_factor=64, decision=[6, 1, 1, 1])
l59, l60, l61, l62 = sch.split(loop=l43, factors=[v55, v56, v57, v58], preserve_unit_iters=True, disable_predication=False)
v63, v64, v65, v66 = sch.sample_perfect_tile(loop=l44, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l67, l68, l69, l70 = sch.split(loop=l44, factors=[v63, v64, v65, v66], preserve_unit_iters=True, disable_predication=False)
v71, v72, v73, v74 = sch.sample_perfect_tile(loop=l45, n=4, max_innermost_factor=64, decision=[32, 1, 8, 1])
l75, l76, l77, l78 = sch.split(loop=l45, factors=[v71, v72, v73, v74], preserve_unit_iters=True, disable_predication=False)
v79, v80 = sch.sample_perfect_tile(loop=l46, n=2, max_innermost_factor=64, decision=[64, 4])
l81, l82 = sch.split(loop=l46, factors=[v79, v80], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l51, l59, l67, l75, l52, l60, l68, l76, l81, l53, l61, l69, l77, l82, l54, l62, l70, l78)
b83 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="global")
sch.reverse_compute_at(block=b83, loop=l76, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.parallel", ann_val=96)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.vectorize", ann_val=64)
v84 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.unroll_explicit", ann_val=v84)
l85 = sch.sample_compute_location(block=b3, decision=-2)
sch.compute_at(block=b3, loop=l85, preserve_unit_loops=True, index=-1)
2024-04-30 19:13:54 [INFO] [task_scheduler.cc:160] Initializing Task #22: "fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1"
2024-04-30 19:13:54 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(2), T.int64(2), T.int64(256)), "float32"), p1: T.Buffer((T.int64(6), T.int64(6), T.int64(256), T.int64(256)), "float32"), p2: T.Buffer((T.int64(1), T.int64(1), T.int64(1), T.int64(256)), "float32"), p3: T.Buffer((T.int64(1), T.int64(1), T.int64(1), T.int64(256)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(2), T.int64(2), T.int64(256)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(6), T.int64(6), T.int64(256)))
        input_tile = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(1), T.int64(256)))
        B = T.alloc_buffer((T.int64(6), T.int64(6)))
        data_pack = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(1), T.int64(256)))
        bgemm = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(1), T.int64(256)))
        A = T.alloc_buffer((T.int64(6), T.int64(4)))
        inverse = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(1), T.int64(256)))
        conv2d_winograd = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(2), T.int64(256)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(2), T.int64(256)))
        T_add_1 = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(2), T.int64(256)))
        for i0, i1, i2, i3 in T.grid(T.int64(1), T.int64(6), T.int64(6), T.int64(256)):
            with T.block("data_pad"):
                v_i0, v_i1, v_i2, v_i3 = T.axis.remap("SSSS", [i0, i1, i2, i3])
                T.reads(p0[v_i0, v_i1 - T.int64(1), v_i2 - T.int64(1), v_i3])
                T.writes(data_pad[v_i0, v_i1, v_i2, v_i3])
                T.block_attr({"schedule_rule": "None"})
                data_pad[v_i0, v_i1, v_i2, v_i3] = T.if_then_else(T.int64(1) <= v_i1 and v_i1 < T.int64(3) and T.int64(1) <= v_i2 and v_i2 < T.int64(3), p0[v_i0, v_i1 - T.int64(1), v_i2 - T.int64(1), v_i3], T.float32(0))
        for eps, nu, p, ci in T.grid(T.int64(6), T.int64(6), T.int64(1), T.int64(256)):
            with T.block("input_tile"):
                v_eps, v_nu, v_p, v_ci = T.axis.remap("SSSS", [eps, nu, p, ci])
                T.reads(data_pad[v_p, v_eps, v_nu, v_ci])
                T.writes(input_tile[v_eps, v_nu, v_p, v_ci])
                T.block_attr({"schedule_rule": "None"})
                input_tile[v_eps, v_nu, v_p, v_ci] = data_pad[v_p, v_eps, v_nu, v_ci]
        for i, j in T.grid(T.int64(6), T.int64(6)):
            with T.block("B"):
                v_i, v_j = T.axis.remap("SS", [i, j])
                T.reads()
                T.writes(B[v_i, v_j])
                T.block_attr({"schedule_rule": "None"})
                B[v_i, v_j] = T.Select(v_i % T.int64(6) == T.int64(5) and v_j % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(5) and v_j % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(5) and v_j % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(5) and v_j % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(5) and v_j % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(5) and v_j % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(4) and v_j % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_i % T.int64(6) == T.int64(4) and v_j % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(4) and v_j % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(4) and v_j % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(4) and v_j % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(4) and v_j % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(3) and v_j % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_i % T.int64(6) == T.int64(3) and v_j % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_i % T.int64(6) == T.int64(3) and v_j % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_i % T.int64(6) == T.int64(3) and v_j % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_i % T.int64(6) == T.int64(3) and v_j % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_i % T.int64(6) == T.int64(3) and v_j % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_i % T.int64(6) == T.int64(2) and v_j % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_i % T.int64(6) == T.int64(2) and v_j % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_i % T.int64(6) == T.int64(2) and v_j % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_i % T.int64(6) == T.int64(2) and v_j % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_i % T.int64(6) == T.int64(2) and v_j % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_i % T.int64(6) == T.int64(2) and v_j % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_i % T.int64(6) == T.int64(1) and v_j % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(1) and v_j % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_i % T.int64(6) == T.int64(1) and v_j % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_i % T.int64(6) == T.int64(1) and v_j % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_i % T.int64(6) == T.int64(1) and v_j % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(1) and v_j % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_i % T.int64(6) == T.int64(0) and v_j % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(0) and v_j % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(0) and v_j % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(0) and v_j % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(0) and v_j % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(0) and v_j % T.int64(6) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))))))))))))))
        for eps, nu, p, ci, r_a, r_b in T.grid(T.int64(6), T.int64(6), T.int64(1), T.int64(256), T.int64(6), T.int64(6)):
            with T.block("data_pack"):
                v_eps, v_nu, v_p, v_ci, v_r_a, v_r_b = T.axis.remap("SSSSRR", [eps, nu, p, ci, r_a, r_b])
                T.reads(input_tile[v_r_a, v_r_b, v_p, v_ci], B[T.min(v_r_a, v_r_b):T.min(v_r_a, v_r_b) + (T.max(v_r_a, v_r_b) + T.int64(1) - T.min(v_r_a, v_r_b)), T.min(v_eps, v_nu):T.min(v_eps, v_nu) + (T.max(v_eps, v_nu) + T.int64(1) - T.min(v_eps, v_nu))])
                T.writes(data_pack[v_eps, v_nu, v_p, v_ci])
                T.block_attr({"schedule_rule": "conv2d_nhwc_winograd_data_pack"})
                with T.init():
                    data_pack[v_eps, v_nu, v_p, v_ci] = T.float32(0)
                data_pack[v_eps, v_nu, v_p, v_ci] = data_pack[v_eps, v_nu, v_p, v_ci] + input_tile[v_r_a, v_r_b, v_p, v_ci] * B[v_r_a, v_eps] * B[v_r_b, v_nu]
        for eps, nu, p, co, ci in T.grid(T.int64(6), T.int64(6), T.int64(1), T.int64(256), T.int64(256)):
            with T.block("bgemm"):
                v_eps, v_nu, v_p, v_co, v_ci = T.axis.remap("SSSSR", [eps, nu, p, co, ci])
                T.reads(data_pack[v_eps, v_nu, v_p, v_ci], p1[v_eps, v_nu, v_co, v_ci])
                T.writes(bgemm[v_eps, v_nu, v_p, v_co])
                T.block_attr({"meta_schedule.write_cache_level": [2]})
                with T.init():
                    bgemm[v_eps, v_nu, v_p, v_co] = T.float32(0)
                bgemm[v_eps, v_nu, v_p, v_co] = bgemm[v_eps, v_nu, v_p, v_co] + data_pack[v_eps, v_nu, v_p, v_ci] * p1[v_eps, v_nu, v_co, v_ci]
        for i, j in T.grid(T.int64(6), T.int64(4)):
            with T.block("A"):
                v_i, v_j = T.axis.remap("SS", [i, j])
                T.reads()
                T.writes(A[v_i, v_j])
                T.block_attr({"schedule_rule": "None"})
                A[v_i, v_j] = T.Select(v_i % T.int64(6) == T.int64(5) and v_j % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(5) and v_j % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(5) and v_j % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(5) and v_j % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(4) and v_j % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_i % T.int64(6) == T.int64(4) and v_j % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_i % T.int64(6) == T.int64(4) and v_j % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_i % T.int64(6) == T.int64(4) and v_j % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(3) and v_j % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_i % T.int64(6) == T.int64(3) and v_j % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_i % T.int64(6) == T.int64(3) and v_j % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_i % T.int64(6) == T.int64(3) and v_j % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(2) and v_j % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(2) and v_j % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(2) and v_j % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(2) and v_j % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(1) and v_j % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_i % T.int64(6) == T.int64(1) and v_j % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(1) and v_j % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_i % T.int64(6) == T.int64(1) and v_j % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(0) and v_j % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(0) and v_j % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(0) and v_j % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(0) and v_j % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))
        for vh, vw, p, co, r_a, r_b in T.grid(T.int64(4), T.int64(4), T.int64(1), T.int64(256), T.int64(6), T.int64(6)):
            with T.block("inverse"):
                v_vh, v_vw, v_p, v_co, v_r_a, v_r_b = T.axis.remap("SSSSRR", [vh, vw, p, co, r_a, r_b])
                T.reads(bgemm[v_r_a, v_r_b, v_p, v_co], A[T.min(v_r_a, v_r_b):T.min(v_r_a, v_r_b) + (T.max(v_r_a, v_r_b) + T.int64(1) - T.min(v_r_a, v_r_b)), T.min(v_vh, v_vw):T.min(v_vh, v_vw) + (T.max(v_vh, v_vw) + T.int64(1) - T.min(v_vh, v_vw))])
                T.writes(inverse[v_vh, v_vw, v_p, v_co])
                T.block_attr({"schedule_rule": "conv2d_nhwc_winograd_inverse"})
                with T.init():
                    inverse[v_vh, v_vw, v_p, v_co] = T.float32(0)
                inverse[v_vh, v_vw, v_p, v_co] = inverse[v_vh, v_vw, v_p, v_co] + bgemm[v_r_a, v_r_b, v_p, v_co] * A[v_r_a, v_vh] * A[v_r_b, v_vw]
        for n, h, w, co in T.grid(T.int64(1), T.int64(2), T.int64(2), T.int64(256)):
            with T.block("conv2d_winograd"):
                v_n, v_h, v_w, v_co = T.axis.remap("SSSS", [n, h, w, co])
                T.reads(inverse[v_h % T.int64(4), v_w % T.int64(4), v_h // T.int64(4) + v_w // T.int64(4) + v_n, v_co])
                T.writes(conv2d_winograd[v_n, v_h, v_w, v_co])
                conv2d_winograd[v_n, v_h, v_w, v_co] = inverse[v_h % T.int64(4), v_w % T.int64(4), v_h // T.int64(4) + v_w // T.int64(4) + v_n, v_co]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(2), T.int64(256)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(conv2d_winograd[v_ax0, v_ax1, v_ax2, v_ax3], p2[v_ax0, T.int64(0), T.int64(0), v_ax3])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3] = conv2d_winograd[v_ax0, v_ax1, v_ax2, v_ax3] + p2[v_ax0, T.int64(0), T.int64(0), v_ax3]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(2), T.int64(256)):
            with T.block("T_add_1"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3], p3[v_ax0, T.int64(0), T.int64(0), v_ax3])
                T.writes(T_add_1[v_ax0, v_ax1, v_ax2, v_ax3])
                T_add_1[v_ax0, v_ax1, v_ax2, v_ax3] = T_add[v_ax0, v_ax1, v_ax2, v_ax3] + p3[v_ax0, T.int64(0), T.int64(0), v_ax3]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(2), T.int64(256)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(T_add_1[v_ax0, v_ax1, v_ax2, v_ax3])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(T_add_1[v_ax0, v_ax1, v_ax2, v_ax3], T.float32(0))
2024-04-30 19:13:54 [INFO] [task_scheduler.cc:164] Total 1 design space(s) generated
2024-04-30 19:13:54 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(2), T.int64(2), T.int64(256)), "float32"), p1: T.Buffer((T.int64(6), T.int64(6), T.int64(256), T.int64(256)), "float32"), p2: T.Buffer((T.int64(1), T.int64(1), T.int64(1), T.int64(256)), "float32"), p3: T.Buffer((T.int64(1), T.int64(1), T.int64(1), T.int64(256)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(2), T.int64(2), T.int64(256)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 96, "meta_schedule.unroll_explicit": 512, "meta_schedule.vectorize": 64})
            data_pad = T.alloc_buffer((T.int64(1), T.int64(6), T.int64(6), T.int64(256)))
            input_tile = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(1), T.int64(256)))
            data_pack = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(1), T.int64(256)))
            bgemm = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(1), T.int64(256)))
            inverse = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(1), T.int64(256)))
            conv2d_winograd = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(2), T.int64(256)))
            bgemm_global = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(1), T.int64(256)))
            for p_0, ci_0 in T.grid(T.int64(1), T.int64(32)):
                for ax0, ax1 in T.grid(T.int64(6), T.int64(6)):
                    for ax0_1, ax1_1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(8)):
                        with T.block("data_pad"):
                            v_i0 = T.axis.spatial(T.int64(1), ax0_1)
                            v_i1 = T.axis.spatial(T.int64(6), ax0 + ax1_1)
                            v_i2 = T.axis.spatial(T.int64(6), ax1 + ax2)
                            v_i3 = T.axis.spatial(T.int64(256), ci_0 * T.int64(8) + ax3)
                            T.reads(p0[v_i0, v_i1 - T.int64(1), v_i2 - T.int64(1), v_i3])
                            T.writes(data_pad[v_i0, v_i1, v_i2, v_i3])
                            T.block_attr({"schedule_rule": "None"})
                            data_pad[v_i0, v_i1, v_i2, v_i3] = T.if_then_else(T.int64(1) <= v_i1 and v_i1 < T.int64(3) and T.int64(1) <= v_i2 and v_i2 < T.int64(3), p0[v_i0, v_i1 - T.int64(1), v_i2 - T.int64(1), v_i3], T.float32(0))
                    for ax2, ax3 in T.grid(T.int64(1), T.int64(8)):
                        with T.block("input_tile"):
                            v_eps, v_nu, v_p = T.axis.remap("SSS", [ax0, ax1, ax2])
                            v_ci = T.axis.spatial(T.int64(256), ci_0 * T.int64(8) + ax3)
                            T.reads(data_pad[v_p, v_eps, v_nu, v_ci])
                            T.writes(input_tile[v_eps, v_nu, v_p, v_ci])
                            T.block_attr({"schedule_rule": "None"})
                            input_tile[v_eps, v_nu, v_p, v_ci] = data_pad[v_p, v_eps, v_nu, v_ci]
                for p_1, ci_1 in T.grid(T.int64(1), T.int64(8)):
                    for eps in T.unroll(T.int64(6)):
                        for nu in T.unroll(T.int64(6)):
                            for r_a in T.unroll(T.int64(6)):
                                for r_b in T.unroll(T.int64(6)):
                                    with T.block("data_pack"):
                                        v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                        v_p = T.axis.spatial(T.int64(1), p_0 + p_1)
                                        v_ci = T.axis.spatial(T.int64(256), ci_0 * T.int64(8) + ci_1)
                                        v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                        T.reads(input_tile[v_r_a, v_r_b, v_p, v_ci])
                                        T.writes(data_pack[v_eps, v_nu, v_p, v_ci])
                                        T.block_attr({"schedule_rule": "conv2d_nhwc_winograd_data_pack"})
                                        with T.init():
                                            data_pack[v_eps, v_nu, v_p, v_ci] = T.float32(0)
                                        data_pack[v_eps, v_nu, v_p, v_ci] = data_pack[v_eps, v_nu, v_p, v_ci] + input_tile[v_r_a, v_r_b, v_p, v_ci] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))))))))))))))
            for eps_0, nu_0, p_0, co_0, eps_1, nu_1, p_1, co_1 in T.grid(T.int64(3), T.int64(3), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(8)):
                for ci_0, eps_2, nu_2, p_2, co_2, ci_1, eps_3, nu_3, p_3, co_3 in T.grid(T.int64(16), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(16), T.int64(1), T.int64(2), T.int64(1), T.int64(8)):
                    with T.block("bgemm"):
                        v_eps = T.axis.spatial(T.int64(6), eps_0 * T.int64(2) + eps_1 * T.int64(2) + eps_2 + eps_3)
                        v_nu = T.axis.spatial(T.int64(6), nu_0 * T.int64(2) + nu_1 * T.int64(2) + nu_2 * T.int64(2) + nu_3)
                        v_p = T.axis.spatial(T.int64(1), p_0 + p_1 + p_2 + p_3)
                        v_co = T.axis.spatial(T.int64(256), co_0 * T.int64(64) + co_1 * T.int64(8) + co_2 * T.int64(8) + co_3)
                        v_ci = T.axis.reduce(T.int64(256), ci_0 * T.int64(16) + ci_1)
                        T.reads(data_pack[v_eps, v_nu, v_p, v_ci], p1[v_eps, v_nu, v_co, v_ci])
                        T.writes(bgemm_global[v_eps, v_nu, v_p, v_co])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS", "meta_schedule.write_cache_level": [2]})
                        with T.init():
                            bgemm_global[v_eps, v_nu, v_p, v_co] = T.float32(0)
                        bgemm_global[v_eps, v_nu, v_p, v_co] = bgemm_global[v_eps, v_nu, v_p, v_co] + data_pack[v_eps, v_nu, v_p, v_ci] * p1[v_eps, v_nu, v_co, v_ci]
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(2), T.int64(2), T.int64(1), T.int64(8)):
                    with T.block("bgemm_global"):
                        v0 = T.axis.spatial(T.int64(6), eps_0 * T.int64(2) + ax0)
                        v1 = T.axis.spatial(T.int64(6), nu_0 * T.int64(2) + ax1)
                        v2 = T.axis.spatial(T.int64(1), ax2)
                        v3 = T.axis.spatial(T.int64(256), co_0 * T.int64(64) + co_1 * T.int64(8) + ax3)
                        T.reads(bgemm_global[v0, v1, v2, v3])
                        T.writes(bgemm[v0, v1, v2, v3])
                        bgemm[v0, v1, v2, v3] = bgemm_global[v0, v1, v2, v3]
            for p_0, co_0, p_1, co_1 in T.grid(T.int64(1), T.int64(32), T.int64(1), T.int64(8)):
                for vh in T.unroll(T.int64(4)):
                    for vw in T.unroll(T.int64(4)):
                        for r_a in T.unroll(T.int64(6)):
                            for r_b in T.unroll(T.int64(6)):
                                with T.block("inverse"):
                                    v_vh, v_vw = T.axis.remap("SS", [vh, vw])
                                    v_p = T.axis.spatial(T.int64(1), p_0 + p_1)
                                    v_co = T.axis.spatial(T.int64(256), co_0 * T.int64(8) + co_1)
                                    v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                    T.reads(bgemm[v_r_a, v_r_b, v_p, v_co])
                                    T.writes(inverse[v_vh, v_vw, v_p, v_co])
                                    T.block_attr({"schedule_rule": "conv2d_nhwc_winograd_inverse"})
                                    with T.init():
                                        inverse[v_vh, v_vw, v_p, v_co] = T.float32(0)
                                    inverse[v_vh, v_vw, v_p, v_co] = inverse[v_vh, v_vw, v_p, v_co] + bgemm[v_r_a, v_r_b, v_p, v_co] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(2), T.int64(256)):
                for ax0_1, ax1_1, ax2_1, ax3_1 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                    with T.block("conv2d_winograd"):
                        v_n = T.axis.spatial(T.int64(1), ax0_1)
                        v_h = T.axis.spatial(T.int64(2), ax1 + ax1_1)
                        v_w = T.axis.spatial(T.int64(2), ax2 + ax2_1)
                        v_co = T.axis.spatial(T.int64(256), ax3 + ax3_1)
                        T.reads(inverse[v_h % T.int64(4), v_w % T.int64(4), v_h // T.int64(4) + v_w // T.int64(4) + v_n, v_co])
                        T.writes(conv2d_winograd[v_n, v_h, v_w, v_co])
                        conv2d_winograd[v_n, v_h, v_w, v_co] = inverse[v_h % T.int64(4), v_w % T.int64(4), v_h // T.int64(4) + v_w // T.int64(4) + v_n, v_co]
                with T.block("T_relu"):
                    v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                    T.reads(conv2d_winograd[v_ax0, v_ax1, v_ax2, v_ax3], p2[v_ax0, T.int64(0), T.int64(0), v_ax3], p3[v_ax0, T.int64(0), T.int64(0), v_ax3])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(conv2d_winograd[v_ax0, v_ax1, v_ax2, v_ax3] + p2[v_ax0, T.int64(0), T.int64(0), v_ax3] + p3[v_ax0, T.int64(0), T.int64(0), v_ax3], T.float32(0))
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="T_add", func_name="main")
b5 = sch.get_block(name="T_add_1", func_name="main")
b6 = sch.get_block(name="root", func_name="main")
b7, b8 = sch.get_producers(block=b2)
sch.compute_inline(block=b8)
l9, l10, l11, l12, l13, l14 = sch.get_loops(block=b2)
v15, v16 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 1])
l17, l18 = sch.split(loop=l11, factors=[v15, v16], preserve_unit_iters=True, disable_predication=False)
v19, v20 = sch.sample_perfect_tile(loop=l12, n=2, max_innermost_factor=64, decision=[32, 8])
l21, l22 = sch.split(loop=l12, factors=[v19, v20], preserve_unit_iters=True, disable_predication=False)
sch.unroll(loop=l9)
sch.unroll(loop=l10)
sch.unroll(loop=l13)
sch.unroll(loop=l14)
sch.reorder(l17, l21, l18, l22, l9, l10, l13, l14)
b23, b24 = sch.get_producers(block=b0)
sch.compute_inline(block=b24)
b25, = sch.get_producers(block=b23)
l26, l27, l28, l29, l30, l31 = sch.get_loops(block=b0)
v32, v33 = sch.sample_perfect_tile(loop=l28, n=2, max_innermost_factor=64, decision=[1, 1])
l34, l35 = sch.split(loop=l28, factors=[v32, v33], preserve_unit_iters=True, disable_predication=False)
v36, v37 = sch.sample_perfect_tile(loop=l29, n=2, max_innermost_factor=64, decision=[32, 8])
l38, l39 = sch.split(loop=l29, factors=[v36, v37], preserve_unit_iters=True, disable_predication=False)
sch.unroll(loop=l26)
sch.unroll(loop=l27)
sch.unroll(loop=l30)
sch.unroll(loop=l31)
sch.reorder(l34, l38, l35, l39, l26, l27, l30, l31)
l40 = sch.sample_compute_location(block=b23, decision=1)
sch.compute_at(block=b23, loop=l40, preserve_unit_loops=True, index=-1)
l41 = sch.sample_compute_location(block=b25, decision=3)
sch.compute_at(block=b25, loop=l41, preserve_unit_loops=True, index=-1)
sch.compute_inline(block=b5)
sch.compute_inline(block=b4)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l42, l43, l44, l45, l46 = sch.get_loops(block=b1)
v47, v48, v49, v50 = sch.sample_perfect_tile(loop=l42, n=4, max_innermost_factor=64, decision=[3, 1, 2, 1])
l51, l52, l53, l54 = sch.split(loop=l42, factors=[v47, v48, v49, v50], preserve_unit_iters=True, disable_predication=False)
v55, v56, v57, v58 = sch.sample_perfect_tile(loop=l43, n=4, max_innermost_factor=64, decision=[3, 1, 1, 2])
l59, l60, l61, l62 = sch.split(loop=l43, factors=[v55, v56, v57, v58], preserve_unit_iters=True, disable_predication=False)
v63, v64, v65, v66 = sch.sample_perfect_tile(loop=l44, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l67, l68, l69, l70 = sch.split(loop=l44, factors=[v63, v64, v65, v66], preserve_unit_iters=True, disable_predication=False)
v71, v72, v73, v74 = sch.sample_perfect_tile(loop=l45, n=4, max_innermost_factor=64, decision=[4, 8, 1, 8])
l75, l76, l77, l78 = sch.split(loop=l45, factors=[v71, v72, v73, v74], preserve_unit_iters=True, disable_predication=False)
v79, v80 = sch.sample_perfect_tile(loop=l46, n=2, max_innermost_factor=64, decision=[16, 16])
l81, l82 = sch.split(loop=l46, factors=[v79, v80], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l51, l59, l67, l75, l52, l60, l68, l76, l81, l53, l61, l69, l77, l82, l54, l62, l70, l78)
b83 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="global")
sch.reverse_compute_at(block=b83, loop=l76, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.parallel", ann_val=96)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.vectorize", ann_val=64)
v84 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.unroll_explicit", ann_val=v84)
l85 = sch.sample_compute_location(block=b3, decision=3)
sch.compute_at(block=b3, loop=l85, preserve_unit_loops=True, index=-1)
2024-04-30 19:28:24 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-30 19:28:24 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-30 19:28:37 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xe85e7a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x69d7868)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x14d13aa8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x241d5ed8)]: 0 failure(s)
2024-04-30 19:28:37 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-30 19:28:49 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xe85e7a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x69d7868)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x14d13aa8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x241d5ed8)]: 0 failure(s)
2024-04-30 19:29:01 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xe85e7a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x69d7868)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x14d13aa8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x241d5ed8)]: 0 failure(s)
2024-04-30 19:29:13 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xe85e7a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x69d7868)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x14d13aa8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x241d5ed8)]: 0 failure(s)
2024-04-30 19:29:19 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xe85e7a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x69d7868)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x14d13aa8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x241d5ed8)]: 0 failure(s)
2024-04-30 19:29:20 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9996  0.9991  0.9990  0.9988  0.9986  0.9981  0.9980  0.9960  0.9952  0.9947  0.9945  0.9944  0.9943  0.9939  0.9932  0.9928
[17 : 32]:	0.9923  0.9922  0.9914  0.9898  0.9893  0.9892  0.9892  0.9885  0.9882  0.9880  0.9872  0.9871  0.9867  0.9864  0.9864  0.9856
[33 : 48]:	0.9847  0.9847  0.9831  0.9829  0.9820  0.9820  0.9814  0.9812  0.9804  0.9800  0.9799  0.9797  0.9797  0.9794  0.9784  0.9784
[49 : 64]:	0.9780  0.9776  0.9759  0.9753  0.9746  0.9730  0.9729  0.9722  0.9712  0.9708  0.9701  0.9698  0.9695  0.9694  0.9691  0.9687
2024-04-30 19:29:20 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-30 19:29:20 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-30 19:36:37 [INFO] [task_scheduler.cc:121] [Task #22: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1] Trial #1: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(2), T.int64(2), T.int64(256)), "float32"), p1: T.Buffer((T.int64(6), T.int64(6), T.int64(256), T.int64(256)), "float32"), p2: T.Buffer((T.int64(1), T.int64(1), T.int64(1), T.int64(256)), "float32"), p3: T.Buffer((T.int64(1), T.int64(1), T.int64(1), T.int64(256)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(2), T.int64(2), T.int64(256)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pack = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(1), T.int64(256)))
        bgemm = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(1), T.int64(256)))
        inverse = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(1), T.int64(256)))
        bgemm_global = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(1), T.int64(256)))
        p1_global = T.alloc_buffer((T.int64(2), T.int64(4), T.int64(6), T.int64(3), T.int64(8), T.int64(8), T.int64(2), T.int64(32), T.int64(4)))
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(6), T.int64(6), T.int64(256), T.int64(256)):
            with T.block("p1_global"):
                v0, v1, v2, v3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(p1[v0, v1, v2, v3])
                T.writes(p1_global[v1 // T.int64(3), v2 // T.int64(64), v0, v1 % T.int64(3), v2 % T.int64(64) // T.int64(8), v3 // T.int64(32), v2 % T.int64(8) // T.int64(4), v3 % T.int64(32), v2 % T.int64(4)])
                T.block_attr({"meta_schedule.layout_rewrite_preproc": T.bool(True)})
                p1_global[v1 // T.int64(3), v2 // T.int64(64), v0, v1 % T.int64(3), v2 % T.int64(64) // T.int64(8), v3 // T.int64(32), v2 % T.int64(8) // T.int64(4), v3 % T.int64(32), v2 % T.int64(4)] = p1[v0, v1, v2, v3]
        for p_0_ci_0_p_1_ci_1_fused in T.parallel(T.int64(256), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for eps in T.unroll(T.int64(6)):
                for nu in T.unroll(T.int64(6)):
                    with T.block("data_pack_init"):
                        v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                        v_p = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ci = T.axis.spatial(T.int64(256), p_0_ci_0_p_1_ci_1_fused)
                        T.reads()
                        T.writes(data_pack[v_eps, v_nu, v_p, v_ci])
                        T.block_attr({"schedule_rule": "conv2d_nhwc_winograd_data_pack"})
                        data_pack[v_eps, v_nu, v_p, v_ci] = T.float32(0)
                    for r_a in T.unroll(T.int64(6)):
                        for r_b in T.unroll(T.int64(6)):
                            with T.block("data_pack_update"):
                                v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                v_p = T.axis.spatial(T.int64(1), T.int64(0))
                                v_ci, v_r_a, v_r_b = T.axis.remap("SRR", [p_0_ci_0_p_1_ci_1_fused, r_a, r_b])
                                T.reads(data_pack[v_eps, v_nu, v_p, v_ci], p0[v_p, v_r_a - T.int64(1), v_r_b - T.int64(1), v_ci])
                                T.writes(data_pack[v_eps, v_nu, v_p, v_ci])
                                T.block_attr({"schedule_rule": "conv2d_nhwc_winograd_data_pack"})
                                data_pack[v_eps, v_nu, v_p, v_ci] = data_pack[v_eps, v_nu, v_p, v_ci] + T.if_then_else(T.int64(1) <= v_r_a and v_r_a < T.int64(3) and T.int64(1) <= v_r_b and v_r_b < T.int64(3), p0[v_p, v_r_a - T.int64(1), v_r_b - T.int64(1), v_ci], T.float32(0)) * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))))))))))))))
        for eps_0_nu_0_p_0_co_0_eps_1_nu_1_fused in T.parallel(T.int64(144), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for p_1, co_1 in T.grid(T.int64(1), T.int64(8)):
                for eps_2_init, nu_2_init, p_2_init, co_2_init, eps_3_init, nu_3_init, p_3_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1)):
                    for co_3_fused_init in T.vectorized(T.int64(4)):
                        with T.block("bgemm_init"):
                            v_eps = T.axis.spatial(T.int64(6), eps_0_nu_0_p_0_co_0_eps_1_nu_1_fused % T.int64(18) // T.int64(3) + eps_2_init + eps_3_init)
                            v_nu = T.axis.spatial(T.int64(6), eps_0_nu_0_p_0_co_0_eps_1_nu_1_fused // T.int64(72) * T.int64(3) + eps_0_nu_0_p_0_co_0_eps_1_nu_1_fused % T.int64(3) + nu_2_init + nu_3_init)
                            v_p = T.axis.spatial(T.int64(1), p_1 + p_2_init + p_3_init)
                            v_co = T.axis.spatial(T.int64(256), eps_0_nu_0_p_0_co_0_eps_1_nu_1_fused % T.int64(72) // T.int64(18) * T.int64(64) + co_1 * T.int64(8) + co_2_init * T.int64(4) + co_3_fused_init)
                            T.reads()
                            T.writes(bgemm_global[v_eps, v_nu, v_p, v_co])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS", "meta_schedule.write_cache_level": [2]})
                            bgemm_global[v_eps, v_nu, v_p, v_co] = T.float32(0)
                for ci_0, eps_2, nu_2, p_2, co_2, ci_1, eps_3, nu_3, p_3 in T.grid(T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(32), T.int64(1), T.int64(1), T.int64(1)):
                    for co_3_fused in T.vectorized(T.int64(4)):
                        with T.block("bgemm_update"):
                            v_eps = T.axis.spatial(T.int64(6), eps_0_nu_0_p_0_co_0_eps_1_nu_1_fused % T.int64(18) // T.int64(3) + eps_2 + eps_3)
                            v_nu = T.axis.spatial(T.int64(6), eps_0_nu_0_p_0_co_0_eps_1_nu_1_fused // T.int64(72) * T.int64(3) + eps_0_nu_0_p_0_co_0_eps_1_nu_1_fused % T.int64(3) + nu_2 + nu_3)
                            v_p = T.axis.spatial(T.int64(1), p_1 + p_2 + p_3)
                            v_co = T.axis.spatial(T.int64(256), eps_0_nu_0_p_0_co_0_eps_1_nu_1_fused % T.int64(72) // T.int64(18) * T.int64(64) + co_1 * T.int64(8) + co_2 * T.int64(4) + co_3_fused)
                            v_ci = T.axis.reduce(T.int64(256), ci_0 * T.int64(32) + ci_1)
                            T.reads(bgemm_global[v_eps, v_nu, v_p, v_co], data_pack[v_eps, v_nu, v_p, v_ci], p1_global[v_nu // T.int64(3), v_co // T.int64(64), v_eps, v_nu % T.int64(3), v_co % T.int64(64) // T.int64(8), v_ci // T.int64(32), v_co % T.int64(8) // T.int64(4), v_ci % T.int64(32), v_co % T.int64(4)])
                            T.writes(bgemm_global[v_eps, v_nu, v_p, v_co])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS", "meta_schedule.write_cache_level": [2]})
                            bgemm_global[v_eps, v_nu, v_p, v_co] = bgemm_global[v_eps, v_nu, v_p, v_co] + data_pack[v_eps, v_nu, v_p, v_ci] * p1_global[v_nu // T.int64(3), v_co // T.int64(64), v_eps, v_nu % T.int64(3), v_co % T.int64(64) // T.int64(8), v_ci // T.int64(32), v_co % T.int64(8) // T.int64(4), v_ci % T.int64(32), v_co % T.int64(4)]
                for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(1), T.int64(1)):
                    for ax3_fused in T.vectorized(T.int64(8)):
                        with T.block("bgemm_global"):
                            v0 = T.axis.spatial(T.int64(6), eps_0_nu_0_p_0_co_0_eps_1_nu_1_fused % T.int64(18) // T.int64(3) + ax0)
                            v1 = T.axis.spatial(T.int64(6), eps_0_nu_0_p_0_co_0_eps_1_nu_1_fused // T.int64(72) * T.int64(3) + eps_0_nu_0_p_0_co_0_eps_1_nu_1_fused % T.int64(3) + ax1)
                            v2 = T.axis.spatial(T.int64(1), ax2)
                            v3 = T.axis.spatial(T.int64(256), eps_0_nu_0_p_0_co_0_eps_1_nu_1_fused % T.int64(72) // T.int64(18) * T.int64(64) + co_1 * T.int64(8) + ax3_fused)
                            T.reads(bgemm_global[v0, v1, v2, v3])
                            T.writes(bgemm[v0, v1, v2, v3])
                            bgemm[v0, v1, v2, v3] = bgemm_global[v0, v1, v2, v3]
        for p_0_co_0_fused in T.parallel(T.int64(128), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for p_1, co_1 in T.grid(T.int64(1), T.int64(2)):
                for vh in T.unroll(T.int64(4)):
                    for vw in T.unroll(T.int64(4)):
                        with T.block("inverse_init"):
                            v_vh, v_vw, v_p = T.axis.remap("SSS", [vh, vw, p_1])
                            v_co = T.axis.spatial(T.int64(256), p_0_co_0_fused * T.int64(2) + co_1)
                            T.reads()
                            T.writes(inverse[v_vh, v_vw, v_p, v_co])
                            T.block_attr({"schedule_rule": "conv2d_nhwc_winograd_inverse"})
                            inverse[v_vh, v_vw, v_p, v_co] = T.float32(0)
                        for r_a in T.unroll(T.int64(6)):
                            for r_b in T.unroll(T.int64(6)):
                                with T.block("inverse_update"):
                                    v_vh, v_vw, v_p = T.axis.remap("SSS", [vh, vw, p_1])
                                    v_co = T.axis.spatial(T.int64(256), p_0_co_0_fused * T.int64(2) + co_1)
                                    v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                    T.reads(inverse[v_vh, v_vw, v_p, v_co], bgemm[v_r_a, v_r_b, v_p, v_co])
                                    T.writes(inverse[v_vh, v_vw, v_p, v_co])
                                    T.block_attr({"schedule_rule": "conv2d_nhwc_winograd_inverse"})
                                    inverse[v_vh, v_vw, v_p, v_co] = inverse[v_vh, v_vw, v_p, v_co] + bgemm[v_r_a, v_r_b, v_p, v_co] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))
        for ax0_ax1_ax2_ax3_fused_0 in T.parallel(T.int64(16)):
            for ax0_ax1_ax2_ax3_fused_1 in T.vectorized(T.int64(64)):
                with T.block("T_relu"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(2), (ax0_ax1_ax2_ax3_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused_1) // T.int64(512))
                    v_ax2 = T.axis.spatial(T.int64(2), (ax0_ax1_ax2_ax3_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused_1) % T.int64(512) // T.int64(256))
                    v_ax3 = T.axis.spatial(T.int64(256), (ax0_ax1_ax2_ax3_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused_1) % T.int64(256))
                    T.reads(inverse[v_ax1 % T.int64(4), v_ax2 % T.int64(4), v_ax1 // T.int64(4) + v_ax2 // T.int64(4) + v_ax0, v_ax3], p2[v_ax0, T.int64(0), T.int64(0), v_ax3], p3[v_ax0, T.int64(0), T.int64(0), v_ax3])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(inverse[v_ax1 % T.int64(4), v_ax2 % T.int64(4), v_ax1 // T.int64(4) + v_ax2 // T.int64(4) + v_ax0, v_ax3] + p2[v_ax0, T.int64(0), T.int64(0), v_ax3] + p3[v_ax0, T.int64(0), T.int64(0), v_ax3], T.float32(0))
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="T_add", func_name="main")
b5 = sch.get_block(name="T_add_1", func_name="main")
b6 = sch.get_block(name="root", func_name="main")
b7, b8 = sch.get_producers(block=b2)
sch.compute_inline(block=b8)
l9, l10, l11, l12, l13, l14 = sch.get_loops(block=b2)
v15, v16 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 1])
l17, l18 = sch.split(loop=l11, factors=[v15, v16], preserve_unit_iters=True, disable_predication=False)
v19, v20 = sch.sample_perfect_tile(loop=l12, n=2, max_innermost_factor=64, decision=[128, 2])
l21, l22 = sch.split(loop=l12, factors=[v19, v20], preserve_unit_iters=True, disable_predication=False)
sch.unroll(loop=l9)
sch.unroll(loop=l10)
sch.unroll(loop=l13)
sch.unroll(loop=l14)
sch.reorder(l17, l21, l18, l22, l9, l10, l13, l14)
b23, b24 = sch.get_producers(block=b0)
sch.compute_inline(block=b24)
b25, = sch.get_producers(block=b23)
l26, l27, l28, l29, l30, l31 = sch.get_loops(block=b0)
v32, v33 = sch.sample_perfect_tile(loop=l28, n=2, max_innermost_factor=64, decision=[1, 1])
l34, l35 = sch.split(loop=l28, factors=[v32, v33], preserve_unit_iters=True, disable_predication=False)
v36, v37 = sch.sample_perfect_tile(loop=l29, n=2, max_innermost_factor=64, decision=[16, 16])
l38, l39 = sch.split(loop=l29, factors=[v36, v37], preserve_unit_iters=True, disable_predication=False)
sch.unroll(loop=l26)
sch.unroll(loop=l27)
sch.unroll(loop=l30)
sch.unroll(loop=l31)
sch.reorder(l34, l38, l35, l39, l26, l27, l30, l31)
l40 = sch.sample_compute_location(block=b23, decision=-2)
sch.compute_at(block=b23, loop=l40, preserve_unit_loops=True, index=-1)
l41 = sch.sample_compute_location(block=b25, decision=-2)
sch.compute_at(block=b25, loop=l41, preserve_unit_loops=True, index=-1)
sch.compute_inline(block=b5)
sch.compute_inline(block=b4)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l42, l43, l44, l45, l46 = sch.get_loops(block=b1)
v47, v48, v49, v50 = sch.sample_perfect_tile(loop=l42, n=4, max_innermost_factor=64, decision=[1, 6, 1, 1])
l51, l52, l53, l54 = sch.split(loop=l42, factors=[v47, v48, v49, v50], preserve_unit_iters=True, disable_predication=False)
v55, v56, v57, v58 = sch.sample_perfect_tile(loop=l43, n=4, max_innermost_factor=64, decision=[2, 3, 1, 1])
l59, l60, l61, l62 = sch.split(loop=l43, factors=[v55, v56, v57, v58], preserve_unit_iters=True, disable_predication=False)
v63, v64, v65, v66 = sch.sample_perfect_tile(loop=l44, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l67, l68, l69, l70 = sch.split(loop=l44, factors=[v63, v64, v65, v66], preserve_unit_iters=True, disable_predication=False)
v71, v72, v73, v74 = sch.sample_perfect_tile(loop=l45, n=4, max_innermost_factor=64, decision=[4, 8, 2, 4])
l75, l76, l77, l78 = sch.split(loop=l45, factors=[v71, v72, v73, v74], preserve_unit_iters=True, disable_predication=False)
v79, v80 = sch.sample_perfect_tile(loop=l46, n=2, max_innermost_factor=64, decision=[8, 32])
l81, l82 = sch.split(loop=l46, factors=[v79, v80], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l51, l59, l67, l75, l52, l60, l68, l76, l81, l53, l61, l69, l77, l82, l54, l62, l70, l78)
b83 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="global")
sch.reverse_compute_at(block=b83, loop=l76, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.parallel", ann_val=96)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.vectorize", ann_val=64)
v84 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.unroll_explicit", ann_val=v84)
l85 = sch.sample_compute_location(block=b3, decision=-2)
sch.compute_at(block=b3, loop=l85, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b86 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b86, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b86, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b86, ann_key="meta_schedule.unroll_explicit")
b87, b88, b89, b90, b91 = sch.get_child_blocks(b86)
l92, l93, l94, l95, l96, l97, l98, l99 = sch.get_loops(block=b87)
l100 = sch.fuse(l92, l93, l94, l95, preserve_unit_iters=True)
sch.parallel(loop=l100)
sch.annotate(block_or_loop=l100, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l100, ann_key="pragma_unroll_explicit", ann_val=1)
l101, l102, l103, l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118 = sch.get_loops(block=b88)
l119 = sch.fuse(l101, l102, l103, l104, l105, l106, preserve_unit_iters=True)
sch.parallel(loop=l119)
l120 = sch.fuse(l118, preserve_unit_iters=True)
sch.vectorize(loop=l120)
sch.annotate(block_or_loop=l119, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l119, ann_key="pragma_unroll_explicit", ann_val=1)
l121, l122, l123, l124, l125, l126, l127 = sch.get_loops(block=b89)
l128 = sch.fuse(l127, preserve_unit_iters=True)
sch.vectorize(loop=l128)
l129, l130, l131, l132, l133, l134, l135, l136 = sch.get_loops(block=b90)
l137 = sch.fuse(l129, l130, preserve_unit_iters=True)
sch.parallel(loop=l137)
sch.annotate(block_or_loop=l137, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l137, ann_key="pragma_unroll_explicit", ann_val=1)
l138, l139, l140, l141 = sch.get_loops(block=b91)
l142 = sch.fuse(l138, l139, l140, l141, preserve_unit_iters=True)
l143, l144 = sch.split(loop=l142, factors=[None, 64], preserve_unit_iters=True, disable_predication=False)
sch.parallel(loop=l143)
sch.vectorize(loop=l144)
b145 = sch.get_block(name="data_pack", func_name="main")
l146, l147, l148, l149, l150 = sch.get_loops(block=b145)
b151 = sch.decompose_reduction(block=b145, loop=l149)
b152 = sch.get_block(name="bgemm", func_name="main")
l153, l154, l155, l156, l157, l158, l159, l160, l161, l162, l163, l164, l165 = sch.get_loops(block=b152)
b166 = sch.decompose_reduction(block=b152, loop=l156)
b167 = sch.get_block(name="inverse", func_name="main")
l168, l169, l170, l171, l172, l173, l174 = sch.get_loops(block=b167)
b175 = sch.decompose_reduction(block=b167, loop=l173)
b176 = sch.get_block(name="bgemm_update", func_name="main")
b177 = sch.cache_read(block=b176, read_buffer_index=2, storage_scope="global")
sch.annotate(block_or_loop=b177, ann_key="meta_schedule.layout_rewrite_preproc", ann_val=1)
sch.transform_layout(block=b176, buffer=("read", 2), index_map=tvm.tir.IndexMap.from_func(lambda i0, i1, i2, i3: (T.Cast("int64", i1) // T.int64(3), T.Cast("int64", i2) // T.int64(64), T.Cast("int64", i0), T.Cast("int64", i1) % T.int64(3), T.Cast("int64", i2) % T.int64(64) // T.int64(8), T.Cast("int64", i3) // T.int64(32), T.Cast("int64", i2) % T.int64(8) // T.int64(4), T.Cast("int64", i3) % T.int64(32), T.Cast("int64", i2) % T.int64(4),), inverse_index_map=lambda i0, i1, i2, i3, i4, i5, i6, i7, i8: (T.Cast("int64", i2), T.Cast("int64", i0) * T.int64(3) + T.Cast("int64", i3), T.Cast("int64", i1) * T.int64(64) + T.Cast("int64", i4) * T.int64(8) + T.Cast("int64", i6) * T.int64(4) + T.Cast("int64", i8), T.Cast("int64", i5) * T.int64(32) + T.Cast("int64", i7),)), pad_value=None, assume_injective_transform=False)
2024-04-30 19:36:37 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1] Trial #2: GFLOPs: 20.4462. Time: 301.2470 us. Best GFLOPs: 20.4462
2024-04-30 19:36:37 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1] Trial #3: GFLOPs: 18.4224. Time: 334.3403 us. Best GFLOPs: 20.4462
2024-04-30 19:36:37 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1] Trial #4: GFLOPs: 14.3345. Time: 429.6865 us. Best GFLOPs: 20.4462
2024-04-30 19:36:37 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1] Trial #5: GFLOPs: 19.3140. Time: 318.9059 us. Best GFLOPs: 20.4462
2024-04-30 19:36:37 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1] Trial #6: GFLOPs: 18.8691. Time: 326.4250 us. Best GFLOPs: 20.4462
2024-04-30 19:36:37 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1] Trial #7: GFLOPs: 17.8666. Time: 344.7423 us. Best GFLOPs: 20.4462
2024-04-30 19:36:37 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1] Trial #8: GFLOPs: 21.8386. Time: 282.0398 us. Best GFLOPs: 21.8386
2024-04-30 19:36:37 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1] Trial #9: GFLOPs: 20.3112. Time: 303.2501 us. Best GFLOPs: 21.8386
2024-04-30 19:36:37 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1] Trial #10: GFLOPs: 17.2789. Time: 356.4679 us. Best GFLOPs: 21.8386
2024-04-30 19:36:37 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1] Trial #11: GFLOPs: 23.3233. Time: 264.0861 us. Best GFLOPs: 23.3233
2024-04-30 19:36:37 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1] Trial #12: GFLOPs: 17.4033. Time: 353.9186 us. Best GFLOPs: 23.3233
2024-04-30 19:36:37 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1] Trial #13: GFLOPs: 11.1511. Time: 552.3533 us. Best GFLOPs: 23.3233
2024-04-30 19:36:37 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1] Trial #14: GFLOPs: 17.3810. Time: 354.3734 us. Best GFLOPs: 23.3233
2024-04-30 19:36:37 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1] Trial #15: GFLOPs: 20.2493. Time: 304.1758 us. Best GFLOPs: 23.3233
2024-04-30 19:36:37 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1] Trial #16: GFLOPs: 13.8227. Time: 445.5984 us. Best GFLOPs: 23.3233
2024-04-30 19:36:37 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1] Trial #17: GFLOPs: 20.0621. Time: 307.0153 us. Best GFLOPs: 23.3233
2024-04-30 19:36:37 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1] Trial #18: GFLOPs: 15.3016. Time: 402.5313 us. Best GFLOPs: 23.3233
2024-04-30 19:36:37 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1] Trial #19: GFLOPs: 25.6996. Time: 239.6672 us. Best GFLOPs: 25.6996
2024-04-30 19:36:37 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1] Trial #20: GFLOPs: 16.7602. Time: 367.4990 us. Best GFLOPs: 25.6996
2024-04-30 19:36:37 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1] Trial #21: GFLOPs: 19.6873. Time: 312.8596 us. Best GFLOPs: 25.6996
2024-04-30 19:36:37 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1] Trial #22: GFLOPs: 11.4701. Time: 536.9931 us. Best GFLOPs: 25.6996
2024-04-30 19:36:37 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1] Trial #23: GFLOPs: 19.5489. Time: 315.0750 us. Best GFLOPs: 25.6996
2024-04-30 19:36:37 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1] Trial #24: GFLOPs: 16.7594. Time: 367.5177 us. Best GFLOPs: 25.6996
2024-04-30 19:36:37 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1] Trial #25: GFLOPs: 20.2101. Time: 304.7672 us. Best GFLOPs: 25.6996
2024-04-30 19:36:37 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1] Trial #26: GFLOPs: 13.9067. Time: 442.9045 us. Best GFLOPs: 25.6996
2024-04-30 19:36:37 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1] Trial #27: GFLOPs: 19.1735. Time: 321.2432 us. Best GFLOPs: 25.6996
2024-04-30 19:36:37 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1] Trial #28: GFLOPs: 20.5613. Time: 299.5610 us. Best GFLOPs: 25.6996
2024-04-30 19:36:37 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1] Trial #29: GFLOPs: 19.4624. Time: 316.4752 us. Best GFLOPs: 25.6996
2024-04-30 19:36:37 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1] Trial #30: GFLOPs: 15.0584. Time: 409.0316 us. Best GFLOPs: 25.6996
2024-04-30 19:36:37 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1] Trial #31: GFLOPs: 19.4761. Time: 316.2520 us. Best GFLOPs: 25.6996
2024-04-30 19:36:37 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1] Trial #32: GFLOPs: 19.2425. Time: 320.0910 us. Best GFLOPs: 25.6996
2024-04-30 19:36:37 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1] Trial #33: GFLOPs: 13.9773. Time: 440.6680 us. Best GFLOPs: 25.6996
2024-04-30 19:36:37 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1] Trial #34: GFLOPs: 9.5601. Time: 644.2750 us. Best GFLOPs: 25.6996
2024-04-30 19:36:37 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1] Trial #35: GFLOPs: 20.4303. Time: 301.4812 us. Best GFLOPs: 25.6996
2024-04-30 19:36:37 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1] Trial #36: GFLOPs: 12.7990. Time: 481.2375 us. Best GFLOPs: 25.6996
2024-04-30 19:36:37 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1] Trial #37: GFLOPs: 17.1608. Time: 358.9200 us. Best GFLOPs: 25.6996
2024-04-30 19:36:37 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1] Trial #38: GFLOPs: 12.5542. Time: 490.6220 us. Best GFLOPs: 25.6996
2024-04-30 19:36:37 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1] Trial #39: GFLOPs: 16.6735. Time: 369.4110 us. Best GFLOPs: 25.6996
2024-04-30 19:36:37 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1] Trial #40: GFLOPs: 16.6975. Time: 368.8800 us. Best GFLOPs: 25.6996
2024-04-30 19:36:37 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1] Trial #41: GFLOPs: 19.6051. Time: 314.1709 us. Best GFLOPs: 25.6996
2024-04-30 19:36:37 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1] Trial #42: GFLOPs: 18.6357. Time: 330.5142 us. Best GFLOPs: 25.6996
2024-04-30 19:36:37 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1] Trial #43: GFLOPs: 16.7603. Time: 367.4961 us. Best GFLOPs: 25.6996
2024-04-30 19:36:37 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1] Trial #44: GFLOPs: 17.0430. Time: 361.4016 us. Best GFLOPs: 25.6996
2024-04-30 19:36:37 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1] Trial #45: GFLOPs: 15.7059. Time: 392.1697 us. Best GFLOPs: 25.6996
2024-04-30 19:36:37 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1] Trial #46: GFLOPs: 14.3148. Time: 430.2799 us. Best GFLOPs: 25.6996
2024-04-30 19:36:37 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1] Trial #47: GFLOPs: 9.1092. Time: 676.1728 us. Best GFLOPs: 25.6996
2024-04-30 19:36:37 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1] Trial #48: GFLOPs: 17.3940. Time: 354.1081 us. Best GFLOPs: 25.6996
2024-04-30 19:36:37 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1] Trial #49: GFLOPs: 12.3952. Time: 496.9138 us. Best GFLOPs: 25.6996
2024-04-30 19:36:37 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1] Trial #50: GFLOPs: 17.1366. Time: 359.4270 us. Best GFLOPs: 25.6996
2024-04-30 19:36:37 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1] Trial #51: GFLOPs: 18.2905. Time: 336.7524 us. Best GFLOPs: 25.6996
2024-04-30 19:36:37 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1] Trial #52: GFLOPs: 15.9201. Time: 386.8912 us. Best GFLOPs: 25.6996
2024-04-30 19:36:37 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1] Trial #53: GFLOPs: 18.9524. Time: 324.9916 us. Best GFLOPs: 25.6996
2024-04-30 19:36:37 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1] Trial #54: GFLOPs: 20.4407. Time: 301.3278 us. Best GFLOPs: 25.6996
2024-04-30 19:36:37 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1] Trial #55: GFLOPs: 21.4662. Time: 286.9334 us. Best GFLOPs: 25.6996
2024-04-30 19:36:37 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1] Trial #56: GFLOPs: 17.1773. Time: 358.5754 us. Best GFLOPs: 25.6996
2024-04-30 19:36:37 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1] Trial #57: GFLOPs: 24.7725. Time: 248.6372 us. Best GFLOPs: 25.6996
2024-04-30 19:36:37 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1] Trial #58: GFLOPs: 16.4456. Time: 374.5299 us. Best GFLOPs: 25.6996
2024-04-30 19:36:37 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1] Trial #59: GFLOPs: 8.9411. Time: 688.8845 us. Best GFLOPs: 25.6996
2024-04-30 19:36:37 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1] Trial #60: GFLOPs: 9.4606. Time: 651.0511 us. Best GFLOPs: 25.6996
2024-04-30 19:36:37 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1] Trial #61: GFLOPs: 20.4136. Time: 301.7281 us. Best GFLOPs: 25.6996
2024-04-30 19:36:37 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1] Trial #62: GFLOPs: 18.7256. Time: 328.9269 us. Best GFLOPs: 25.6996
2024-04-30 19:36:37 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1] Trial #63: GFLOPs: 14.6661. Time: 419.9721 us. Best GFLOPs: 25.6996
2024-04-30 19:36:37 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1] Trial #64: GFLOPs: 17.2287. Time: 357.5048 us. Best GFLOPs: 25.6996
2024-04-30 19:38:06 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-30 19:38:07 [INFO] [evolutionary_search.cc:715] Picked top 63 candidate(s) from database
2024-04-30 19:38:15 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xe85e7a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x69d7868)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x14d13aa8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x241d5ed8)]: 0 failure(s)
2024-04-30 19:38:15 [INFO] [evolutionary_search.cc:723] Sampled 449 candidate(s)
2024-04-30 19:38:29 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xe85e7a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x69d7868)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x14d13aa8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x241d5ed8)]: 0 failure(s)
2024-04-30 19:38:43 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xe85e7a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x69d7868)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x14d13aa8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x241d5ed8)]: 0 failure(s)
2024-04-30 19:38:59 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xe85e7a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x69d7868)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x14d13aa8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x241d5ed8)]: 0 failure(s)
2024-04-30 19:39:14 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xe85e7a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x69d7868)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x14d13aa8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x241d5ed8)]: 0 failure(s)
2024-04-30 19:39:23 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.0903  1.0629  1.0475  1.0217  1.0184  1.0097  1.0088  1.0086  1.0050  1.0014  0.9986  0.9960  0.9957  0.9957  0.9915  0.9899
[17 : 32]:	0.9899  0.9841  0.9818  0.9814  0.9786  0.9786  0.9785  0.9785  0.9781  0.9767  0.9729  0.9727  0.9716  0.9690  0.9626  0.9615
[33 : 48]:	0.9601  0.9584  0.9564  0.9512  0.9503  0.9481  0.9479  0.9475  0.9466  0.9466  0.9461  0.9450  0.9449  0.9436  0.9432  0.9432
[49 : 64]:	0.9415  0.9407  0.9402  0.9397  0.9396  0.9396  0.9388  0.9376  0.9376  0.9360  0.9353  0.9349  0.9349  0.9346  0.9338  0.9332
2024-04-30 19:39:23 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-30 19:39:23 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-30 19:40:47 [INFO] [task_scheduler.cc:121] [Task #22: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1] Trial #65: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(2), T.int64(2), T.int64(256)), "float32"), p1: T.Buffer((T.int64(6), T.int64(6), T.int64(256), T.int64(256)), "float32"), p2: T.Buffer((T.int64(1), T.int64(1), T.int64(1), T.int64(256)), "float32"), p3: T.Buffer((T.int64(1), T.int64(1), T.int64(1), T.int64(256)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(2), T.int64(2), T.int64(256)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(6), T.int64(6), T.int64(256)))
        input_tile = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(1), T.int64(256)))
        data_pack = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(1), T.int64(256)))
        bgemm = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(1), T.int64(256)))
        inverse = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(1), T.int64(256)))
        conv2d_winograd = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(2), T.int64(256)))
        bgemm_global = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(1), T.int64(256)))
        p1_global = T.alloc_buffer((T.int64(256), T.int64(3), T.int64(3), T.int64(16), T.int64(2), T.int64(2), T.int64(16)))
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(6), T.int64(6), T.int64(256), T.int64(256)):
            with T.block("p1_global"):
                v0, v1, v2, v3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(p1[v0, v1, v2, v3])
                T.writes(p1_global[v3, v0 // T.int64(2), v1 // T.int64(2), v2 // T.int64(16), v0 % T.int64(2), v1 % T.int64(2), v2 % T.int64(16)])
                T.block_attr({"meta_schedule.layout_rewrite_preproc": T.bool(True)})
                p1_global[v3, v0 // T.int64(2), v1 // T.int64(2), v2 // T.int64(16), v0 % T.int64(2), v1 % T.int64(2), v2 % T.int64(16)] = p1[v0, v1, v2, v3]
        for p_0_ci_0_fused_fused_fused in T.parallel(T.int64(64), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1 in T.grid(T.int64(6), T.int64(6)):
                for ax0_1, ax1_1, ax2 in T.grid(T.int64(1), T.int64(1), T.int64(1)):
                    for ax3_fused in T.vectorized(T.int64(4)):
                        with T.block("data_pad"):
                            v_i0 = T.axis.spatial(T.int64(1), ax0_1)
                            v_i1 = T.axis.spatial(T.int64(6), ax0 + ax1_1)
                            v_i2 = T.axis.spatial(T.int64(6), ax1 + ax2)
                            v_i3 = T.axis.spatial(T.int64(256), p_0_ci_0_fused_fused_fused * T.int64(4) + ax3_fused)
                            T.reads(p0[v_i0, v_i1 - T.int64(1), v_i2 - T.int64(1), v_i3])
                            T.writes(data_pad[v_i0, v_i1, v_i2, v_i3])
                            T.block_attr({"schedule_rule": "None"})
                            data_pad[v_i0, v_i1, v_i2, v_i3] = T.if_then_else(T.int64(1) <= v_i1 and v_i1 < T.int64(3) and T.int64(1) <= v_i2 and v_i2 < T.int64(3), p0[v_i0, v_i1 - T.int64(1), v_i2 - T.int64(1), v_i3], T.float32(0))
                for ax2 in range(T.int64(1)):
                    for ax3_fused in T.vectorized(T.int64(4)):
                        with T.block("input_tile"):
                            v_eps, v_nu, v_p = T.axis.remap("SSS", [ax0, ax1, ax2])
                            v_ci = T.axis.spatial(T.int64(256), p_0_ci_0_fused_fused_fused * T.int64(4) + ax3_fused)
                            T.reads(data_pad[v_p, v_eps, v_nu, v_ci])
                            T.writes(input_tile[v_eps, v_nu, v_p, v_ci])
                            T.block_attr({"schedule_rule": "None"})
                            input_tile[v_eps, v_nu, v_p, v_ci] = data_pad[v_p, v_eps, v_nu, v_ci]
            for p_1, ci_1 in T.grid(T.int64(1), T.int64(4)):
                for eps in T.unroll(T.int64(6)):
                    for nu in T.unroll(T.int64(6)):
                        with T.block("data_pack_init"):
                            v_eps, v_nu, v_p = T.axis.remap("SSS", [eps, nu, p_1])
                            v_ci = T.axis.spatial(T.int64(256), p_0_ci_0_fused_fused_fused * T.int64(4) + ci_1)
                            T.reads()
                            T.writes(data_pack[v_eps, v_nu, v_p, v_ci])
                            T.block_attr({"schedule_rule": "conv2d_nhwc_winograd_data_pack"})
                            data_pack[v_eps, v_nu, v_p, v_ci] = T.float32(0)
                        for r_a in T.unroll(T.int64(6)):
                            for r_b in T.unroll(T.int64(6)):
                                with T.block("data_pack_update"):
                                    v_eps, v_nu, v_p = T.axis.remap("SSS", [eps, nu, p_1])
                                    v_ci = T.axis.spatial(T.int64(256), p_0_ci_0_fused_fused_fused * T.int64(4) + ci_1)
                                    v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                    T.reads(data_pack[v_eps, v_nu, v_p, v_ci], input_tile[v_r_a, v_r_b, v_p, v_ci])
                                    T.writes(data_pack[v_eps, v_nu, v_p, v_ci])
                                    T.block_attr({"schedule_rule": "conv2d_nhwc_winograd_data_pack"})
                                    data_pack[v_eps, v_nu, v_p, v_ci] = data_pack[v_eps, v_nu, v_p, v_ci] + input_tile[v_r_a, v_r_b, v_p, v_ci] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))))))))))))))
        for eps_0 in T.serial(T.int64(1), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for nu_0, p_0, co_0, eps_1, nu_1, p_1, co_1 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                for eps_2_init, nu_2_init, p_2_init, co_2_init, eps_3_init, nu_3_init, p_3_init in T.grid(T.int64(3), T.int64(3), T.int64(1), T.int64(16), T.int64(2), T.int64(2), T.int64(1)):
                    for co_3_fused_init in T.vectorized(T.int64(16)):
                        with T.block("bgemm_init"):
                            v_eps = T.axis.spatial(T.int64(6), eps_0 * T.int64(6) + eps_1 * T.int64(6) + eps_2_init * T.int64(2) + eps_3_init)
                            v_nu = T.axis.spatial(T.int64(6), nu_0 * T.int64(6) + nu_1 * T.int64(6) + nu_2_init * T.int64(2) + nu_3_init)
                            v_p = T.axis.spatial(T.int64(1), p_0 + p_1 + p_2_init + p_3_init)
                            v_co = T.axis.spatial(T.int64(256), co_0 * T.int64(256) + co_1 * T.int64(256) + co_2_init * T.int64(16) + co_3_fused_init)
                            T.reads()
                            T.writes(bgemm_global[v_eps, v_nu, v_p, v_co])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS", "meta_schedule.write_cache_level": [2]})
                            bgemm_global[v_eps, v_nu, v_p, v_co] = T.float32(0)
                for ci_0, eps_2, nu_2, p_2, co_2, ci_1, eps_3, nu_3, p_3 in T.grid(T.int64(256), T.int64(3), T.int64(3), T.int64(1), T.int64(16), T.int64(1), T.int64(2), T.int64(2), T.int64(1)):
                    for co_3_fused in T.vectorized(T.int64(16)):
                        with T.block("bgemm_update"):
                            v_eps = T.axis.spatial(T.int64(6), eps_0 * T.int64(6) + eps_1 * T.int64(6) + eps_2 * T.int64(2) + eps_3)
                            v_nu = T.axis.spatial(T.int64(6), nu_0 * T.int64(6) + nu_1 * T.int64(6) + nu_2 * T.int64(2) + nu_3)
                            v_p = T.axis.spatial(T.int64(1), p_0 + p_1 + p_2 + p_3)
                            v_co = T.axis.spatial(T.int64(256), co_0 * T.int64(256) + co_1 * T.int64(256) + co_2 * T.int64(16) + co_3_fused)
                            v_ci = T.axis.reduce(T.int64(256), ci_0 + ci_1)
                            T.reads(bgemm_global[v_eps, v_nu, v_p, v_co], data_pack[v_eps, v_nu, v_p, v_ci], p1_global[v_ci, v_eps // T.int64(2), v_nu // T.int64(2), v_co // T.int64(16), v_eps % T.int64(2), v_nu % T.int64(2), v_co % T.int64(16)])
                            T.writes(bgemm_global[v_eps, v_nu, v_p, v_co])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS", "meta_schedule.write_cache_level": [2]})
                            bgemm_global[v_eps, v_nu, v_p, v_co] = bgemm_global[v_eps, v_nu, v_p, v_co] + data_pack[v_eps, v_nu, v_p, v_ci] * p1_global[v_ci, v_eps // T.int64(2), v_nu // T.int64(2), v_co // T.int64(16), v_eps % T.int64(2), v_nu % T.int64(2), v_co % T.int64(16)]
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(6), T.int64(6), T.int64(1), T.int64(256)):
                    with T.block("bgemm_global"):
                        v0, v1, v2, v3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                        T.reads(bgemm_global[v0, v1, v2, v3])
                        T.writes(bgemm[v0, v1, v2, v3])
                        bgemm[v0, v1, v2, v3] = bgemm_global[v0, v1, v2, v3]
        for p_0_co_0_fused in T.parallel(T.int64(128), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for p_1, co_1 in T.grid(T.int64(1), T.int64(2)):
                for vh in T.unroll(T.int64(4)):
                    for vw in T.unroll(T.int64(4)):
                        with T.block("inverse_init"):
                            v_vh, v_vw, v_p = T.axis.remap("SSS", [vh, vw, p_1])
                            v_co = T.axis.spatial(T.int64(256), p_0_co_0_fused * T.int64(2) + co_1)
                            T.reads()
                            T.writes(inverse[v_vh, v_vw, v_p, v_co])
                            T.block_attr({"schedule_rule": "conv2d_nhwc_winograd_inverse"})
                            inverse[v_vh, v_vw, v_p, v_co] = T.float32(0)
                        for r_a in T.unroll(T.int64(6)):
                            for r_b in T.unroll(T.int64(6)):
                                with T.block("inverse_update"):
                                    v_vh, v_vw, v_p = T.axis.remap("SSS", [vh, vw, p_1])
                                    v_co = T.axis.spatial(T.int64(256), p_0_co_0_fused * T.int64(2) + co_1)
                                    v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                    T.reads(inverse[v_vh, v_vw, v_p, v_co], bgemm[v_r_a, v_r_b, v_p, v_co])
                                    T.writes(inverse[v_vh, v_vw, v_p, v_co])
                                    T.block_attr({"schedule_rule": "conv2d_nhwc_winograd_inverse"})
                                    inverse[v_vh, v_vw, v_p, v_co] = inverse[v_vh, v_vw, v_p, v_co] + bgemm[v_r_a, v_r_b, v_p, v_co] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))
        for n_h_w_co_fused_0 in T.parallel(T.int64(16)):
            for n_h_w_co_fused_1 in T.vectorized(T.int64(64)):
                with T.block("conv2d_winograd"):
                    v_n = T.axis.spatial(T.int64(1), T.int64(0))
                    v_h = T.axis.spatial(T.int64(2), (n_h_w_co_fused_0 * T.int64(64) + n_h_w_co_fused_1) // T.int64(512))
                    v_w = T.axis.spatial(T.int64(2), (n_h_w_co_fused_0 * T.int64(64) + n_h_w_co_fused_1) % T.int64(512) // T.int64(256))
                    v_co = T.axis.spatial(T.int64(256), (n_h_w_co_fused_0 * T.int64(64) + n_h_w_co_fused_1) % T.int64(256))
                    T.reads(inverse[v_h % T.int64(4), v_w % T.int64(4), v_h // T.int64(4) + v_w // T.int64(4) + v_n, v_co])
                    T.writes(conv2d_winograd[v_n, v_h, v_w, v_co])
                    conv2d_winograd[v_n, v_h, v_w, v_co] = inverse[v_h % T.int64(4), v_w % T.int64(4), v_h // T.int64(4) + v_w // T.int64(4) + v_n, v_co]
        for ax0_ax1_ax2_ax3_fused_0 in T.parallel(T.int64(16)):
            for ax0_ax1_ax2_ax3_fused_1 in T.vectorized(T.int64(64)):
                with T.block("T_relu"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(2), (ax0_ax1_ax2_ax3_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused_1) // T.int64(512))
                    v_ax2 = T.axis.spatial(T.int64(2), (ax0_ax1_ax2_ax3_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused_1) % T.int64(512) // T.int64(256))
                    v_ax3 = T.axis.spatial(T.int64(256), (ax0_ax1_ax2_ax3_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused_1) % T.int64(256))
                    T.reads(conv2d_winograd[v_ax0, v_ax1, v_ax2, v_ax3], p2[v_ax0, T.int64(0), T.int64(0), v_ax3], p3[v_ax0, T.int64(0), T.int64(0), v_ax3])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(conv2d_winograd[v_ax0, v_ax1, v_ax2, v_ax3] + p2[v_ax0, T.int64(0), T.int64(0), v_ax3] + p3[v_ax0, T.int64(0), T.int64(0), v_ax3], T.float32(0))
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="T_add", func_name="main")
b5 = sch.get_block(name="T_add_1", func_name="main")
b6 = sch.get_block(name="root", func_name="main")
b7, b8 = sch.get_producers(block=b2)
sch.compute_inline(block=b8)
l9, l10, l11, l12, l13, l14 = sch.get_loops(block=b2)
v15, v16 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 1])
l17, l18 = sch.split(loop=l11, factors=[v15, v16], preserve_unit_iters=True, disable_predication=False)
v19, v20 = sch.sample_perfect_tile(loop=l12, n=2, max_innermost_factor=64, decision=[128, 2])
l21, l22 = sch.split(loop=l12, factors=[v19, v20], preserve_unit_iters=True, disable_predication=False)
sch.unroll(loop=l9)
sch.unroll(loop=l10)
sch.unroll(loop=l13)
sch.unroll(loop=l14)
sch.reorder(l17, l21, l18, l22, l9, l10, l13, l14)
b23, b24 = sch.get_producers(block=b0)
sch.compute_inline(block=b24)
b25, = sch.get_producers(block=b23)
l26, l27, l28, l29, l30, l31 = sch.get_loops(block=b0)
v32, v33 = sch.sample_perfect_tile(loop=l28, n=2, max_innermost_factor=64, decision=[1, 1])
l34, l35 = sch.split(loop=l28, factors=[v32, v33], preserve_unit_iters=True, disable_predication=False)
v36, v37 = sch.sample_perfect_tile(loop=l29, n=2, max_innermost_factor=64, decision=[64, 4])
l38, l39 = sch.split(loop=l29, factors=[v36, v37], preserve_unit_iters=True, disable_predication=False)
sch.unroll(loop=l26)
sch.unroll(loop=l27)
sch.unroll(loop=l30)
sch.unroll(loop=l31)
sch.reorder(l34, l38, l35, l39, l26, l27, l30, l31)
l40 = sch.sample_compute_location(block=b23, decision=1)
sch.compute_at(block=b23, loop=l40, preserve_unit_loops=True, index=-1)
l41 = sch.sample_compute_location(block=b25, decision=3)
sch.compute_at(block=b25, loop=l41, preserve_unit_loops=True, index=-1)
sch.compute_inline(block=b5)
sch.compute_inline(block=b4)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l42, l43, l44, l45, l46 = sch.get_loops(block=b1)
v47, v48, v49, v50 = sch.sample_perfect_tile(loop=l42, n=4, max_innermost_factor=64, decision=[1, 1, 3, 2])
l51, l52, l53, l54 = sch.split(loop=l42, factors=[v47, v48, v49, v50], preserve_unit_iters=True, disable_predication=False)
v55, v56, v57, v58 = sch.sample_perfect_tile(loop=l43, n=4, max_innermost_factor=64, decision=[1, 1, 3, 2])
l59, l60, l61, l62 = sch.split(loop=l43, factors=[v55, v56, v57, v58], preserve_unit_iters=True, disable_predication=False)
v63, v64, v65, v66 = sch.sample_perfect_tile(loop=l44, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l67, l68, l69, l70 = sch.split(loop=l44, factors=[v63, v64, v65, v66], preserve_unit_iters=True, disable_predication=False)
v71, v72, v73, v74 = sch.sample_perfect_tile(loop=l45, n=4, max_innermost_factor=64, decision=[1, 1, 16, 16])
l75, l76, l77, l78 = sch.split(loop=l45, factors=[v71, v72, v73, v74], preserve_unit_iters=True, disable_predication=False)
v79, v80 = sch.sample_perfect_tile(loop=l46, n=2, max_innermost_factor=64, decision=[256, 1])
l81, l82 = sch.split(loop=l46, factors=[v79, v80], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l51, l59, l67, l75, l52, l60, l68, l76, l81, l53, l61, l69, l77, l82, l54, l62, l70, l78)
b83 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="global")
sch.reverse_compute_at(block=b83, loop=l76, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.parallel", ann_val=96)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.vectorize", ann_val=64)
v84 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.unroll_explicit", ann_val=v84)
l85 = sch.sample_compute_location(block=b3, decision=-1)
sch.compute_at(block=b3, loop=l85, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b86 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b86, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b86, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b86, ann_key="meta_schedule.unroll_explicit")
b87, b88, b89, b90, b91, b92, b93, b94 = sch.get_child_blocks(b86)
l95, l96, l97, l98, l99, l100, l101, l102 = sch.get_loops(block=b87)
l103 = sch.fuse(l95, l96, preserve_unit_iters=True)
sch.parallel(loop=l103)
l104 = sch.fuse(l102, preserve_unit_iters=True)
sch.vectorize(loop=l104)
l105, l106, l107, l108, l109 = sch.get_loops(block=b88)
l110 = sch.fuse(l105, preserve_unit_iters=True)
sch.parallel(loop=l110)
l111 = sch.fuse(l109, preserve_unit_iters=True)
sch.vectorize(loop=l111)
l112, l113, l114, l115, l116, l117, l118 = sch.get_loops(block=b89)
l119 = sch.fuse(l112, preserve_unit_iters=True)
sch.parallel(loop=l119)
sch.annotate(block_or_loop=l119, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l119, ann_key="pragma_unroll_explicit", ann_val=1)
l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133, l134, l135, l136, l137 = sch.get_loops(block=b90)
l138 = sch.fuse(l137, preserve_unit_iters=True)
sch.vectorize(loop=l138)
sch.annotate(block_or_loop=l120, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l120, ann_key="pragma_unroll_explicit", ann_val=1)
l139, l140, l141, l142, l143, l144, l145, l146, l147, l148, l149, l150 = sch.get_loops(block=b91)
l151, l152, l153, l154, l155, l156, l157, l158 = sch.get_loops(block=b92)
l159 = sch.fuse(l151, l152, preserve_unit_iters=True)
sch.parallel(loop=l159)
sch.annotate(block_or_loop=l159, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l159, ann_key="pragma_unroll_explicit", ann_val=1)
l160, l161, l162, l163 = sch.get_loops(block=b93)
l164 = sch.fuse(l160, l161, l162, l163, preserve_unit_iters=True)
l165, l166 = sch.split(loop=l164, factors=[None, 64], preserve_unit_iters=True, disable_predication=False)
sch.parallel(loop=l165)
sch.vectorize(loop=l166)
l167, l168, l169, l170 = sch.get_loops(block=b94)
l171 = sch.fuse(l167, l168, l169, l170, preserve_unit_iters=True)
l172, l173 = sch.split(loop=l171, factors=[None, 64], preserve_unit_iters=True, disable_predication=False)
sch.parallel(loop=l172)
sch.vectorize(loop=l173)
b174 = sch.get_block(name="data_pack", func_name="main")
l175, l176, l177, l178, l179, l180, l181 = sch.get_loops(block=b174)
b182 = sch.decompose_reduction(block=b174, loop=l180)
b183 = sch.get_block(name="bgemm", func_name="main")
l184, l185, l186, l187, l188, l189, l190, l191, l192, l193, l194, l195, l196, l197, l198, l199, l200, l201 = sch.get_loops(block=b183)
b202 = sch.decompose_reduction(block=b183, loop=l192)
b203 = sch.get_block(name="inverse", func_name="main")
l204, l205, l206, l207, l208, l209, l210 = sch.get_loops(block=b203)
b211 = sch.decompose_reduction(block=b203, loop=l209)
b212 = sch.get_block(name="bgemm_update", func_name="main")
b213 = sch.cache_read(block=b212, read_buffer_index=2, storage_scope="global")
sch.annotate(block_or_loop=b213, ann_key="meta_schedule.layout_rewrite_preproc", ann_val=1)
sch.transform_layout(block=b212, buffer=("read", 2), index_map=tvm.tir.IndexMap.from_func(lambda i0, i1, i2, i3: (T.Cast("int64", i3), T.Cast("int64", i0) // T.int64(2), T.Cast("int64", i1) // T.int64(2), T.Cast("int64", i2) // T.int64(16), T.Cast("int64", i0) % T.int64(2), T.Cast("int64", i1) % T.int64(2), T.Cast("int64", i2) % T.int64(16),), inverse_index_map=lambda i0, i1, i2, i3, i4, i5, i6: (T.Cast("int64", i1) * T.int64(2) + T.Cast("int64", i4), T.Cast("int64", i2) * T.int64(2) + T.Cast("int64", i5), T.Cast("int64", i3) * T.int64(16) + T.Cast("int64", i6), T.Cast("int64", i0),)), pad_value=None, assume_injective_transform=False)
2024-04-30 19:40:47 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1] Trial #66: GFLOPs: 18.8529. Time: 326.7069 us. Best GFLOPs: 25.6996
2024-04-30 19:40:47 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1] Trial #67: GFLOPs: 13.1634. Time: 467.9170 us. Best GFLOPs: 25.6996
2024-04-30 19:40:47 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1] Trial #68: GFLOPs: 21.2207. Time: 290.2522 us. Best GFLOPs: 25.6996
2024-04-30 19:40:47 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1] Trial #69: GFLOPs: 10.1443. Time: 607.1740 us. Best GFLOPs: 25.6996
2024-04-30 19:40:47 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1] Trial #70: GFLOPs: 7.7953. Time: 790.1412 us. Best GFLOPs: 25.6996
2024-04-30 19:40:47 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1] Trial #71: GFLOPs: 7.3361. Time: 839.5970 us. Best GFLOPs: 25.6996
2024-04-30 19:40:47 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1] Trial #72: GFLOPs: 15.4733. Time: 398.0636 us. Best GFLOPs: 25.6996
2024-04-30 19:40:47 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1] Trial #73: GFLOPs: 15.7342. Time: 391.4620 us. Best GFLOPs: 25.6996
2024-04-30 19:40:47 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1] Trial #74: GFLOPs: 17.6087. Time: 349.7913 us. Best GFLOPs: 25.6996
2024-04-30 19:40:47 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1] Trial #75: GFLOPs: 17.2896. Time: 356.2466 us. Best GFLOPs: 25.6996
2024-04-30 19:40:47 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1] Trial #76: GFLOPs: 6.4967. Time: 948.0760 us. Best GFLOPs: 25.6996
2024-04-30 19:40:47 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1] Trial #77: GFLOPs: 7.8414. Time: 785.4899 us. Best GFLOPs: 25.6996
2024-04-30 19:40:47 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1] Trial #78: GFLOPs: 11.9157. Time: 516.9124 us. Best GFLOPs: 25.6996
2024-04-30 19:40:47 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1] Trial #79: GFLOPs: 7.5195. Time: 819.1147 us. Best GFLOPs: 25.6996
2024-04-30 19:40:47 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1] Trial #80: GFLOPs: 13.3377. Time: 461.8016 us. Best GFLOPs: 25.6996
2024-04-30 19:40:47 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1] Trial #81: GFLOPs: 13.0119. Time: 473.3636 us. Best GFLOPs: 25.6996
2024-04-30 19:40:47 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1] Trial #82: GFLOPs: 7.3621. Time: 836.6258 us. Best GFLOPs: 25.6996
2024-04-30 19:40:47 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1] Trial #83: GFLOPs: 16.1611. Time: 381.1236 us. Best GFLOPs: 25.6996
2024-04-30 19:40:47 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1] Trial #84: GFLOPs: 9.7718. Time: 630.3175 us. Best GFLOPs: 25.6996
2024-04-30 19:40:47 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1] Trial #85: GFLOPs: 16.7291. Time: 368.1816 us. Best GFLOPs: 25.6996
2024-04-30 19:40:47 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1] Trial #86: GFLOPs: 13.4750. Time: 457.0948 us. Best GFLOPs: 25.6996
2024-04-30 19:40:47 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1] Trial #87: GFLOPs: 12.4415. Time: 495.0666 us. Best GFLOPs: 25.6996
2024-04-30 19:40:47 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1] Trial #88: GFLOPs: 12.4969. Time: 492.8709 us. Best GFLOPs: 25.6996
2024-04-30 19:40:47 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1] Trial #89: GFLOPs: 18.4550. Time: 333.7510 us. Best GFLOPs: 25.6996
2024-04-30 19:40:47 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1] Trial #90: GFLOPs: 6.4211. Time: 959.2378 us. Best GFLOPs: 25.6996
2024-04-30 19:40:47 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1] Trial #91: GFLOPs: 17.7817. Time: 346.3868 us. Best GFLOPs: 25.6996
2024-04-30 19:40:47 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1] Trial #92: GFLOPs: 13.9723. Time: 440.8253 us. Best GFLOPs: 25.6996
2024-04-30 19:40:47 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1] Trial #93: GFLOPs: 15.7113. Time: 392.0347 us. Best GFLOPs: 25.6996
2024-04-30 19:40:47 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1] Trial #94: GFLOPs: 11.6118. Time: 530.4388 us. Best GFLOPs: 25.6996
2024-04-30 19:40:47 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1] Trial #95: GFLOPs: 7.4716. Time: 824.3671 us. Best GFLOPs: 25.6996
2024-04-30 19:40:47 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1] Trial #96: GFLOPs: 20.6035. Time: 298.9468 us. Best GFLOPs: 25.6996
2024-04-30 19:40:47 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1] Trial #97: GFLOPs: 11.6616. Time: 528.1747 us. Best GFLOPs: 25.6996
2024-04-30 19:40:47 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1] Trial #98: GFLOPs: 18.7908. Time: 327.7855 us. Best GFLOPs: 25.6996
2024-04-30 19:40:47 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1] Trial #99: GFLOPs: 18.6293. Time: 330.6283 us. Best GFLOPs: 25.6996
2024-04-30 19:40:47 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1] Trial #100: GFLOPs: 10.7063. Time: 575.3010 us. Best GFLOPs: 25.6996
2024-04-30 19:40:47 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1] Trial #101: GFLOPs: 15.8612. Time: 388.3296 us. Best GFLOPs: 25.6996
2024-04-30 19:40:47 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1] Trial #102: GFLOPs: 15.3072. Time: 402.3839 us. Best GFLOPs: 25.6996
2024-04-30 19:40:47 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1] Trial #103: GFLOPs: 14.9272. Time: 412.6264 us. Best GFLOPs: 25.6996
2024-04-30 19:40:47 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1] Trial #104: GFLOPs: 18.8105. Time: 327.4418 us. Best GFLOPs: 25.6996
2024-04-30 19:40:47 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1] Trial #105: GFLOPs: 11.1074. Time: 554.5261 us. Best GFLOPs: 25.6996
2024-04-30 19:40:47 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1] Trial #106: GFLOPs: 19.7308. Time: 312.1704 us. Best GFLOPs: 25.6996
2024-04-30 19:40:47 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1] Trial #107: GFLOPs: 18.0259. Time: 341.6956 us. Best GFLOPs: 25.6996
2024-04-30 19:40:47 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1] Trial #108: GFLOPs: 11.8410. Time: 520.1712 us. Best GFLOPs: 25.6996
2024-04-30 19:40:47 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1] Trial #109: GFLOPs: 16.9006. Time: 364.4460 us. Best GFLOPs: 25.6996
2024-04-30 19:40:47 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1] Trial #110: GFLOPs: 9.6873. Time: 635.8210 us. Best GFLOPs: 25.6996
2024-04-30 19:40:47 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1] Trial #111: GFLOPs: 17.6672. Time: 348.6333 us. Best GFLOPs: 25.6996
2024-04-30 19:40:47 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1] Trial #112: GFLOPs: 19.5716. Time: 314.7095 us. Best GFLOPs: 25.6996
2024-04-30 19:40:47 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1] Trial #113: GFLOPs: 14.8394. Time: 415.0671 us. Best GFLOPs: 25.6996
2024-04-30 19:40:47 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1] Trial #114: GFLOPs: 20.9907. Time: 293.4327 us. Best GFLOPs: 25.6996
2024-04-30 19:40:47 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1] Trial #115: GFLOPs: 12.2286. Time: 503.6862 us. Best GFLOPs: 25.6996
2024-04-30 19:40:47 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1] Trial #116: GFLOPs: 15.8269. Time: 389.1710 us. Best GFLOPs: 25.6996
2024-04-30 19:40:47 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1] Trial #117: GFLOPs: 17.3360. Time: 355.2933 us. Best GFLOPs: 25.6996
2024-04-30 19:40:47 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1] Trial #118: GFLOPs: 15.9979. Time: 385.0104 us. Best GFLOPs: 25.6996
2024-04-30 19:40:47 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1] Trial #119: GFLOPs: 15.7294. Time: 391.5827 us. Best GFLOPs: 25.6996
2024-04-30 19:40:47 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1] Trial #120: GFLOPs: 17.4345. Time: 353.2854 us. Best GFLOPs: 25.6996
2024-04-30 19:40:47 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1] Trial #121: GFLOPs: 15.6061. Time: 394.6760 us. Best GFLOPs: 25.6996
2024-04-30 19:40:47 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1] Trial #122: GFLOPs: 15.6761. Time: 392.9136 us. Best GFLOPs: 25.6996
2024-04-30 19:40:47 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1] Trial #123: GFLOPs: 11.3391. Time: 543.1988 us. Best GFLOPs: 25.6996
2024-04-30 19:40:47 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1] Trial #124: GFLOPs: 19.5983. Time: 314.2805 us. Best GFLOPs: 25.6996
2024-04-30 19:40:47 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1] Trial #125: GFLOPs: 15.0632. Time: 408.9009 us. Best GFLOPs: 25.6996
2024-04-30 19:40:47 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1] Trial #126: GFLOPs: 9.5509. Time: 644.9000 us. Best GFLOPs: 25.6996
2024-04-30 19:40:47 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1] Trial #127: GFLOPs: 8.2230. Time: 749.0399 us. Best GFLOPs: 25.6996
2024-04-30 19:40:47 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1] Trial #128: GFLOPs: 18.1747. Time: 338.8975 us. Best GFLOPs: 25.6996
2024-04-30 19:40:47 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-30 19:40:49 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-30 19:40:55 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xe85e7a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x69d7868)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x14d13aa8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x241d5ed8)]: 0 failure(s)
2024-04-30 19:40:55 [INFO] [evolutionary_search.cc:723] Sampled 410 candidate(s)
2024-04-30 19:41:10 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xe85e7a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x69d7868)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x14d13aa8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x241d5ed8)]: 0 failure(s)
2024-04-30 19:41:24 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xe85e7a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x69d7868)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x14d13aa8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x241d5ed8)]: 0 failure(s)
2024-04-30 19:41:40 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xe85e7a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x69d7868)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x14d13aa8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x241d5ed8)]: 0 failure(s)
2024-04-30 19:41:56 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xe85e7a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x69d7868)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x14d13aa8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x241d5ed8)]: 0 failure(s)
2024-04-30 19:42:05 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.1602  1.1218  1.1072  0.9868  0.9627  0.9603  0.9575  0.9524  0.9485  0.9478  0.9474  0.9473  0.9467  0.9404  0.9388  0.9379
[17 : 32]:	0.9379  0.9379  0.9337  0.9313  0.9290  0.9281  0.9263  0.9263  0.9240  0.9240  0.9230  0.9230  0.9227  0.9221  0.9196  0.9196
[33 : 48]:	0.9196  0.9162  0.9034  0.9001  0.8996  0.8985  0.8954  0.8951  0.8947  0.8941  0.8941  0.8883  0.8869  0.8851  0.8821  0.8809
[49 : 64]:	0.8805  0.8780  0.8775  0.8771  0.8771  0.8769  0.8753  0.8741  0.8732  0.8704  0.8671  0.8658  0.8636  0.8636  0.8629  0.8621
2024-04-30 19:42:05 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-30 19:42:05 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-30 19:43:22 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1] Trial #129: GFLOPs: 9.6120. Time: 640.8008 us. Best GFLOPs: 25.6996
2024-04-30 19:43:22 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1] Trial #130: GFLOPs: 10.7135. Time: 574.9169 us. Best GFLOPs: 25.6996
2024-04-30 19:43:22 [INFO] [task_scheduler.cc:121] [Task #22: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1] Trial #131: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(2), T.int64(2), T.int64(256)), "float32"), p1: T.Buffer((T.int64(6), T.int64(6), T.int64(256), T.int64(256)), "float32"), p2: T.Buffer((T.int64(1), T.int64(1), T.int64(1), T.int64(256)), "float32"), p3: T.Buffer((T.int64(1), T.int64(1), T.int64(1), T.int64(256)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(2), T.int64(2), T.int64(256)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(6), T.int64(6), T.int64(256)))
        input_tile = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(1), T.int64(256)))
        data_pack = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(1), T.int64(256)))
        bgemm = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(1), T.int64(256)))
        inverse = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(1), T.int64(256)))
        conv2d_winograd = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(2), T.int64(256)))
        bgemm_global = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(1), T.int64(256)))
        p1_global = T.alloc_buffer((T.int64(3), T.int64(2), T.int64(12), T.int64(64), T.int64(16), T.int64(2), T.int64(16)))
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(6), T.int64(6), T.int64(256), T.int64(256)):
            with T.block("p1_global"):
                v0, v1, v2, v3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(p1[v0, v1, v2, v3])
                T.writes(p1_global[v0 // T.int64(2), v2 // T.int64(128), v0 % T.int64(2) * T.int64(6) + v1, v2 % T.int64(128) // T.int64(2), v3 // T.int64(16), v2 % T.int64(2), v3 % T.int64(16)])
                T.block_attr({"meta_schedule.layout_rewrite_preproc": T.bool(True)})
                p1_global[v0 // T.int64(2), v2 // T.int64(128), v0 % T.int64(2) * T.int64(6) + v1, v2 % T.int64(128) // T.int64(2), v3 // T.int64(16), v2 % T.int64(2), v3 % T.int64(16)] = p1[v0, v1, v2, v3]
        for p_0_ci_0_fused_fused_fused in T.parallel(T.int64(256), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for p_1, ci_1 in T.grid(T.int64(1), T.int64(1)):
                for eps in T.unroll(T.int64(6)):
                    for nu in T.unroll(T.int64(6)):
                        for ax0, ax1 in T.grid(T.int64(6), T.int64(6)):
                            for ax0_1, ax1_1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                                with T.block("data_pad"):
                                    v_i0 = T.axis.spatial(T.int64(1), ax0_1)
                                    v_i1 = T.axis.spatial(T.int64(6), ax0 + ax1_1)
                                    v_i2 = T.axis.spatial(T.int64(6), ax1 + ax2)
                                    v_i3 = T.axis.spatial(T.int64(256), p_0_ci_0_fused_fused_fused + ax3)
                                    T.reads(p0[v_i0, v_i1 - T.int64(1), v_i2 - T.int64(1), v_i3])
                                    T.writes(data_pad[v_i0, v_i1, v_i2, v_i3])
                                    T.block_attr({"schedule_rule": "None"})
                                    data_pad[v_i0, v_i1, v_i2, v_i3] = T.if_then_else(T.int64(1) <= v_i1 and v_i1 < T.int64(3) and T.int64(1) <= v_i2 and v_i2 < T.int64(3), p0[v_i0, v_i1 - T.int64(1), v_i2 - T.int64(1), v_i3], T.float32(0))
                            for ax2, ax3 in T.grid(T.int64(1), T.int64(1)):
                                with T.block("input_tile"):
                                    v_eps, v_nu, v_p = T.axis.remap("SSS", [ax0, ax1, ax2])
                                    v_ci = T.axis.spatial(T.int64(256), p_0_ci_0_fused_fused_fused + ax3)
                                    T.reads(data_pad[v_p, v_eps, v_nu, v_ci])
                                    T.writes(input_tile[v_eps, v_nu, v_p, v_ci])
                                    T.block_attr({"schedule_rule": "None"})
                                    input_tile[v_eps, v_nu, v_p, v_ci] = data_pad[v_p, v_eps, v_nu, v_ci]
                        with T.block("data_pack_init"):
                            v_eps, v_nu, v_p = T.axis.remap("SSS", [eps, nu, p_1])
                            v_ci = T.axis.spatial(T.int64(256), p_0_ci_0_fused_fused_fused + ci_1)
                            T.reads()
                            T.writes(data_pack[v_eps, v_nu, v_p, v_ci])
                            T.block_attr({"schedule_rule": "conv2d_nhwc_winograd_data_pack"})
                            data_pack[v_eps, v_nu, v_p, v_ci] = T.float32(0)
                        for r_a in T.unroll(T.int64(6)):
                            for r_b in T.unroll(T.int64(6)):
                                with T.block("data_pack_update"):
                                    v_eps, v_nu, v_p = T.axis.remap("SSS", [eps, nu, p_1])
                                    v_ci = T.axis.spatial(T.int64(256), p_0_ci_0_fused_fused_fused + ci_1)
                                    v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                    T.reads(data_pack[v_eps, v_nu, v_p, v_ci], input_tile[v_r_a, v_r_b, v_p, v_ci])
                                    T.writes(data_pack[v_eps, v_nu, v_p, v_ci])
                                    T.block_attr({"schedule_rule": "conv2d_nhwc_winograd_data_pack"})
                                    data_pack[v_eps, v_nu, v_p, v_ci] = data_pack[v_eps, v_nu, v_p, v_ci] + input_tile[v_r_a, v_r_b, v_p, v_ci] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))))))))))))))
        for eps_0_nu_0_p_0_co_0_eps_1_nu_1_p_1_co_1_fused in T.parallel(T.int64(4608), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for eps_2_init, nu_2_init, p_2_init, co_2_init, eps_3_init, nu_3_init, p_3_init, co_3_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                with T.block("bgemm_init"):
                    v_eps = T.axis.spatial(T.int64(6), eps_0_nu_0_p_0_co_0_eps_1_nu_1_p_1_co_1_fused // T.int64(1536) * T.int64(2) + eps_0_nu_0_p_0_co_0_eps_1_nu_1_p_1_co_1_fused % T.int64(768) // T.int64(384) + eps_2_init + eps_3_init)
                    v_nu = T.axis.spatial(T.int64(6), eps_0_nu_0_p_0_co_0_eps_1_nu_1_p_1_co_1_fused % T.int64(384) // T.int64(64) + nu_2_init + nu_3_init)
                    v_p = T.axis.spatial(T.int64(1), p_2_init + p_3_init)
                    v_co = T.axis.spatial(T.int64(256), eps_0_nu_0_p_0_co_0_eps_1_nu_1_p_1_co_1_fused % T.int64(1536) // T.int64(768) * T.int64(128) + eps_0_nu_0_p_0_co_0_eps_1_nu_1_p_1_co_1_fused % T.int64(64) * T.int64(2) + co_2_init + co_3_init)
                    T.reads()
                    T.writes(bgemm_global[v_eps, v_nu, v_p, v_co])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS", "meta_schedule.write_cache_level": [2]})
                    bgemm_global[v_eps, v_nu, v_p, v_co] = T.float32(0)
            for ci_0, eps_2, nu_2, p_2, co_2, ci_1, eps_3, nu_3, p_3, co_3 in T.grid(T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                with T.block("bgemm_update"):
                    v_eps = T.axis.spatial(T.int64(6), eps_0_nu_0_p_0_co_0_eps_1_nu_1_p_1_co_1_fused // T.int64(1536) * T.int64(2) + eps_0_nu_0_p_0_co_0_eps_1_nu_1_p_1_co_1_fused % T.int64(768) // T.int64(384) + eps_2 + eps_3)
                    v_nu = T.axis.spatial(T.int64(6), eps_0_nu_0_p_0_co_0_eps_1_nu_1_p_1_co_1_fused % T.int64(384) // T.int64(64) + nu_2 + nu_3)
                    v_p = T.axis.spatial(T.int64(1), p_2 + p_3)
                    v_co = T.axis.spatial(T.int64(256), eps_0_nu_0_p_0_co_0_eps_1_nu_1_p_1_co_1_fused % T.int64(1536) // T.int64(768) * T.int64(128) + eps_0_nu_0_p_0_co_0_eps_1_nu_1_p_1_co_1_fused % T.int64(64) * T.int64(2) + co_2 + co_3)
                    v_ci = T.axis.reduce(T.int64(256), ci_0 * T.int64(16) + ci_1)
                    T.reads(bgemm_global[v_eps, v_nu, v_p, v_co], data_pack[v_eps, v_nu, v_p, v_ci], p1_global[v_eps // T.int64(2), v_co // T.int64(128), v_eps % T.int64(2) * T.int64(6) + v_nu, v_co % T.int64(128) // T.int64(2), v_ci // T.int64(16), v_co % T.int64(2), v_ci % T.int64(16)])
                    T.writes(bgemm_global[v_eps, v_nu, v_p, v_co])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS", "meta_schedule.write_cache_level": [2]})
                    bgemm_global[v_eps, v_nu, v_p, v_co] = bgemm_global[v_eps, v_nu, v_p, v_co] + data_pack[v_eps, v_nu, v_p, v_ci] * p1_global[v_eps // T.int64(2), v_co // T.int64(128), v_eps % T.int64(2) * T.int64(6) + v_nu, v_co % T.int64(128) // T.int64(2), v_ci // T.int64(16), v_co % T.int64(2), v_ci % T.int64(16)]
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(1), T.int64(1)):
                for ax3_fused in T.vectorized(T.int64(2)):
                    with T.block("bgemm_global"):
                        v0 = T.axis.spatial(T.int64(6), eps_0_nu_0_p_0_co_0_eps_1_nu_1_p_1_co_1_fused // T.int64(1536) * T.int64(2) + eps_0_nu_0_p_0_co_0_eps_1_nu_1_p_1_co_1_fused % T.int64(768) // T.int64(384) + ax0)
                        v1 = T.axis.spatial(T.int64(6), eps_0_nu_0_p_0_co_0_eps_1_nu_1_p_1_co_1_fused % T.int64(384) // T.int64(64) + ax1)
                        v2 = T.axis.spatial(T.int64(1), ax2)
                        v3 = T.axis.spatial(T.int64(256), eps_0_nu_0_p_0_co_0_eps_1_nu_1_p_1_co_1_fused % T.int64(1536) // T.int64(768) * T.int64(128) + eps_0_nu_0_p_0_co_0_eps_1_nu_1_p_1_co_1_fused % T.int64(64) * T.int64(2) + ax3_fused)
                        T.reads(bgemm_global[v0, v1, v2, v3])
                        T.writes(bgemm[v0, v1, v2, v3])
                        bgemm[v0, v1, v2, v3] = bgemm_global[v0, v1, v2, v3]
        for p_0_co_0_p_1_co_1_fused in T.parallel(T.int64(256), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for vh in T.unroll(T.int64(4)):
                for vw in T.unroll(T.int64(4)):
                    with T.block("inverse_init"):
                        v_vh, v_vw = T.axis.remap("SS", [vh, vw])
                        v_p = T.axis.spatial(T.int64(1), T.int64(0))
                        v_co = T.axis.spatial(T.int64(256), p_0_co_0_p_1_co_1_fused)
                        T.reads()
                        T.writes(inverse[v_vh, v_vw, v_p, v_co])
                        T.block_attr({"schedule_rule": "conv2d_nhwc_winograd_inverse"})
                        inverse[v_vh, v_vw, v_p, v_co] = T.float32(0)
                    for r_a in T.unroll(T.int64(6)):
                        for r_b in T.unroll(T.int64(6)):
                            with T.block("inverse_update"):
                                v_vh, v_vw = T.axis.remap("SS", [vh, vw])
                                v_p = T.axis.spatial(T.int64(1), T.int64(0))
                                v_co, v_r_a, v_r_b = T.axis.remap("SRR", [p_0_co_0_p_1_co_1_fused, r_a, r_b])
                                T.reads(inverse[v_vh, v_vw, v_p, v_co], bgemm[v_r_a, v_r_b, v_p, v_co])
                                T.writes(inverse[v_vh, v_vw, v_p, v_co])
                                T.block_attr({"schedule_rule": "conv2d_nhwc_winograd_inverse"})
                                inverse[v_vh, v_vw, v_p, v_co] = inverse[v_vh, v_vw, v_p, v_co] + bgemm[v_r_a, v_r_b, v_p, v_co] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))
        for n_h_w_co_fused_0 in T.parallel(T.int64(16)):
            for n_h_w_co_fused_1 in T.vectorized(T.int64(64)):
                with T.block("conv2d_winograd"):
                    v_n = T.axis.spatial(T.int64(1), T.int64(0))
                    v_h = T.axis.spatial(T.int64(2), (n_h_w_co_fused_0 * T.int64(64) + n_h_w_co_fused_1) // T.int64(512))
                    v_w = T.axis.spatial(T.int64(2), (n_h_w_co_fused_0 * T.int64(64) + n_h_w_co_fused_1) % T.int64(512) // T.int64(256))
                    v_co = T.axis.spatial(T.int64(256), (n_h_w_co_fused_0 * T.int64(64) + n_h_w_co_fused_1) % T.int64(256))
                    T.reads(inverse[v_h % T.int64(4), v_w % T.int64(4), v_h // T.int64(4) + v_w // T.int64(4) + v_n, v_co])
                    T.writes(conv2d_winograd[v_n, v_h, v_w, v_co])
                    conv2d_winograd[v_n, v_h, v_w, v_co] = inverse[v_h % T.int64(4), v_w % T.int64(4), v_h // T.int64(4) + v_w // T.int64(4) + v_n, v_co]
        for ax0_ax1_ax2_ax3_fused_0 in T.parallel(T.int64(16)):
            for ax0_ax1_ax2_ax3_fused_1 in T.vectorized(T.int64(64)):
                with T.block("T_relu"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(2), (ax0_ax1_ax2_ax3_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused_1) // T.int64(512))
                    v_ax2 = T.axis.spatial(T.int64(2), (ax0_ax1_ax2_ax3_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused_1) % T.int64(512) // T.int64(256))
                    v_ax3 = T.axis.spatial(T.int64(256), (ax0_ax1_ax2_ax3_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused_1) % T.int64(256))
                    T.reads(conv2d_winograd[v_ax0, v_ax1, v_ax2, v_ax3], p2[v_ax0, T.int64(0), T.int64(0), v_ax3], p3[v_ax0, T.int64(0), T.int64(0), v_ax3])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(conv2d_winograd[v_ax0, v_ax1, v_ax2, v_ax3] + p2[v_ax0, T.int64(0), T.int64(0), v_ax3] + p3[v_ax0, T.int64(0), T.int64(0), v_ax3], T.float32(0))
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="T_add", func_name="main")
b5 = sch.get_block(name="T_add_1", func_name="main")
b6 = sch.get_block(name="root", func_name="main")
b7, b8 = sch.get_producers(block=b2)
sch.compute_inline(block=b8)
l9, l10, l11, l12, l13, l14 = sch.get_loops(block=b2)
v15, v16 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 1])
l17, l18 = sch.split(loop=l11, factors=[v15, v16], preserve_unit_iters=True, disable_predication=False)
v19, v20 = sch.sample_perfect_tile(loop=l12, n=2, max_innermost_factor=64, decision=[16, 16])
l21, l22 = sch.split(loop=l12, factors=[v19, v20], preserve_unit_iters=True, disable_predication=False)
sch.unroll(loop=l9)
sch.unroll(loop=l10)
sch.unroll(loop=l13)
sch.unroll(loop=l14)
sch.reorder(l17, l21, l18, l22, l9, l10, l13, l14)
b23, b24 = sch.get_producers(block=b0)
sch.compute_inline(block=b24)
b25, = sch.get_producers(block=b23)
l26, l27, l28, l29, l30, l31 = sch.get_loops(block=b0)
v32, v33 = sch.sample_perfect_tile(loop=l28, n=2, max_innermost_factor=64, decision=[1, 1])
l34, l35 = sch.split(loop=l28, factors=[v32, v33], preserve_unit_iters=True, disable_predication=False)
v36, v37 = sch.sample_perfect_tile(loop=l29, n=2, max_innermost_factor=64, decision=[256, 1])
l38, l39 = sch.split(loop=l29, factors=[v36, v37], preserve_unit_iters=True, disable_predication=False)
sch.unroll(loop=l26)
sch.unroll(loop=l27)
sch.unroll(loop=l30)
sch.unroll(loop=l31)
sch.reorder(l34, l38, l35, l39, l26, l27, l30, l31)
l40 = sch.sample_compute_location(block=b23, decision=5)
sch.compute_at(block=b23, loop=l40, preserve_unit_loops=True, index=-1)
l41 = sch.sample_compute_location(block=b25, decision=7)
sch.compute_at(block=b25, loop=l41, preserve_unit_loops=True, index=-1)
sch.compute_inline(block=b5)
sch.compute_inline(block=b4)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l42, l43, l44, l45, l46 = sch.get_loops(block=b1)
v47, v48, v49, v50 = sch.sample_perfect_tile(loop=l42, n=4, max_innermost_factor=64, decision=[3, 2, 1, 1])
l51, l52, l53, l54 = sch.split(loop=l42, factors=[v47, v48, v49, v50], preserve_unit_iters=True, disable_predication=False)
v55, v56, v57, v58 = sch.sample_perfect_tile(loop=l43, n=4, max_innermost_factor=64, decision=[1, 6, 1, 1])
l59, l60, l61, l62 = sch.split(loop=l43, factors=[v55, v56, v57, v58], preserve_unit_iters=True, disable_predication=False)
v63, v64, v65, v66 = sch.sample_perfect_tile(loop=l44, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l67, l68, l69, l70 = sch.split(loop=l44, factors=[v63, v64, v65, v66], preserve_unit_iters=True, disable_predication=False)
v71, v72, v73, v74 = sch.sample_perfect_tile(loop=l45, n=4, max_innermost_factor=64, decision=[2, 64, 2, 1])
l75, l76, l77, l78 = sch.split(loop=l45, factors=[v71, v72, v73, v74], preserve_unit_iters=True, disable_predication=False)
v79, v80 = sch.sample_perfect_tile(loop=l46, n=2, max_innermost_factor=64, decision=[16, 16])
l81, l82 = sch.split(loop=l46, factors=[v79, v80], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l51, l59, l67, l75, l52, l60, l68, l76, l81, l53, l61, l69, l77, l82, l54, l62, l70, l78)
b83 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="global")
sch.reverse_compute_at(block=b83, loop=l76, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.parallel", ann_val=96)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.vectorize", ann_val=64)
v84 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.unroll_explicit", ann_val=v84)
l85 = sch.sample_compute_location(block=b3, decision=-1)
sch.compute_at(block=b3, loop=l85, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b86 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b86, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b86, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b86, ann_key="meta_schedule.unroll_explicit")
b87, b88, b89, b90, b91, b92, b93, b94 = sch.get_child_blocks(b86)
l95, l96, l97, l98, l99, l100, l101, l102, l103, l104, l105, l106 = sch.get_loops(block=b87)
l107 = sch.fuse(l95, l96, preserve_unit_iters=True)
sch.parallel(loop=l107)
l108, l109, l110, l111, l112, l113, l114, l115, l116 = sch.get_loops(block=b88)
l117 = sch.fuse(l108, preserve_unit_iters=True)
sch.parallel(loop=l117)
l118, l119, l120, l121, l122, l123, l124 = sch.get_loops(block=b89)
l125 = sch.fuse(l118, preserve_unit_iters=True)
sch.parallel(loop=l125)
sch.annotate(block_or_loop=l125, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l125, ann_key="pragma_unroll_explicit", ann_val=1)
l126, l127, l128, l129, l130, l131, l132, l133, l134, l135, l136, l137, l138, l139, l140, l141, l142, l143 = sch.get_loops(block=b90)
l144 = sch.fuse(l126, l127, l128, l129, l130, l131, l132, l133, preserve_unit_iters=True)
sch.parallel(loop=l144)
sch.annotate(block_or_loop=l144, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l144, ann_key="pragma_unroll_explicit", ann_val=1)
l145, l146, l147, l148, l149 = sch.get_loops(block=b91)
l150 = sch.fuse(l149, preserve_unit_iters=True)
sch.vectorize(loop=l150)
l151, l152, l153, l154, l155, l156, l157, l158 = sch.get_loops(block=b92)
l159 = sch.fuse(l151, l152, l153, l154, preserve_unit_iters=True)
sch.parallel(loop=l159)
sch.annotate(block_or_loop=l159, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l159, ann_key="pragma_unroll_explicit", ann_val=1)
l160, l161, l162, l163 = sch.get_loops(block=b93)
l164 = sch.fuse(l160, l161, l162, l163, preserve_unit_iters=True)
l165, l166 = sch.split(loop=l164, factors=[None, 64], preserve_unit_iters=True, disable_predication=False)
sch.parallel(loop=l165)
sch.vectorize(loop=l166)
l167, l168, l169, l170 = sch.get_loops(block=b94)
l171 = sch.fuse(l167, l168, l169, l170, preserve_unit_iters=True)
l172, l173 = sch.split(loop=l171, factors=[None, 64], preserve_unit_iters=True, disable_predication=False)
sch.parallel(loop=l172)
sch.vectorize(loop=l173)
b174 = sch.get_block(name="data_pack", func_name="main")
l175, l176, l177, l178, l179, l180, l181 = sch.get_loops(block=b174)
b182 = sch.decompose_reduction(block=b174, loop=l180)
b183 = sch.get_block(name="bgemm", func_name="main")
l184, l185, l186, l187, l188, l189, l190, l191, l192, l193, l194 = sch.get_loops(block=b183)
b195 = sch.decompose_reduction(block=b183, loop=l185)
b196 = sch.get_block(name="inverse", func_name="main")
l197, l198, l199, l200, l201 = sch.get_loops(block=b196)
b202 = sch.decompose_reduction(block=b196, loop=l200)
b203 = sch.get_block(name="bgemm_update", func_name="main")
b204 = sch.cache_read(block=b203, read_buffer_index=2, storage_scope="global")
sch.annotate(block_or_loop=b204, ann_key="meta_schedule.layout_rewrite_preproc", ann_val=1)
sch.transform_layout(block=b203, buffer=("read", 2), index_map=tvm.tir.IndexMap.from_func(lambda i0, i1, i2, i3: (T.Cast("int64", i0) // T.int64(2), T.Cast("int64", i2) // T.int64(128), T.Cast("int64", i0) % T.int64(2) * T.int64(6) + T.Cast("int64", i1), T.Cast("int64", i2) % T.int64(128) // T.int64(2), T.Cast("int64", i3) // T.int64(16), T.Cast("int64", i2) % T.int64(2), T.Cast("int64", i3) % T.int64(16),), inverse_index_map=lambda i0, i1, i2, i3, i4, i5, i6: (T.Cast("int64", i0) * T.int64(2) + T.Cast("int64", i2) // T.int64(6), T.Cast("int64", i2) % T.int64(6), T.Cast("int64", i1) * T.int64(128) + T.Cast("int64", i3) * T.int64(2) + T.Cast("int64", i5), T.Cast("int64", i4) * T.int64(16) + T.Cast("int64", i6),)), pad_value=None, assume_injective_transform=False)
2024-04-30 19:43:22 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1] Trial #132: GFLOPs: 20.4676. Time: 300.9320 us. Best GFLOPs: 25.6996
2024-04-30 19:43:22 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1] Trial #133: GFLOPs: 20.3377. Time: 302.8545 us. Best GFLOPs: 25.6996
2024-04-30 19:43:22 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1] Trial #134: GFLOPs: 19.9472. Time: 308.7832 us. Best GFLOPs: 25.6996
2024-04-30 19:43:22 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1] Trial #135: GFLOPs: 16.9577. Time: 363.2189 us. Best GFLOPs: 25.6996
2024-04-30 19:43:22 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1] Trial #136: GFLOPs: 18.5147. Time: 332.6737 us. Best GFLOPs: 25.6996
2024-04-30 19:43:22 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1] Trial #137: GFLOPs: 19.9564. Time: 308.6412 us. Best GFLOPs: 25.6996
2024-04-30 19:43:22 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1] Trial #138: GFLOPs: 18.6412. Time: 330.4174 us. Best GFLOPs: 25.6996
2024-04-30 19:43:22 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1] Trial #139: GFLOPs: 16.6318. Time: 370.3366 us. Best GFLOPs: 25.6996
2024-04-30 19:43:22 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1] Trial #140: GFLOPs: 15.9473. Time: 386.2326 us. Best GFLOPs: 25.6996
2024-04-30 19:43:22 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1] Trial #141: GFLOPs: 19.5432. Time: 315.1658 us. Best GFLOPs: 25.6996
2024-04-30 19:43:22 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1] Trial #142: GFLOPs: 18.5415. Time: 332.1928 us. Best GFLOPs: 25.6996
2024-04-30 19:43:22 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1] Trial #143: GFLOPs: 18.1375. Time: 339.5918 us. Best GFLOPs: 25.6996
2024-04-30 19:43:22 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1] Trial #144: GFLOPs: 17.5903. Time: 350.1560 us. Best GFLOPs: 25.6996
2024-04-30 19:43:22 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1] Trial #145: GFLOPs: 17.9053. Time: 343.9963 us. Best GFLOPs: 25.6996
2024-04-30 19:43:22 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1] Trial #146: GFLOPs: 19.7977. Time: 311.1148 us. Best GFLOPs: 25.6996
2024-04-30 19:43:22 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1] Trial #147: GFLOPs: 16.9348. Time: 363.7099 us. Best GFLOPs: 25.6996
2024-04-30 19:43:22 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1] Trial #148: GFLOPs: 16.9347. Time: 363.7116 us. Best GFLOPs: 25.6996
2024-04-30 19:43:22 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1] Trial #149: GFLOPs: 20.1909. Time: 305.0562 us. Best GFLOPs: 25.6996
2024-04-30 19:43:22 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1] Trial #150: GFLOPs: 19.6334. Time: 313.7192 us. Best GFLOPs: 25.6996
2024-04-30 19:43:22 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1] Trial #151: GFLOPs: 16.5983. Time: 371.0833 us. Best GFLOPs: 25.6996
2024-04-30 19:43:22 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1] Trial #152: GFLOPs: 20.5638. Time: 299.5244 us. Best GFLOPs: 25.6996
2024-04-30 19:43:22 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1] Trial #153: GFLOPs: 18.4445. Time: 333.9405 us. Best GFLOPs: 25.6996
2024-04-30 19:43:22 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1] Trial #154: GFLOPs: 16.9272. Time: 363.8731 us. Best GFLOPs: 25.6996
2024-04-30 19:43:22 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1] Trial #155: GFLOPs: 17.0264. Time: 361.7529 us. Best GFLOPs: 25.6996
2024-04-30 19:43:22 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1] Trial #156: GFLOPs: 19.6106. Time: 314.0828 us. Best GFLOPs: 25.6996
2024-04-30 19:43:22 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1] Trial #157: GFLOPs: 19.0514. Time: 323.3018 us. Best GFLOPs: 25.6996
2024-04-30 19:43:22 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1] Trial #158: GFLOPs: 17.3556. Time: 354.8915 us. Best GFLOPs: 25.6996
2024-04-30 19:43:22 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1] Trial #159: GFLOPs: 17.5218. Time: 351.5257 us. Best GFLOPs: 25.6996
2024-04-30 19:43:22 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1] Trial #160: GFLOPs: 20.0461. Time: 307.2601 us. Best GFLOPs: 25.6996
2024-04-30 19:43:22 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1] Trial #161: GFLOPs: 18.8185. Time: 327.3035 us. Best GFLOPs: 25.6996
2024-04-30 19:43:22 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1] Trial #162: GFLOPs: 20.4417. Time: 301.3138 us. Best GFLOPs: 25.6996
2024-04-30 19:43:22 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1] Trial #163: GFLOPs: 21.5411. Time: 285.9350 us. Best GFLOPs: 25.6996
2024-04-30 19:43:22 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1] Trial #164: GFLOPs: 18.5808. Time: 331.4904 us. Best GFLOPs: 25.6996
2024-04-30 19:43:22 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1] Trial #165: GFLOPs: 16.4501. Time: 374.4280 us. Best GFLOPs: 25.6996
2024-04-30 19:43:22 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1] Trial #166: GFLOPs: 16.7193. Time: 368.3979 us. Best GFLOPs: 25.6996
2024-04-30 19:43:22 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1] Trial #167: GFLOPs: 21.5113. Time: 286.3309 us. Best GFLOPs: 25.6996
2024-04-30 19:43:22 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1] Trial #168: GFLOPs: 19.0899. Time: 322.6502 us. Best GFLOPs: 25.6996
2024-04-30 19:43:22 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1] Trial #169: GFLOPs: 16.2682. Time: 378.6147 us. Best GFLOPs: 25.6996
2024-04-30 19:43:22 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1] Trial #170: GFLOPs: 20.4682. Time: 300.9232 us. Best GFLOPs: 25.6996
2024-04-30 19:43:22 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1] Trial #171: GFLOPs: 22.8529. Time: 269.5219 us. Best GFLOPs: 25.6996
2024-04-30 19:43:22 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1] Trial #172: GFLOPs: 17.7160. Time: 347.6718 us. Best GFLOPs: 25.6996
2024-04-30 19:43:22 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1] Trial #173: GFLOPs: 18.3635. Time: 335.4125 us. Best GFLOPs: 25.6996
2024-04-30 19:43:22 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1] Trial #174: GFLOPs: 19.5871. Time: 314.4594 us. Best GFLOPs: 25.6996
2024-04-30 19:43:22 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1] Trial #175: GFLOPs: 17.0719. Time: 360.7892 us. Best GFLOPs: 25.6996
2024-04-30 19:43:22 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1] Trial #176: GFLOPs: 17.1673. Time: 358.7847 us. Best GFLOPs: 25.6996
2024-04-30 19:43:22 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1] Trial #177: GFLOPs: 16.5379. Time: 372.4386 us. Best GFLOPs: 25.6996
2024-04-30 19:43:22 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1] Trial #178: GFLOPs: 17.8473. Time: 345.1151 us. Best GFLOPs: 25.6996
2024-04-30 19:43:22 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1] Trial #179: GFLOPs: 14.4992. Time: 424.8066 us. Best GFLOPs: 25.6996
2024-04-30 19:43:22 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1] Trial #180: GFLOPs: 17.8307. Time: 345.4363 us. Best GFLOPs: 25.6996
2024-04-30 19:43:22 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1] Trial #181: GFLOPs: 17.7403. Time: 347.1950 us. Best GFLOPs: 25.6996
2024-04-30 19:43:22 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1] Trial #182: GFLOPs: 21.6472. Time: 284.5339 us. Best GFLOPs: 25.6996
2024-04-30 19:43:22 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1] Trial #183: GFLOPs: 17.5115. Time: 351.7317 us. Best GFLOPs: 25.6996
2024-04-30 19:43:22 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1] Trial #184: GFLOPs: 18.1508. Time: 339.3434 us. Best GFLOPs: 25.6996
2024-04-30 19:43:22 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1] Trial #185: GFLOPs: 17.0247. Time: 361.7904 us. Best GFLOPs: 25.6996
2024-04-30 19:43:22 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1] Trial #186: GFLOPs: 17.5280. Time: 351.4012 us. Best GFLOPs: 25.6996
2024-04-30 19:43:22 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1] Trial #187: GFLOPs: 17.7747. Time: 346.5248 us. Best GFLOPs: 25.6996
2024-04-30 19:43:22 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1] Trial #188: GFLOPs: 20.3375. Time: 302.8576 us. Best GFLOPs: 25.6996
2024-04-30 19:43:22 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1] Trial #189: GFLOPs: 16.7316. Time: 368.1284 us. Best GFLOPs: 25.6996
2024-04-30 19:43:22 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1] Trial #190: GFLOPs: 9.5397. Time: 645.6568 us. Best GFLOPs: 25.6996
2024-04-30 19:43:22 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1] Trial #191: GFLOPs: 10.8880. Time: 565.7042 us. Best GFLOPs: 25.6996
2024-04-30 19:43:22 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1] Trial #192: GFLOPs: 20.3613. Time: 302.5036 us. Best GFLOPs: 25.6996
2024-04-30 19:43:22 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-30 19:43:23 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-30 19:43:30 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xe85e7a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x69d7868)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x14d13aa8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x241d5ed8)]: 0 failure(s)
2024-04-30 19:43:30 [INFO] [evolutionary_search.cc:723] Sampled 410 candidate(s)
2024-04-30 19:43:45 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xe85e7a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x69d7868)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x14d13aa8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x241d5ed8)]: 0 failure(s)
2024-04-30 19:44:00 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xe85e7a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x69d7868)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x14d13aa8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x241d5ed8)]: 0 failure(s)
2024-04-30 19:44:15 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xe85e7a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x69d7868)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x14d13aa8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x241d5ed8)]: 0 failure(s)
2024-04-30 19:44:31 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xe85e7a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x69d7868)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x14d13aa8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x241d5ed8)]: 0 failure(s)
2024-04-30 19:44:40 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.2069  1.2041  1.2017  1.1991  1.1801  1.1751  1.0533  1.0294  1.0216  1.0075  0.9978  0.9968  0.9968  0.9918  0.9884  0.9876
[17 : 32]:	0.9875  0.9870  0.9870  0.9843  0.9813  0.9764  0.9611  0.9555  0.9552  0.9552  0.9546  0.9532  0.9516  0.9495  0.9454  0.9454
[33 : 48]:	0.9454  0.9447  0.9440  0.9438  0.9434  0.9434  0.9434  0.9423  0.9409  0.9407  0.9405  0.9398  0.9390  0.9370  0.9364  0.9339
[49 : 64]:	0.9338  0.9323  0.9312  0.9290  0.9290  0.9290  0.9290  0.9275  0.9274  0.9269  0.9261  0.9253  0.9252  0.9246  0.9240  0.9240
2024-04-30 19:44:40 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-30 19:44:41 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-30 19:46:02 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1] Trial #193: GFLOPs: 11.4568. Time: 537.6153 us. Best GFLOPs: 25.6996
2024-04-30 19:46:02 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1] Trial #194: GFLOPs: 11.2462. Time: 547.6858 us. Best GFLOPs: 25.6996
2024-04-30 19:46:02 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1] Trial #195: GFLOPs: 10.9328. Time: 563.3845 us. Best GFLOPs: 25.6996
2024-04-30 19:46:02 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1] Trial #196: GFLOPs: 6.3134. Time: 975.6058 us. Best GFLOPs: 25.6996
2024-04-30 19:46:02 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1] Trial #197: GFLOPs: 4.9483. Time: 1244.7368 us. Best GFLOPs: 25.6996
2024-04-30 19:46:02 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1] Trial #198: GFLOPs: 3.8613. Time: 1595.1377 us. Best GFLOPs: 25.6996
2024-04-30 19:46:02 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1] Trial #199: GFLOPs: 17.4024. Time: 353.9380 us. Best GFLOPs: 25.6996
2024-04-30 19:46:02 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1] Trial #200: GFLOPs: 20.3071. Time: 303.3108 us. Best GFLOPs: 25.6996
2024-04-30 19:46:02 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1] Trial #201: GFLOPs: 17.2890. Time: 356.2594 us. Best GFLOPs: 25.6996
2024-04-30 19:46:02 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1] Trial #202: GFLOPs: 22.9420. Time: 268.4757 us. Best GFLOPs: 25.6996
2024-04-30 19:46:02 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1] Trial #203: GFLOPs: 18.8213. Time: 327.2549 us. Best GFLOPs: 25.6996
2024-04-30 19:46:02 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1] Trial #204: GFLOPs: 15.9600. Time: 385.9248 us. Best GFLOPs: 25.6996
2024-04-30 19:46:02 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1] Trial #205: GFLOPs: 16.7734. Time: 367.2091 us. Best GFLOPs: 25.6996
2024-04-30 19:46:02 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1] Trial #206: GFLOPs: 20.8369. Time: 295.5989 us. Best GFLOPs: 25.6996
2024-04-30 19:46:02 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1] Trial #207: GFLOPs: 21.1257. Time: 291.5570 us. Best GFLOPs: 25.6996
2024-04-30 19:46:02 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1] Trial #208: GFLOPs: 18.3529. Time: 335.6066 us. Best GFLOPs: 25.6996
2024-04-30 19:46:02 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1] Trial #209: GFLOPs: 18.3151. Time: 336.2993 us. Best GFLOPs: 25.6996
2024-04-30 19:46:02 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1] Trial #210: GFLOPs: 20.0236. Time: 307.6052 us. Best GFLOPs: 25.6996
2024-04-30 19:46:02 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1] Trial #211: GFLOPs: 20.4090. Time: 301.7969 us. Best GFLOPs: 25.6996
2024-04-30 19:46:02 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1] Trial #212: GFLOPs: 21.8138. Time: 282.3612 us. Best GFLOPs: 25.6996
2024-04-30 19:46:02 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1] Trial #213: GFLOPs: 21.7450. Time: 283.2536 us. Best GFLOPs: 25.6996
2024-04-30 19:46:02 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1] Trial #214: GFLOPs: 21.4180. Time: 287.5781 us. Best GFLOPs: 25.6996
2024-04-30 19:46:02 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1] Trial #215: GFLOPs: 19.7077. Time: 312.5350 us. Best GFLOPs: 25.6996
2024-04-30 19:46:02 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1] Trial #216: GFLOPs: 20.7908. Time: 296.2548 us. Best GFLOPs: 25.6996
2024-04-30 19:46:02 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1] Trial #217: GFLOPs: 22.5792. Time: 272.7895 us. Best GFLOPs: 25.6996
2024-04-30 19:46:02 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1] Trial #218: GFLOPs: 20.8204. Time: 295.8336 us. Best GFLOPs: 25.6996
2024-04-30 19:46:02 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1] Trial #219: GFLOPs: 20.9678. Time: 293.7528 us. Best GFLOPs: 25.6996
2024-04-30 19:46:02 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1] Trial #220: GFLOPs: 14.4468. Time: 426.3466 us. Best GFLOPs: 25.6996
2024-04-30 19:46:02 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1] Trial #221: GFLOPs: 16.7589. Time: 367.5274 us. Best GFLOPs: 25.6996
2024-04-30 19:46:02 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1] Trial #222: GFLOPs: 19.2347. Time: 320.2214 us. Best GFLOPs: 25.6996
2024-04-30 19:46:02 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1] Trial #223: GFLOPs: 21.4244. Time: 287.4930 us. Best GFLOPs: 25.6996
2024-04-30 19:46:02 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1] Trial #224: GFLOPs: 21.7045. Time: 283.7824 us. Best GFLOPs: 25.6996
2024-04-30 19:46:02 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1] Trial #225: GFLOPs: 22.8146. Time: 269.9739 us. Best GFLOPs: 25.6996
2024-04-30 19:46:02 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1] Trial #226: GFLOPs: 21.3311. Time: 288.7496 us. Best GFLOPs: 25.6996
2024-04-30 19:46:02 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1] Trial #227: GFLOPs: 22.9865. Time: 267.9557 us. Best GFLOPs: 25.6996
2024-04-30 19:46:02 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1] Trial #228: GFLOPs: 15.0844. Time: 408.3276 us. Best GFLOPs: 25.6996
2024-04-30 19:46:02 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1] Trial #229: GFLOPs: 18.9873. Time: 324.3945 us. Best GFLOPs: 25.6996
2024-04-30 19:46:02 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1] Trial #230: GFLOPs: 20.6975. Time: 297.5889 us. Best GFLOPs: 25.6996
2024-04-30 19:46:02 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1] Trial #231: GFLOPs: 21.5270. Time: 286.1224 us. Best GFLOPs: 25.6996
2024-04-30 19:46:02 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1] Trial #232: GFLOPs: 22.6643. Time: 271.7643 us. Best GFLOPs: 25.6996
2024-04-30 19:46:02 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1] Trial #233: GFLOPs: 20.2961. Time: 303.4754 us. Best GFLOPs: 25.6996
2024-04-30 19:46:02 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1] Trial #234: GFLOPs: 20.1398. Time: 305.8299 us. Best GFLOPs: 25.6996
2024-04-30 19:46:02 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1] Trial #235: GFLOPs: 21.1249. Time: 291.5683 us. Best GFLOPs: 25.6996
2024-04-30 19:46:02 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1] Trial #236: GFLOPs: 17.7099. Time: 347.7923 us. Best GFLOPs: 25.6996
2024-04-30 19:46:02 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1] Trial #237: GFLOPs: 18.4706. Time: 333.4686 us. Best GFLOPs: 25.6996
2024-04-30 19:46:02 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1] Trial #238: GFLOPs: 17.7723. Time: 346.5699 us. Best GFLOPs: 25.6996
2024-04-30 19:46:02 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1] Trial #239: GFLOPs: 17.8731. Time: 344.6165 us. Best GFLOPs: 25.6996
2024-04-30 19:46:02 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1] Trial #240: GFLOPs: 18.7034. Time: 329.3185 us. Best GFLOPs: 25.6996
2024-04-30 19:46:02 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1] Trial #241: GFLOPs: 17.9299. Time: 343.5248 us. Best GFLOPs: 25.6996
2024-04-30 19:46:02 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1] Trial #242: GFLOPs: 20.9766. Time: 293.6296 us. Best GFLOPs: 25.6996
2024-04-30 19:46:02 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1] Trial #243: GFLOPs: 17.9543. Time: 343.0581 us. Best GFLOPs: 25.6996
2024-04-30 19:46:02 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1] Trial #244: GFLOPs: 14.8572. Time: 414.5718 us. Best GFLOPs: 25.6996
2024-04-30 19:46:02 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1] Trial #245: GFLOPs: 18.7692. Time: 328.1638 us. Best GFLOPs: 25.6996
2024-04-30 19:46:02 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1] Trial #246: GFLOPs: 16.6528. Time: 369.8695 us. Best GFLOPs: 25.6996
2024-04-30 19:46:02 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1] Trial #247: GFLOPs: 20.0548. Time: 307.1259 us. Best GFLOPs: 25.6996
2024-04-30 19:46:02 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1] Trial #248: GFLOPs: 20.7429. Time: 296.9385 us. Best GFLOPs: 25.6996
2024-04-30 19:46:02 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1] Trial #249: GFLOPs: 15.3440. Time: 401.4176 us. Best GFLOPs: 25.6996
2024-04-30 19:46:02 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1] Trial #250: GFLOPs: 18.9345. Time: 325.2976 us. Best GFLOPs: 25.6996
2024-04-30 19:46:02 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1] Trial #251: GFLOPs: 21.1354. Time: 291.4238 us. Best GFLOPs: 25.6996
2024-04-30 19:46:02 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1] Trial #252: GFLOPs: 21.9456. Time: 280.6650 us. Best GFLOPs: 25.6996
2024-04-30 19:46:02 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1] Trial #253: GFLOPs: 21.3202. Time: 288.8973 us. Best GFLOPs: 25.6996
2024-04-30 19:46:02 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1] Trial #254: GFLOPs: 14.6931. Time: 419.2023 us. Best GFLOPs: 25.6996
2024-04-30 19:46:02 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1] Trial #255: GFLOPs: 10.4812. Time: 587.6600 us. Best GFLOPs: 25.6996
2024-04-30 19:46:02 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu_1] Trial #256: GFLOPs: 21.1754. Time: 290.8727 us. Best GFLOPs: 25.6996
