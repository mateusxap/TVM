2024-04-30 19:06:06 [INFO] [task_scheduler.cc:160] Initializing Task #15: "fused_nn_conv2d_add_multiply_add_add_nn_relu_1"
2024-04-30 19:06:06 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(8), T.int64(8), T.int64(64)), "float32"), p1: T.Buffer((T.int64(1), T.int64(1), T.int64(64), T.int64(256)), "float32"), p2: T.Buffer((T.int64(1), T.int64(1), T.int64(1), T.int64(256)), "float32"), p3: T.Buffer((T.int64(1), T.int64(1), T.int64(1), T.int64(256)), "float32"), p4: T.Buffer((T.int64(1), T.int64(1), T.int64(1), T.int64(256)), "float32"), p5: T.Buffer((T.int64(1), T.int64(8), T.int64(8), T.int64(256)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(8), T.int64(8), T.int64(256)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        pad_temp = T.alloc_buffer((T.int64(1), T.int64(8), T.int64(8), T.int64(64)))
        conv2d_nhwc = T.alloc_buffer((T.int64(1), T.int64(8), T.int64(8), T.int64(256)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(8), T.int64(8), T.int64(256)))
        T_multiply = T.alloc_buffer((T.int64(1), T.int64(8), T.int64(8), T.int64(256)))
        T_add_1 = T.alloc_buffer((T.int64(1), T.int64(8), T.int64(8), T.int64(256)))
        T_add_2 = T.alloc_buffer((T.int64(1), T.int64(8), T.int64(8), T.int64(256)))
        for i0, i1, i2, i3 in T.grid(T.int64(1), T.int64(8), T.int64(8), T.int64(64)):
            with T.block("pad_temp"):
                v_i0, v_i1, v_i2, v_i3 = T.axis.remap("SSSS", [i0, i1, i2, i3])
                T.reads(p0[v_i0, v_i1, v_i2, v_i3])
                T.writes(pad_temp[v_i0, v_i1, v_i2, v_i3])
                pad_temp[v_i0, v_i1, v_i2, v_i3] = p0[v_i0, v_i1, v_i2, v_i3]
        for nn, yy, xx, ff, ry, rx, rc in T.grid(T.int64(1), T.int64(8), T.int64(8), T.int64(256), T.int64(1), T.int64(1), T.int64(64)):
            with T.block("conv2d_nhwc"):
                v_nn, v_yy, v_xx, v_ff, v_ry, v_rx, v_rc = T.axis.remap("SSSSRRR", [nn, yy, xx, ff, ry, rx, rc])
                T.reads(pad_temp[v_nn, v_yy + v_ry, v_xx + v_rx, v_rc], p1[v_ry, v_rx, v_rc, v_ff])
                T.writes(conv2d_nhwc[v_nn, v_yy, v_xx, v_ff])
                with T.init():
                    conv2d_nhwc[v_nn, v_yy, v_xx, v_ff] = T.float32(0)
                conv2d_nhwc[v_nn, v_yy, v_xx, v_ff] = conv2d_nhwc[v_nn, v_yy, v_xx, v_ff] + pad_temp[v_nn, v_yy + v_ry, v_xx + v_rx, v_rc] * p1[v_ry, v_rx, v_rc, v_ff]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(8), T.int64(8), T.int64(256)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(conv2d_nhwc[v_ax0, v_ax1, v_ax2, v_ax3], p2[v_ax0, T.int64(0), T.int64(0), v_ax3])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3] = conv2d_nhwc[v_ax0, v_ax1, v_ax2, v_ax3] + p2[v_ax0, T.int64(0), T.int64(0), v_ax3]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(8), T.int64(8), T.int64(256)):
            with T.block("T_multiply"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3], p3[v_ax0, T.int64(0), T.int64(0), v_ax3])
                T.writes(T_multiply[v_ax0, v_ax1, v_ax2, v_ax3])
                T_multiply[v_ax0, v_ax1, v_ax2, v_ax3] = T_add[v_ax0, v_ax1, v_ax2, v_ax3] * p3[v_ax0, T.int64(0), T.int64(0), v_ax3]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(8), T.int64(8), T.int64(256)):
            with T.block("T_add_1"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(T_multiply[v_ax0, v_ax1, v_ax2, v_ax3], p4[v_ax0, T.int64(0), T.int64(0), v_ax3])
                T.writes(T_add_1[v_ax0, v_ax1, v_ax2, v_ax3])
                T_add_1[v_ax0, v_ax1, v_ax2, v_ax3] = T_multiply[v_ax0, v_ax1, v_ax2, v_ax3] + p4[v_ax0, T.int64(0), T.int64(0), v_ax3]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(8), T.int64(8), T.int64(256)):
            with T.block("T_add_2"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(p5[v_ax0, v_ax1, v_ax2, v_ax3], T_add_1[v_ax0, v_ax1, v_ax2, v_ax3])
                T.writes(T_add_2[v_ax0, v_ax1, v_ax2, v_ax3])
                T_add_2[v_ax0, v_ax1, v_ax2, v_ax3] = p5[v_ax0, v_ax1, v_ax2, v_ax3] + T_add_1[v_ax0, v_ax1, v_ax2, v_ax3]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(8), T.int64(8), T.int64(256)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(T_add_2[v_ax0, v_ax1, v_ax2, v_ax3])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(T_add_2[v_ax0, v_ax1, v_ax2, v_ax3], T.float32(0))
2024-04-30 19:06:06 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-30 19:06:06 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(8), T.int64(8), T.int64(64)), "float32"), p1: T.Buffer((T.int64(1), T.int64(1), T.int64(64), T.int64(256)), "float32"), p2: T.Buffer((T.int64(1), T.int64(1), T.int64(1), T.int64(256)), "float32"), p3: T.Buffer((T.int64(1), T.int64(1), T.int64(1), T.int64(256)), "float32"), p4: T.Buffer((T.int64(1), T.int64(1), T.int64(1), T.int64(256)), "float32"), p5: T.Buffer((T.int64(1), T.int64(8), T.int64(8), T.int64(256)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(8), T.int64(8), T.int64(256)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 96, "meta_schedule.unroll_explicit": 16, "meta_schedule.vectorize": 64})
            conv2d_nhwc = T.alloc_buffer((T.int64(1), T.int64(8), T.int64(8), T.int64(256)))
            for nn_0, yy_0, xx_0, ff_0, nn_1, yy_1, xx_1, ff_1, ry_0, rx_0, rc_0, nn_2, yy_2, xx_2, ff_2, ry_1, rx_1, rc_1, nn_3, yy_3, xx_3, ff_3 in T.grid(T.int64(1), T.int64(4), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(64), T.int64(1), T.int64(1), T.int64(8), T.int64(8)):
                with T.block("conv2d_nhwc"):
                    v_nn = T.axis.spatial(T.int64(1), nn_0 + nn_1 + nn_2 + nn_3)
                    v_yy = T.axis.spatial(T.int64(8), yy_0 * T.int64(2) + yy_1 * T.int64(2) + yy_2 + yy_3)
                    v_xx = T.axis.spatial(T.int64(8), xx_0 * T.int64(8) + xx_1 * T.int64(8) + xx_2 * T.int64(8) + xx_3)
                    v_ff = T.axis.spatial(T.int64(256), ff_0 * T.int64(64) + ff_1 * T.int64(16) + ff_2 * T.int64(8) + ff_3)
                    v_ry = T.axis.reduce(T.int64(1), ry_0 + ry_1)
                    v_rx = T.axis.reduce(T.int64(1), rx_0 + rx_1)
                    v_rc = T.axis.reduce(T.int64(64), rc_0 * T.int64(64) + rc_1)
                    T.reads(p0[v_nn, v_yy + v_ry, v_xx + v_rx, v_rc], p1[v_ry, v_rx, v_rc, v_ff])
                    T.writes(conv2d_nhwc[v_nn, v_yy, v_xx, v_ff])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    with T.init():
                        conv2d_nhwc[v_nn, v_yy, v_xx, v_ff] = T.float32(0)
                    conv2d_nhwc[v_nn, v_yy, v_xx, v_ff] = conv2d_nhwc[v_nn, v_yy, v_xx, v_ff] + p0[v_nn, v_yy + v_ry, v_xx + v_rx, v_rc] * p1[v_ry, v_rx, v_rc, v_ff]
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(8), T.int64(8), T.int64(256)):
                with T.block("T_relu"):
                    v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                    T.reads(p5[v_ax0, v_ax1, v_ax2, v_ax3], conv2d_nhwc[v_ax0, v_ax1, v_ax2, v_ax3], p2[v_ax0, T.int64(0), T.int64(0), v_ax3], p3[v_ax0, T.int64(0), T.int64(0), v_ax3], p4[v_ax0, T.int64(0), T.int64(0), v_ax3])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(p5[v_ax0, v_ax1, v_ax2, v_ax3] + ((conv2d_nhwc[v_ax0, v_ax1, v_ax2, v_ax3] + p2[v_ax0, T.int64(0), T.int64(0), v_ax3]) * p3[v_ax0, T.int64(0), T.int64(0), v_ax3] + p4[v_ax0, T.int64(0), T.int64(0), v_ax3]), T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nhwc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_multiply", func_name="main")
b4 = sch.get_block(name="T_add_1", func_name="main")
b5 = sch.get_block(name="T_add_2", func_name="main")
b6 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b5)
sch.compute_inline(block=b4)
sch.compute_inline(block=b3)
sch.compute_inline(block=b2)
sch.compute_inline(block=b0)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l7, l8, l9, l10, l11, l12, l13 = sch.get_loops(block=b1)
v14, v15, v16, v17 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l18, l19, l20, l21 = sch.split(loop=l7, factors=[v14, v15, v16, v17], preserve_unit_iters=True, disable_predication=False)
v22, v23, v24, v25 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[4, 1, 2, 1])
l26, l27, l28, l29 = sch.split(loop=l8, factors=[v22, v23, v24, v25], preserve_unit_iters=True, disable_predication=False)
v30, v31, v32, v33 = sch.sample_perfect_tile(loop=l9, n=4, max_innermost_factor=64, decision=[1, 1, 1, 8])
l34, l35, l36, l37 = sch.split(loop=l9, factors=[v30, v31, v32, v33], preserve_unit_iters=True, disable_predication=False)
v38, v39, v40, v41 = sch.sample_perfect_tile(loop=l10, n=4, max_innermost_factor=64, decision=[4, 4, 2, 8])
l42, l43, l44, l45 = sch.split(loop=l10, factors=[v38, v39, v40, v41], preserve_unit_iters=True, disable_predication=False)
v46, v47 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 1])
l48, l49 = sch.split(loop=l11, factors=[v46, v47], preserve_unit_iters=True, disable_predication=False)
v50, v51 = sch.sample_perfect_tile(loop=l12, n=2, max_innermost_factor=64, decision=[1, 1])
l52, l53 = sch.split(loop=l12, factors=[v50, v51], preserve_unit_iters=True, disable_predication=False)
v54, v55 = sch.sample_perfect_tile(loop=l13, n=2, max_innermost_factor=64, decision=[1, 64])
l56, l57 = sch.split(loop=l13, factors=[v54, v55], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l18, l26, l34, l42, l19, l27, l35, l43, l48, l52, l56, l20, l28, l36, l44, l49, l53, l57, l21, l29, l37, l45)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.parallel", ann_val=96)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.vectorize", ann_val=64)
v58 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.unroll_explicit", ann_val=v58)
2024-04-30 19:06:06 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(8), T.int64(8), T.int64(64)), "float32"), p1: T.Buffer((T.int64(1), T.int64(1), T.int64(64), T.int64(256)), "float32"), p2: T.Buffer((T.int64(1), T.int64(1), T.int64(1), T.int64(256)), "float32"), p3: T.Buffer((T.int64(1), T.int64(1), T.int64(1), T.int64(256)), "float32"), p4: T.Buffer((T.int64(1), T.int64(1), T.int64(1), T.int64(256)), "float32"), p5: T.Buffer((T.int64(1), T.int64(8), T.int64(8), T.int64(256)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(8), T.int64(8), T.int64(256)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 96, "meta_schedule.unroll_explicit": 0, "meta_schedule.vectorize": 64})
            conv2d_nhwc = T.alloc_buffer((T.int64(1), T.int64(8), T.int64(8), T.int64(256)))
            for nn_0, yy_0, xx_0, ff_0, nn_1, yy_1, xx_1, ff_1 in T.grid(T.int64(1), T.int64(4), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(4)):
                for ry_0, rx_0, rc_0, nn_2, yy_2, xx_2, ff_2, ry_1, rx_1, rc_1, nn_3, yy_3, xx_3, ff_3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(64), T.int64(1), T.int64(1), T.int64(8), T.int64(8)):
                    with T.block("conv2d_nhwc"):
                        v_nn = T.axis.spatial(T.int64(1), nn_0 + nn_1 + nn_2 + nn_3)
                        v_yy = T.axis.spatial(T.int64(8), yy_0 * T.int64(2) + yy_1 * T.int64(2) + yy_2 + yy_3)
                        v_xx = T.axis.spatial(T.int64(8), xx_0 * T.int64(8) + xx_1 * T.int64(8) + xx_2 * T.int64(8) + xx_3)
                        v_ff = T.axis.spatial(T.int64(256), ff_0 * T.int64(64) + ff_1 * T.int64(16) + ff_2 * T.int64(8) + ff_3)
                        v_ry = T.axis.reduce(T.int64(1), ry_0 + ry_1)
                        v_rx = T.axis.reduce(T.int64(1), rx_0 + rx_1)
                        v_rc = T.axis.reduce(T.int64(64), rc_0 * T.int64(64) + rc_1)
                        T.reads(p0[v_nn, v_yy + v_ry, v_xx + v_rx, v_rc], p1[v_ry, v_rx, v_rc, v_ff])
                        T.writes(conv2d_nhwc[v_nn, v_yy, v_xx, v_ff])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_nhwc[v_nn, v_yy, v_xx, v_ff] = T.float32(0)
                        conv2d_nhwc[v_nn, v_yy, v_xx, v_ff] = conv2d_nhwc[v_nn, v_yy, v_xx, v_ff] + p0[v_nn, v_yy + v_ry, v_xx + v_rx, v_rc] * p1[v_ry, v_rx, v_rc, v_ff]
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(8), T.int64(16)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(8), yy_0 * T.int64(2) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(8), ax2)
                        v_ax3 = T.axis.spatial(T.int64(256), ff_0 * T.int64(64) + ff_1 * T.int64(16) + ax3)
                        T.reads(p5[v_ax0, v_ax1, v_ax2, v_ax3], conv2d_nhwc[v_ax0, v_ax1, v_ax2, v_ax3], p2[v_ax0, T.int64(0), T.int64(0), v_ax3], p3[v_ax0, T.int64(0), T.int64(0), v_ax3], p4[v_ax0, T.int64(0), T.int64(0), v_ax3])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(p5[v_ax0, v_ax1, v_ax2, v_ax3] + ((conv2d_nhwc[v_ax0, v_ax1, v_ax2, v_ax3] + p2[v_ax0, T.int64(0), T.int64(0), v_ax3]) * p3[v_ax0, T.int64(0), T.int64(0), v_ax3] + p4[v_ax0, T.int64(0), T.int64(0), v_ax3]), T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nhwc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_multiply", func_name="main")
b4 = sch.get_block(name="T_add_1", func_name="main")
b5 = sch.get_block(name="T_add_2", func_name="main")
b6 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b5)
sch.compute_inline(block=b4)
sch.compute_inline(block=b3)
sch.compute_inline(block=b2)
sch.compute_inline(block=b0)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l7, l8, l9, l10, l11, l12, l13 = sch.get_loops(block=b1)
v14, v15, v16, v17 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l18, l19, l20, l21 = sch.split(loop=l7, factors=[v14, v15, v16, v17], preserve_unit_iters=True, disable_predication=False)
v22, v23, v24, v25 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[4, 1, 2, 1])
l26, l27, l28, l29 = sch.split(loop=l8, factors=[v22, v23, v24, v25], preserve_unit_iters=True, disable_predication=False)
v30, v31, v32, v33 = sch.sample_perfect_tile(loop=l9, n=4, max_innermost_factor=64, decision=[1, 1, 1, 8])
l34, l35, l36, l37 = sch.split(loop=l9, factors=[v30, v31, v32, v33], preserve_unit_iters=True, disable_predication=False)
v38, v39, v40, v41 = sch.sample_perfect_tile(loop=l10, n=4, max_innermost_factor=64, decision=[4, 4, 2, 8])
l42, l43, l44, l45 = sch.split(loop=l10, factors=[v38, v39, v40, v41], preserve_unit_iters=True, disable_predication=False)
v46, v47 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 1])
l48, l49 = sch.split(loop=l11, factors=[v46, v47], preserve_unit_iters=True, disable_predication=False)
v50, v51 = sch.sample_perfect_tile(loop=l12, n=2, max_innermost_factor=64, decision=[1, 1])
l52, l53 = sch.split(loop=l12, factors=[v50, v51], preserve_unit_iters=True, disable_predication=False)
v54, v55 = sch.sample_perfect_tile(loop=l13, n=2, max_innermost_factor=64, decision=[1, 64])
l56, l57 = sch.split(loop=l13, factors=[v54, v55], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l18, l26, l34, l42, l19, l27, l35, l43, l48, l52, l56, l20, l28, l36, l44, l49, l53, l57, l21, l29, l37, l45)
b58, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b58, loop=l43, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.parallel", ann_val=96)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.vectorize", ann_val=64)
v59 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.unroll_explicit", ann_val=v59)
2024-04-30 19:06:06 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(8), T.int64(8), T.int64(64)), "float32"), p1: T.Buffer((T.int64(1), T.int64(1), T.int64(64), T.int64(256)), "float32"), p2: T.Buffer((T.int64(1), T.int64(1), T.int64(1), T.int64(256)), "float32"), p3: T.Buffer((T.int64(1), T.int64(1), T.int64(1), T.int64(256)), "float32"), p4: T.Buffer((T.int64(1), T.int64(1), T.int64(1), T.int64(256)), "float32"), p5: T.Buffer((T.int64(1), T.int64(8), T.int64(8), T.int64(256)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(8), T.int64(8), T.int64(256)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 96, "meta_schedule.unroll_explicit": 0, "meta_schedule.vectorize": 64})
            conv2d_nhwc = T.alloc_buffer((T.int64(1), T.int64(8), T.int64(8), T.int64(256)))
            for nn_0, yy_0, xx_0, ff_0 in T.grid(T.int64(1), T.int64(4), T.int64(1), T.int64(4)):
                for nn_1, yy_1, xx_1, ff_1, ry_0, rx_0, rc_0, nn_2, yy_2, xx_2, ff_2, ry_1, rx_1, rc_1, nn_3, yy_3, xx_3, ff_3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(64), T.int64(1), T.int64(1), T.int64(8), T.int64(8)):
                    with T.block("conv2d_nhwc"):
                        v_nn = T.axis.spatial(T.int64(1), nn_0 + nn_1 + nn_2 + nn_3)
                        v_yy = T.axis.spatial(T.int64(8), yy_0 * T.int64(2) + yy_1 * T.int64(2) + yy_2 + yy_3)
                        v_xx = T.axis.spatial(T.int64(8), xx_0 * T.int64(8) + xx_1 * T.int64(8) + xx_2 * T.int64(8) + xx_3)
                        v_ff = T.axis.spatial(T.int64(256), ff_0 * T.int64(64) + ff_1 * T.int64(16) + ff_2 * T.int64(8) + ff_3)
                        v_ry = T.axis.reduce(T.int64(1), ry_0 + ry_1)
                        v_rx = T.axis.reduce(T.int64(1), rx_0 + rx_1)
                        v_rc = T.axis.reduce(T.int64(64), rc_0 * T.int64(64) + rc_1)
                        T.reads(p0[v_nn, v_yy + v_ry, v_xx + v_rx, v_rc], p1[v_ry, v_rx, v_rc, v_ff])
                        T.writes(conv2d_nhwc[v_nn, v_yy, v_xx, v_ff])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_nhwc[v_nn, v_yy, v_xx, v_ff] = T.float32(0)
                        conv2d_nhwc[v_nn, v_yy, v_xx, v_ff] = conv2d_nhwc[v_nn, v_yy, v_xx, v_ff] + p0[v_nn, v_yy + v_ry, v_xx + v_rx, v_rc] * p1[v_ry, v_rx, v_rc, v_ff]
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(8), T.int64(64)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(8), yy_0 * T.int64(2) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(8), ax2)
                        v_ax3 = T.axis.spatial(T.int64(256), ff_0 * T.int64(64) + ax3)
                        T.reads(p5[v_ax0, v_ax1, v_ax2, v_ax3], conv2d_nhwc[v_ax0, v_ax1, v_ax2, v_ax3], p2[v_ax0, T.int64(0), T.int64(0), v_ax3], p3[v_ax0, T.int64(0), T.int64(0), v_ax3], p4[v_ax0, T.int64(0), T.int64(0), v_ax3])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(p5[v_ax0, v_ax1, v_ax2, v_ax3] + ((conv2d_nhwc[v_ax0, v_ax1, v_ax2, v_ax3] + p2[v_ax0, T.int64(0), T.int64(0), v_ax3]) * p3[v_ax0, T.int64(0), T.int64(0), v_ax3] + p4[v_ax0, T.int64(0), T.int64(0), v_ax3]), T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nhwc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_multiply", func_name="main")
b4 = sch.get_block(name="T_add_1", func_name="main")
b5 = sch.get_block(name="T_add_2", func_name="main")
b6 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b5)
sch.compute_inline(block=b4)
sch.compute_inline(block=b3)
sch.compute_inline(block=b2)
sch.compute_inline(block=b0)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l7, l8, l9, l10, l11, l12, l13 = sch.get_loops(block=b1)
v14, v15, v16, v17 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l18, l19, l20, l21 = sch.split(loop=l7, factors=[v14, v15, v16, v17], preserve_unit_iters=True, disable_predication=False)
v22, v23, v24, v25 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[4, 1, 2, 1])
l26, l27, l28, l29 = sch.split(loop=l8, factors=[v22, v23, v24, v25], preserve_unit_iters=True, disable_predication=False)
v30, v31, v32, v33 = sch.sample_perfect_tile(loop=l9, n=4, max_innermost_factor=64, decision=[1, 1, 1, 8])
l34, l35, l36, l37 = sch.split(loop=l9, factors=[v30, v31, v32, v33], preserve_unit_iters=True, disable_predication=False)
v38, v39, v40, v41 = sch.sample_perfect_tile(loop=l10, n=4, max_innermost_factor=64, decision=[4, 4, 2, 8])
l42, l43, l44, l45 = sch.split(loop=l10, factors=[v38, v39, v40, v41], preserve_unit_iters=True, disable_predication=False)
v46, v47 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 1])
l48, l49 = sch.split(loop=l11, factors=[v46, v47], preserve_unit_iters=True, disable_predication=False)
v50, v51 = sch.sample_perfect_tile(loop=l12, n=2, max_innermost_factor=64, decision=[1, 1])
l52, l53 = sch.split(loop=l12, factors=[v50, v51], preserve_unit_iters=True, disable_predication=False)
v54, v55 = sch.sample_perfect_tile(loop=l13, n=2, max_innermost_factor=64, decision=[1, 64])
l56, l57 = sch.split(loop=l13, factors=[v54, v55], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l18, l26, l34, l42, l19, l27, l35, l43, l48, l52, l56, l20, l28, l36, l44, l49, l53, l57, l21, l29, l37, l45)
b58, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b58, loop=l42, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.parallel", ann_val=96)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.vectorize", ann_val=64)
v59 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.unroll_explicit", ann_val=v59)
2024-04-30 19:13:54 [INFO] [task_scheduler.cc:160] Initializing Task #15: "fused_nn_conv2d_add_multiply_add_add_nn_relu_1"
2024-04-30 19:13:54 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(8), T.int64(8), T.int64(64)), "float32"), p1: T.Buffer((T.int64(1), T.int64(1), T.int64(64), T.int64(256)), "float32"), p2: T.Buffer((T.int64(1), T.int64(1), T.int64(1), T.int64(256)), "float32"), p3: T.Buffer((T.int64(1), T.int64(1), T.int64(1), T.int64(256)), "float32"), p4: T.Buffer((T.int64(1), T.int64(1), T.int64(1), T.int64(256)), "float32"), p5: T.Buffer((T.int64(1), T.int64(8), T.int64(8), T.int64(256)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(8), T.int64(8), T.int64(256)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        pad_temp = T.alloc_buffer((T.int64(1), T.int64(8), T.int64(8), T.int64(64)))
        conv2d_nhwc = T.alloc_buffer((T.int64(1), T.int64(8), T.int64(8), T.int64(256)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(8), T.int64(8), T.int64(256)))
        T_multiply = T.alloc_buffer((T.int64(1), T.int64(8), T.int64(8), T.int64(256)))
        T_add_1 = T.alloc_buffer((T.int64(1), T.int64(8), T.int64(8), T.int64(256)))
        T_add_2 = T.alloc_buffer((T.int64(1), T.int64(8), T.int64(8), T.int64(256)))
        for i0, i1, i2, i3 in T.grid(T.int64(1), T.int64(8), T.int64(8), T.int64(64)):
            with T.block("pad_temp"):
                v_i0, v_i1, v_i2, v_i3 = T.axis.remap("SSSS", [i0, i1, i2, i3])
                T.reads(p0[v_i0, v_i1, v_i2, v_i3])
                T.writes(pad_temp[v_i0, v_i1, v_i2, v_i3])
                pad_temp[v_i0, v_i1, v_i2, v_i3] = p0[v_i0, v_i1, v_i2, v_i3]
        for nn, yy, xx, ff, ry, rx, rc in T.grid(T.int64(1), T.int64(8), T.int64(8), T.int64(256), T.int64(1), T.int64(1), T.int64(64)):
            with T.block("conv2d_nhwc"):
                v_nn, v_yy, v_xx, v_ff, v_ry, v_rx, v_rc = T.axis.remap("SSSSRRR", [nn, yy, xx, ff, ry, rx, rc])
                T.reads(pad_temp[v_nn, v_yy + v_ry, v_xx + v_rx, v_rc], p1[v_ry, v_rx, v_rc, v_ff])
                T.writes(conv2d_nhwc[v_nn, v_yy, v_xx, v_ff])
                with T.init():
                    conv2d_nhwc[v_nn, v_yy, v_xx, v_ff] = T.float32(0)
                conv2d_nhwc[v_nn, v_yy, v_xx, v_ff] = conv2d_nhwc[v_nn, v_yy, v_xx, v_ff] + pad_temp[v_nn, v_yy + v_ry, v_xx + v_rx, v_rc] * p1[v_ry, v_rx, v_rc, v_ff]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(8), T.int64(8), T.int64(256)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(conv2d_nhwc[v_ax0, v_ax1, v_ax2, v_ax3], p2[v_ax0, T.int64(0), T.int64(0), v_ax3])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3] = conv2d_nhwc[v_ax0, v_ax1, v_ax2, v_ax3] + p2[v_ax0, T.int64(0), T.int64(0), v_ax3]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(8), T.int64(8), T.int64(256)):
            with T.block("T_multiply"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3], p3[v_ax0, T.int64(0), T.int64(0), v_ax3])
                T.writes(T_multiply[v_ax0, v_ax1, v_ax2, v_ax3])
                T_multiply[v_ax0, v_ax1, v_ax2, v_ax3] = T_add[v_ax0, v_ax1, v_ax2, v_ax3] * p3[v_ax0, T.int64(0), T.int64(0), v_ax3]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(8), T.int64(8), T.int64(256)):
            with T.block("T_add_1"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(T_multiply[v_ax0, v_ax1, v_ax2, v_ax3], p4[v_ax0, T.int64(0), T.int64(0), v_ax3])
                T.writes(T_add_1[v_ax0, v_ax1, v_ax2, v_ax3])
                T_add_1[v_ax0, v_ax1, v_ax2, v_ax3] = T_multiply[v_ax0, v_ax1, v_ax2, v_ax3] + p4[v_ax0, T.int64(0), T.int64(0), v_ax3]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(8), T.int64(8), T.int64(256)):
            with T.block("T_add_2"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(p5[v_ax0, v_ax1, v_ax2, v_ax3], T_add_1[v_ax0, v_ax1, v_ax2, v_ax3])
                T.writes(T_add_2[v_ax0, v_ax1, v_ax2, v_ax3])
                T_add_2[v_ax0, v_ax1, v_ax2, v_ax3] = p5[v_ax0, v_ax1, v_ax2, v_ax3] + T_add_1[v_ax0, v_ax1, v_ax2, v_ax3]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(8), T.int64(8), T.int64(256)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(T_add_2[v_ax0, v_ax1, v_ax2, v_ax3])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(T_add_2[v_ax0, v_ax1, v_ax2, v_ax3], T.float32(0))
2024-04-30 19:13:54 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-30 19:13:54 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(8), T.int64(8), T.int64(64)), "float32"), p1: T.Buffer((T.int64(1), T.int64(1), T.int64(64), T.int64(256)), "float32"), p2: T.Buffer((T.int64(1), T.int64(1), T.int64(1), T.int64(256)), "float32"), p3: T.Buffer((T.int64(1), T.int64(1), T.int64(1), T.int64(256)), "float32"), p4: T.Buffer((T.int64(1), T.int64(1), T.int64(1), T.int64(256)), "float32"), p5: T.Buffer((T.int64(1), T.int64(8), T.int64(8), T.int64(256)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(8), T.int64(8), T.int64(256)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 96, "meta_schedule.unroll_explicit": 16, "meta_schedule.vectorize": 64})
            conv2d_nhwc = T.alloc_buffer((T.int64(1), T.int64(8), T.int64(8), T.int64(256)))
            for nn_0, yy_0, xx_0, ff_0, nn_1, yy_1, xx_1, ff_1, ry_0, rx_0, rc_0, nn_2, yy_2, xx_2, ff_2, ry_1, rx_1, rc_1, nn_3, yy_3, xx_3, ff_3 in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(2), T.int64(2), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4), T.int64(4)):
                with T.block("conv2d_nhwc"):
                    v_nn = T.axis.spatial(T.int64(1), nn_0 + nn_1 + nn_2 + nn_3)
                    v_yy = T.axis.spatial(T.int64(8), yy_0 * T.int64(4) + yy_1 + yy_2 + yy_3)
                    v_xx = T.axis.spatial(T.int64(8), xx_0 * T.int64(8) + xx_1 * T.int64(4) + xx_2 * T.int64(4) + xx_3)
                    v_ff = T.axis.spatial(T.int64(256), ff_0 * T.int64(256) + ff_1 * T.int64(128) + ff_2 * T.int64(4) + ff_3)
                    v_ry = T.axis.reduce(T.int64(1), ry_0 + ry_1)
                    v_rx = T.axis.reduce(T.int64(1), rx_0 + rx_1)
                    v_rc = T.axis.reduce(T.int64(64), rc_0 * T.int64(32) + rc_1)
                    T.reads(p0[v_nn, v_yy + v_ry, v_xx + v_rx, v_rc], p1[v_ry, v_rx, v_rc, v_ff])
                    T.writes(conv2d_nhwc[v_nn, v_yy, v_xx, v_ff])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    with T.init():
                        conv2d_nhwc[v_nn, v_yy, v_xx, v_ff] = T.float32(0)
                    conv2d_nhwc[v_nn, v_yy, v_xx, v_ff] = conv2d_nhwc[v_nn, v_yy, v_xx, v_ff] + p0[v_nn, v_yy + v_ry, v_xx + v_rx, v_rc] * p1[v_ry, v_rx, v_rc, v_ff]
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(8), T.int64(8), T.int64(256)):
                with T.block("T_relu"):
                    v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                    T.reads(p5[v_ax0, v_ax1, v_ax2, v_ax3], conv2d_nhwc[v_ax0, v_ax1, v_ax2, v_ax3], p2[v_ax0, T.int64(0), T.int64(0), v_ax3], p3[v_ax0, T.int64(0), T.int64(0), v_ax3], p4[v_ax0, T.int64(0), T.int64(0), v_ax3])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(p5[v_ax0, v_ax1, v_ax2, v_ax3] + ((conv2d_nhwc[v_ax0, v_ax1, v_ax2, v_ax3] + p2[v_ax0, T.int64(0), T.int64(0), v_ax3]) * p3[v_ax0, T.int64(0), T.int64(0), v_ax3] + p4[v_ax0, T.int64(0), T.int64(0), v_ax3]), T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nhwc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_multiply", func_name="main")
b4 = sch.get_block(name="T_add_1", func_name="main")
b5 = sch.get_block(name="T_add_2", func_name="main")
b6 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b5)
sch.compute_inline(block=b4)
sch.compute_inline(block=b3)
sch.compute_inline(block=b2)
sch.compute_inline(block=b0)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l7, l8, l9, l10, l11, l12, l13 = sch.get_loops(block=b1)
v14, v15, v16, v17 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l18, l19, l20, l21 = sch.split(loop=l7, factors=[v14, v15, v16, v17], preserve_unit_iters=True, disable_predication=False)
v22, v23, v24, v25 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[2, 4, 1, 1])
l26, l27, l28, l29 = sch.split(loop=l8, factors=[v22, v23, v24, v25], preserve_unit_iters=True, disable_predication=False)
v30, v31, v32, v33 = sch.sample_perfect_tile(loop=l9, n=4, max_innermost_factor=64, decision=[1, 2, 1, 4])
l34, l35, l36, l37 = sch.split(loop=l9, factors=[v30, v31, v32, v33], preserve_unit_iters=True, disable_predication=False)
v38, v39, v40, v41 = sch.sample_perfect_tile(loop=l10, n=4, max_innermost_factor=64, decision=[1, 2, 32, 4])
l42, l43, l44, l45 = sch.split(loop=l10, factors=[v38, v39, v40, v41], preserve_unit_iters=True, disable_predication=False)
v46, v47 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 1])
l48, l49 = sch.split(loop=l11, factors=[v46, v47], preserve_unit_iters=True, disable_predication=False)
v50, v51 = sch.sample_perfect_tile(loop=l12, n=2, max_innermost_factor=64, decision=[1, 1])
l52, l53 = sch.split(loop=l12, factors=[v50, v51], preserve_unit_iters=True, disable_predication=False)
v54, v55 = sch.sample_perfect_tile(loop=l13, n=2, max_innermost_factor=64, decision=[2, 32])
l56, l57 = sch.split(loop=l13, factors=[v54, v55], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l18, l26, l34, l42, l19, l27, l35, l43, l48, l52, l56, l20, l28, l36, l44, l49, l53, l57, l21, l29, l37, l45)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.parallel", ann_val=96)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.vectorize", ann_val=64)
v58 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.unroll_explicit", ann_val=v58)
2024-04-30 19:13:54 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(8), T.int64(8), T.int64(64)), "float32"), p1: T.Buffer((T.int64(1), T.int64(1), T.int64(64), T.int64(256)), "float32"), p2: T.Buffer((T.int64(1), T.int64(1), T.int64(1), T.int64(256)), "float32"), p3: T.Buffer((T.int64(1), T.int64(1), T.int64(1), T.int64(256)), "float32"), p4: T.Buffer((T.int64(1), T.int64(1), T.int64(1), T.int64(256)), "float32"), p5: T.Buffer((T.int64(1), T.int64(8), T.int64(8), T.int64(256)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(8), T.int64(8), T.int64(256)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 96, "meta_schedule.unroll_explicit": 16, "meta_schedule.vectorize": 64})
            conv2d_nhwc = T.alloc_buffer((T.int64(1), T.int64(8), T.int64(8), T.int64(256)))
            for nn_0, yy_0, xx_0, ff_0, nn_1, yy_1, xx_1, ff_1 in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(2), T.int64(2)):
                for ry_0, rx_0, rc_0, nn_2, yy_2, xx_2, ff_2, ry_1, rx_1, rc_1, nn_3, yy_3, xx_3, ff_3 in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4), T.int64(4)):
                    with T.block("conv2d_nhwc"):
                        v_nn = T.axis.spatial(T.int64(1), nn_0 + nn_1 + nn_2 + nn_3)
                        v_yy = T.axis.spatial(T.int64(8), yy_0 * T.int64(4) + yy_1 + yy_2 + yy_3)
                        v_xx = T.axis.spatial(T.int64(8), xx_0 * T.int64(8) + xx_1 * T.int64(4) + xx_2 * T.int64(4) + xx_3)
                        v_ff = T.axis.spatial(T.int64(256), ff_0 * T.int64(256) + ff_1 * T.int64(128) + ff_2 * T.int64(4) + ff_3)
                        v_ry = T.axis.reduce(T.int64(1), ry_0 + ry_1)
                        v_rx = T.axis.reduce(T.int64(1), rx_0 + rx_1)
                        v_rc = T.axis.reduce(T.int64(64), rc_0 * T.int64(32) + rc_1)
                        T.reads(p0[v_nn, v_yy + v_ry, v_xx + v_rx, v_rc], p1[v_ry, v_rx, v_rc, v_ff])
                        T.writes(conv2d_nhwc[v_nn, v_yy, v_xx, v_ff])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_nhwc[v_nn, v_yy, v_xx, v_ff] = T.float32(0)
                        conv2d_nhwc[v_nn, v_yy, v_xx, v_ff] = conv2d_nhwc[v_nn, v_yy, v_xx, v_ff] + p0[v_nn, v_yy + v_ry, v_xx + v_rx, v_rc] * p1[v_ry, v_rx, v_rc, v_ff]
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(128)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(8), yy_0 * T.int64(4) + yy_1 + ax1)
                        v_ax2 = T.axis.spatial(T.int64(8), xx_1 * T.int64(4) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(256), ff_1 * T.int64(128) + ax3)
                        T.reads(p5[v_ax0, v_ax1, v_ax2, v_ax3], conv2d_nhwc[v_ax0, v_ax1, v_ax2, v_ax3], p2[v_ax0, T.int64(0), T.int64(0), v_ax3], p3[v_ax0, T.int64(0), T.int64(0), v_ax3], p4[v_ax0, T.int64(0), T.int64(0), v_ax3])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(p5[v_ax0, v_ax1, v_ax2, v_ax3] + ((conv2d_nhwc[v_ax0, v_ax1, v_ax2, v_ax3] + p2[v_ax0, T.int64(0), T.int64(0), v_ax3]) * p3[v_ax0, T.int64(0), T.int64(0), v_ax3] + p4[v_ax0, T.int64(0), T.int64(0), v_ax3]), T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nhwc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_multiply", func_name="main")
b4 = sch.get_block(name="T_add_1", func_name="main")
b5 = sch.get_block(name="T_add_2", func_name="main")
b6 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b5)
sch.compute_inline(block=b4)
sch.compute_inline(block=b3)
sch.compute_inline(block=b2)
sch.compute_inline(block=b0)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l7, l8, l9, l10, l11, l12, l13 = sch.get_loops(block=b1)
v14, v15, v16, v17 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l18, l19, l20, l21 = sch.split(loop=l7, factors=[v14, v15, v16, v17], preserve_unit_iters=True, disable_predication=False)
v22, v23, v24, v25 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[2, 4, 1, 1])
l26, l27, l28, l29 = sch.split(loop=l8, factors=[v22, v23, v24, v25], preserve_unit_iters=True, disable_predication=False)
v30, v31, v32, v33 = sch.sample_perfect_tile(loop=l9, n=4, max_innermost_factor=64, decision=[1, 2, 1, 4])
l34, l35, l36, l37 = sch.split(loop=l9, factors=[v30, v31, v32, v33], preserve_unit_iters=True, disable_predication=False)
v38, v39, v40, v41 = sch.sample_perfect_tile(loop=l10, n=4, max_innermost_factor=64, decision=[1, 2, 32, 4])
l42, l43, l44, l45 = sch.split(loop=l10, factors=[v38, v39, v40, v41], preserve_unit_iters=True, disable_predication=False)
v46, v47 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 1])
l48, l49 = sch.split(loop=l11, factors=[v46, v47], preserve_unit_iters=True, disable_predication=False)
v50, v51 = sch.sample_perfect_tile(loop=l12, n=2, max_innermost_factor=64, decision=[1, 1])
l52, l53 = sch.split(loop=l12, factors=[v50, v51], preserve_unit_iters=True, disable_predication=False)
v54, v55 = sch.sample_perfect_tile(loop=l13, n=2, max_innermost_factor=64, decision=[2, 32])
l56, l57 = sch.split(loop=l13, factors=[v54, v55], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l18, l26, l34, l42, l19, l27, l35, l43, l48, l52, l56, l20, l28, l36, l44, l49, l53, l57, l21, l29, l37, l45)
b58, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b58, loop=l43, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.parallel", ann_val=96)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.vectorize", ann_val=64)
v59 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.unroll_explicit", ann_val=v59)
2024-04-30 19:13:54 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(8), T.int64(8), T.int64(64)), "float32"), p1: T.Buffer((T.int64(1), T.int64(1), T.int64(64), T.int64(256)), "float32"), p2: T.Buffer((T.int64(1), T.int64(1), T.int64(1), T.int64(256)), "float32"), p3: T.Buffer((T.int64(1), T.int64(1), T.int64(1), T.int64(256)), "float32"), p4: T.Buffer((T.int64(1), T.int64(1), T.int64(1), T.int64(256)), "float32"), p5: T.Buffer((T.int64(1), T.int64(8), T.int64(8), T.int64(256)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(8), T.int64(8), T.int64(256)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 96, "meta_schedule.unroll_explicit": 0, "meta_schedule.vectorize": 64})
            conv2d_nhwc = T.alloc_buffer((T.int64(1), T.int64(8), T.int64(8), T.int64(256)))
            for nn_0, yy_0, xx_0, ff_0 in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(1)):
                for nn_1, yy_1, xx_1, ff_1, ry_0, rx_0, rc_0, nn_2, yy_2, xx_2, ff_2, ry_1, rx_1, rc_1, nn_3, yy_3, xx_3, ff_3 in T.grid(T.int64(1), T.int64(4), T.int64(2), T.int64(2), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4), T.int64(4)):
                    with T.block("conv2d_nhwc"):
                        v_nn = T.axis.spatial(T.int64(1), nn_0 + nn_1 + nn_2 + nn_3)
                        v_yy = T.axis.spatial(T.int64(8), yy_0 * T.int64(4) + yy_1 + yy_2 + yy_3)
                        v_xx = T.axis.spatial(T.int64(8), xx_0 * T.int64(8) + xx_1 * T.int64(4) + xx_2 * T.int64(4) + xx_3)
                        v_ff = T.axis.spatial(T.int64(256), ff_0 * T.int64(256) + ff_1 * T.int64(128) + ff_2 * T.int64(4) + ff_3)
                        v_ry = T.axis.reduce(T.int64(1), ry_0 + ry_1)
                        v_rx = T.axis.reduce(T.int64(1), rx_0 + rx_1)
                        v_rc = T.axis.reduce(T.int64(64), rc_0 * T.int64(32) + rc_1)
                        T.reads(p0[v_nn, v_yy + v_ry, v_xx + v_rx, v_rc], p1[v_ry, v_rx, v_rc, v_ff])
                        T.writes(conv2d_nhwc[v_nn, v_yy, v_xx, v_ff])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_nhwc[v_nn, v_yy, v_xx, v_ff] = T.float32(0)
                        conv2d_nhwc[v_nn, v_yy, v_xx, v_ff] = conv2d_nhwc[v_nn, v_yy, v_xx, v_ff] + p0[v_nn, v_yy + v_ry, v_xx + v_rx, v_rc] * p1[v_ry, v_rx, v_rc, v_ff]
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(4), T.int64(8), T.int64(256)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(8), yy_0 * T.int64(4) + ax1)
                        v_ax2, v_ax3 = T.axis.remap("SS", [ax2, ax3])
                        T.reads(p5[v_ax0, v_ax1, v_ax2, v_ax3], conv2d_nhwc[v_ax0, v_ax1, v_ax2, v_ax3], p2[v_ax0, T.int64(0), T.int64(0), v_ax3], p3[v_ax0, T.int64(0), T.int64(0), v_ax3], p4[v_ax0, T.int64(0), T.int64(0), v_ax3])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(p5[v_ax0, v_ax1, v_ax2, v_ax3] + ((conv2d_nhwc[v_ax0, v_ax1, v_ax2, v_ax3] + p2[v_ax0, T.int64(0), T.int64(0), v_ax3]) * p3[v_ax0, T.int64(0), T.int64(0), v_ax3] + p4[v_ax0, T.int64(0), T.int64(0), v_ax3]), T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nhwc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_multiply", func_name="main")
b4 = sch.get_block(name="T_add_1", func_name="main")
b5 = sch.get_block(name="T_add_2", func_name="main")
b6 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b5)
sch.compute_inline(block=b4)
sch.compute_inline(block=b3)
sch.compute_inline(block=b2)
sch.compute_inline(block=b0)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l7, l8, l9, l10, l11, l12, l13 = sch.get_loops(block=b1)
v14, v15, v16, v17 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l18, l19, l20, l21 = sch.split(loop=l7, factors=[v14, v15, v16, v17], preserve_unit_iters=True, disable_predication=False)
v22, v23, v24, v25 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[2, 4, 1, 1])
l26, l27, l28, l29 = sch.split(loop=l8, factors=[v22, v23, v24, v25], preserve_unit_iters=True, disable_predication=False)
v30, v31, v32, v33 = sch.sample_perfect_tile(loop=l9, n=4, max_innermost_factor=64, decision=[1, 2, 1, 4])
l34, l35, l36, l37 = sch.split(loop=l9, factors=[v30, v31, v32, v33], preserve_unit_iters=True, disable_predication=False)
v38, v39, v40, v41 = sch.sample_perfect_tile(loop=l10, n=4, max_innermost_factor=64, decision=[1, 2, 32, 4])
l42, l43, l44, l45 = sch.split(loop=l10, factors=[v38, v39, v40, v41], preserve_unit_iters=True, disable_predication=False)
v46, v47 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 1])
l48, l49 = sch.split(loop=l11, factors=[v46, v47], preserve_unit_iters=True, disable_predication=False)
v50, v51 = sch.sample_perfect_tile(loop=l12, n=2, max_innermost_factor=64, decision=[1, 1])
l52, l53 = sch.split(loop=l12, factors=[v50, v51], preserve_unit_iters=True, disable_predication=False)
v54, v55 = sch.sample_perfect_tile(loop=l13, n=2, max_innermost_factor=64, decision=[2, 32])
l56, l57 = sch.split(loop=l13, factors=[v54, v55], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l18, l26, l34, l42, l19, l27, l35, l43, l48, l52, l56, l20, l28, l36, l44, l49, l53, l57, l21, l29, l37, l45)
b58, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b58, loop=l42, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.parallel", ann_val=96)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.vectorize", ann_val=64)
v59 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.unroll_explicit", ann_val=v59)
2024-04-30 19:21:36 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-30 19:21:36 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-30 19:21:37 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xf1b7728)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x214b1d58)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x118df7b8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x107c14b8)]: 0 failure(s)
2024-04-30 19:21:37 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-30 19:21:38 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xf1b7728)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x214b1d58)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x118df7b8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x107c14b8)]: 0 failure(s)
2024-04-30 19:21:40 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xf1b7728)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x214b1d58)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x118df7b8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x107c14b8)]: 0 failure(s)
2024-04-30 19:21:41 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xf1b7728)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x214b1d58)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x118df7b8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x107c14b8)]: 0 failure(s)
2024-04-30 19:21:42 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xf1b7728)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x214b1d58)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x118df7b8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x107c14b8)]: 0 failure(s)
2024-04-30 19:21:43 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.0000  0.9999  0.9997  0.9995  0.9986  0.9982  0.9974  0.9973  0.9969  0.9965  0.9961  0.9957  0.9955  0.9955  0.9938  0.9931
[17 : 32]:	0.9920  0.9920  0.9911  0.9908  0.9901  0.9900  0.9898  0.9895  0.9882  0.9882  0.9880  0.9878  0.9870  0.9869  0.9866  0.9864
[33 : 48]:	0.9861  0.9859  0.9855  0.9852  0.9836  0.9830  0.9820  0.9818  0.9816  0.9815  0.9811  0.9803  0.9801  0.9799  0.9799  0.9784
[49 : 64]:	0.9783  0.9781  0.9777  0.9776  0.9776  0.9772  0.9769  0.9761  0.9757  0.9754  0.9740  0.9738  0.9735  0.9734  0.9732  0.9725
2024-04-30 19:21:43 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-30 19:21:43 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-30 19:36:30 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_conv2d_add_multiply_add_add_nn_relu_1] Trial #1: GFLOPs: 4.2154. Time: 516.9303 us. Best GFLOPs: 4.2154
2024-04-30 19:36:30 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_conv2d_add_multiply_add_add_nn_relu_1] Trial #2: GFLOPs: 51.9748. Time: 41.9256 us. Best GFLOPs: 51.9748
2024-04-30 19:36:30 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_conv2d_add_multiply_add_add_nn_relu_1] Trial #3: GFLOPs: 50.2692. Time: 43.3481 us. Best GFLOPs: 51.9748
2024-04-30 19:36:30 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_conv2d_add_multiply_add_add_nn_relu_1] Trial #4: GFLOPs: 8.6330. Time: 252.4131 us. Best GFLOPs: 51.9748
2024-04-30 19:36:30 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_conv2d_add_multiply_add_add_nn_relu_1] Trial #5: GFLOPs: 6.3138. Time: 345.1261 us. Best GFLOPs: 51.9748
2024-04-30 19:36:30 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_conv2d_add_multiply_add_add_nn_relu_1] Trial #6: GFLOPs: 32.6209. Time: 66.7999 us. Best GFLOPs: 51.9748
2024-04-30 19:36:30 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_conv2d_add_multiply_add_add_nn_relu_1] Trial #7: GFLOPs: 26.4082. Time: 82.5151 us. Best GFLOPs: 51.9748
2024-04-30 19:36:30 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_conv2d_add_multiply_add_add_nn_relu_1] Trial #8: GFLOPs: 35.7268. Time: 60.9927 us. Best GFLOPs: 51.9748
2024-04-30 19:36:30 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_conv2d_add_multiply_add_add_nn_relu_1] Trial #9: GFLOPs: 42.1055. Time: 51.7527 us. Best GFLOPs: 51.9748
2024-04-30 19:36:30 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_conv2d_add_multiply_add_add_nn_relu_1] Trial #10: GFLOPs: 26.2247. Time: 83.0923 us. Best GFLOPs: 51.9748
2024-04-30 19:36:30 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_conv2d_add_multiply_add_add_nn_relu_1] Trial #11: GFLOPs: 5.8130. Time: 374.8631 us. Best GFLOPs: 51.9748
2024-04-30 19:36:30 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_conv2d_add_multiply_add_add_nn_relu_1] Trial #12: GFLOPs: 35.0723. Time: 62.1309 us. Best GFLOPs: 51.9748
2024-04-30 19:36:30 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_conv2d_add_multiply_add_add_nn_relu_1] Trial #13: GFLOPs: 44.8919. Time: 48.5405 us. Best GFLOPs: 51.9748
2024-04-30 19:36:30 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_conv2d_add_multiply_add_add_nn_relu_1] Trial #14: GFLOPs: 26.2866. Time: 82.8967 us. Best GFLOPs: 51.9748
2024-04-30 19:36:30 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_conv2d_add_multiply_add_add_nn_relu_1] Trial #15: GFLOPs: 7.5604. Time: 288.2209 us. Best GFLOPs: 51.9748
2024-04-30 19:36:30 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_conv2d_add_multiply_add_add_nn_relu_1] Trial #16: GFLOPs: 22.4246. Time: 97.1734 us. Best GFLOPs: 51.9748
2024-04-30 19:36:30 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_conv2d_add_multiply_add_add_nn_relu_1] Trial #17: GFLOPs: 26.0374. Time: 83.6901 us. Best GFLOPs: 51.9748
2024-04-30 19:36:30 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_conv2d_add_multiply_add_add_nn_relu_1] Trial #18: GFLOPs: 3.3302. Time: 654.3403 us. Best GFLOPs: 51.9748
2024-04-30 19:36:30 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_conv2d_add_multiply_add_add_nn_relu_1] Trial #19: GFLOPs: 32.3542. Time: 67.3506 us. Best GFLOPs: 51.9748
2024-04-30 19:36:30 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_conv2d_add_multiply_add_add_nn_relu_1] Trial #20: GFLOPs: 4.7961. Time: 454.3469 us. Best GFLOPs: 51.9748
2024-04-30 19:36:30 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_conv2d_add_multiply_add_add_nn_relu_1] Trial #21: GFLOPs: 38.4882. Time: 56.6167 us. Best GFLOPs: 51.9748
2024-04-30 19:36:30 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_conv2d_add_multiply_add_add_nn_relu_1] Trial #22: GFLOPs: 19.1130. Time: 114.0100 us. Best GFLOPs: 51.9748
2024-04-30 19:36:30 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_conv2d_add_multiply_add_add_nn_relu_1] Trial #23: GFLOPs: 7.7867. Time: 279.8453 us. Best GFLOPs: 51.9748
2024-04-30 19:36:30 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_conv2d_add_multiply_add_add_nn_relu_1] Trial #24: GFLOPs: 12.7064. Time: 171.4941 us. Best GFLOPs: 51.9748
2024-04-30 19:36:30 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_conv2d_add_multiply_add_add_nn_relu_1] Trial #25: GFLOPs: 38.9128. Time: 55.9988 us. Best GFLOPs: 51.9748
2024-04-30 19:36:30 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_conv2d_add_multiply_add_add_nn_relu_1] Trial #26: GFLOPs: 11.5849. Time: 188.0958 us. Best GFLOPs: 51.9748
2024-04-30 19:36:30 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_conv2d_add_multiply_add_add_nn_relu_1] Trial #27: GFLOPs: 51.4757. Time: 42.3320 us. Best GFLOPs: 51.9748
2024-04-30 19:36:30 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_conv2d_add_multiply_add_add_nn_relu_1] Trial #28: GFLOPs: 19.8811. Time: 109.6053 us. Best GFLOPs: 51.9748
2024-04-30 19:36:30 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_conv2d_add_multiply_add_add_nn_relu_1] Trial #29: GFLOPs: 6.4746. Time: 336.5550 us. Best GFLOPs: 51.9748
2024-04-30 19:36:30 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_conv2d_add_multiply_add_add_nn_relu_1] Trial #30: GFLOPs: 13.6986. Time: 159.0728 us. Best GFLOPs: 51.9748
2024-04-30 19:36:30 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_conv2d_add_multiply_add_add_nn_relu_1] Trial #31: GFLOPs: 3.6049. Time: 604.4691 us. Best GFLOPs: 51.9748
2024-04-30 19:36:30 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_conv2d_add_multiply_add_add_nn_relu_1] Trial #32: GFLOPs: 75.2862. Time: 28.9439 us. Best GFLOPs: 75.2862
2024-04-30 19:36:30 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_conv2d_add_multiply_add_add_nn_relu_1] Trial #33: GFLOPs: 43.9461. Time: 49.5851 us. Best GFLOPs: 75.2862
2024-04-30 19:36:30 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_conv2d_add_multiply_add_add_nn_relu_1] Trial #34: GFLOPs: 20.5779. Time: 105.8939 us. Best GFLOPs: 75.2862
2024-04-30 19:36:30 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_conv2d_add_multiply_add_add_nn_relu_1] Trial #35: GFLOPs: 16.8349. Time: 129.4381 us. Best GFLOPs: 75.2862
2024-04-30 19:36:30 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_conv2d_add_multiply_add_add_nn_relu_1] Trial #36: GFLOPs: 16.2457. Time: 134.1323 us. Best GFLOPs: 75.2862
2024-04-30 19:36:30 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_conv2d_add_multiply_add_add_nn_relu_1] Trial #37: GFLOPs: 12.4884. Time: 174.4883 us. Best GFLOPs: 75.2862
2024-04-30 19:36:30 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_conv2d_add_multiply_add_add_nn_relu_1] Trial #38: GFLOPs: 14.1621. Time: 153.8665 us. Best GFLOPs: 75.2862
2024-04-30 19:36:30 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_conv2d_add_multiply_add_add_nn_relu_1] Trial #39: GFLOPs: 19.9953. Time: 108.9791 us. Best GFLOPs: 75.2862
2024-04-30 19:36:30 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_conv2d_add_multiply_add_add_nn_relu_1] Trial #40: GFLOPs: 22.9780. Time: 94.8331 us. Best GFLOPs: 75.2862
2024-04-30 19:36:30 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_conv2d_add_multiply_add_add_nn_relu_1] Trial #41: GFLOPs: 10.6959. Time: 203.7297 us. Best GFLOPs: 75.2862
2024-04-30 19:36:30 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_conv2d_add_multiply_add_add_nn_relu_1] Trial #42: GFLOPs: 12.5294. Time: 173.9167 us. Best GFLOPs: 75.2862
2024-04-30 19:36:30 [INFO] [task_scheduler.cc:121] [Task #15: fused_nn_conv2d_add_multiply_add_add_nn_relu_1] Trial #43: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(8), T.int64(8), T.int64(64)), "float32"), p1: T.Buffer((T.int64(1), T.int64(1), T.int64(64), T.int64(256)), "float32"), p2: T.Buffer((T.int64(1), T.int64(1), T.int64(1), T.int64(256)), "float32"), p3: T.Buffer((T.int64(1), T.int64(1), T.int64(1), T.int64(256)), "float32"), p4: T.Buffer((T.int64(1), T.int64(1), T.int64(1), T.int64(256)), "float32"), p5: T.Buffer((T.int64(1), T.int64(8), T.int64(8), T.int64(256)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(8), T.int64(8), T.int64(256)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_nhwc = T.alloc_buffer((T.int64(1), T.int64(8), T.int64(8), T.int64(256)))
        p1_global = T.alloc_buffer((T.int64(2), T.int64(64), T.int64(64), T.int64(2)))
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(64), T.int64(256)):
            with T.block("p1_global"):
                v0, v1, v2, v3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(p1[v0, v1, v2, v3])
                T.writes(p1_global[v3 // T.int64(128), v2, v3 % T.int64(128) // T.int64(2), v3 % T.int64(2)])
                T.block_attr({"meta_schedule.layout_rewrite_preproc": T.bool(True)})
                p1_global[v3 // T.int64(128), v2, v3 % T.int64(128) // T.int64(2), v3 % T.int64(2)] = p1[v0, v1, v2, v3]
        for nn_0_yy_0_xx_0_ff_0_fused in T.parallel(T.int64(8), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for nn_1, yy_1, xx_1, ff_1 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(2)):
                for nn_2_init, yy_2_init, xx_2_init, ff_2_init, nn_3_init, yy_3_init, xx_3_init in T.grid(T.int64(1), T.int64(2), T.int64(2), T.int64(64), T.int64(1), T.int64(2), T.int64(1)):
                    for ff_3_fused_init in T.vectorized(T.int64(2)):
                        with T.block("conv2d_nhwc_init"):
                            v_nn = T.axis.spatial(T.int64(1), nn_1 + nn_2_init + nn_3_init)
                            v_yy = T.axis.spatial(T.int64(8), nn_0_yy_0_xx_0_ff_0_fused // T.int64(4) * T.int64(4) + yy_1 * T.int64(4) + yy_2_init * T.int64(2) + yy_3_init)
                            v_xx = T.axis.spatial(T.int64(8), nn_0_yy_0_xx_0_ff_0_fused % T.int64(4) * T.int64(2) + xx_1 * T.int64(2) + xx_2_init + xx_3_init)
                            v_ff = T.axis.spatial(T.int64(256), ff_1 * T.int64(128) + ff_2_init * T.int64(2) + ff_3_fused_init)
                            T.reads()
                            T.writes(conv2d_nhwc[v_nn, v_yy, v_xx, v_ff])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_nhwc[v_nn, v_yy, v_xx, v_ff] = T.float32(0)
                for ry_0, rx_0, rc_0, nn_2, yy_2, xx_2, ff_2, ry_1, rx_1, rc_1, nn_3, yy_3, xx_3 in T.grid(T.int64(1), T.int64(1), T.int64(64), T.int64(1), T.int64(2), T.int64(2), T.int64(64), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1)):
                    for ff_3_fused in T.vectorized(T.int64(2)):
                        with T.block("conv2d_nhwc_update"):
                            v_nn = T.axis.spatial(T.int64(1), nn_1 + nn_2 + nn_3)
                            v_yy = T.axis.spatial(T.int64(8), nn_0_yy_0_xx_0_ff_0_fused // T.int64(4) * T.int64(4) + yy_1 * T.int64(4) + yy_2 * T.int64(2) + yy_3)
                            v_xx = T.axis.spatial(T.int64(8), nn_0_yy_0_xx_0_ff_0_fused % T.int64(4) * T.int64(2) + xx_1 * T.int64(2) + xx_2 + xx_3)
                            v_ff = T.axis.spatial(T.int64(256), ff_1 * T.int64(128) + ff_2 * T.int64(2) + ff_3_fused)
                            v_ry = T.axis.reduce(T.int64(1), ry_0 + ry_1)
                            v_rx = T.axis.reduce(T.int64(1), rx_0 + rx_1)
                            v_rc = T.axis.reduce(T.int64(64), rc_0 + rc_1)
                            T.reads(conv2d_nhwc[v_nn, v_yy, v_xx, v_ff], p0[v_nn, v_yy + v_ry, v_xx + v_rx, v_rc], p1_global[v_ff // T.int64(128), v_rc, v_ff % T.int64(128) // T.int64(2), v_ff % T.int64(2)])
                            T.writes(conv2d_nhwc[v_nn, v_yy, v_xx, v_ff])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_nhwc[v_nn, v_yy, v_xx, v_ff] = conv2d_nhwc[v_nn, v_yy, v_xx, v_ff] + p0[v_nn, v_yy + v_ry, v_xx + v_rx, v_rc] * p1_global[v_ff // T.int64(128), v_rc, v_ff % T.int64(128) // T.int64(2), v_ff % T.int64(2)]
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(4), T.int64(2), T.int64(256)):
                with T.block("T_relu"):
                    v_ax0 = T.axis.spatial(T.int64(1), ax0)
                    v_ax1 = T.axis.spatial(T.int64(8), nn_0_yy_0_xx_0_ff_0_fused // T.int64(4) * T.int64(4) + ax1)
                    v_ax2 = T.axis.spatial(T.int64(8), nn_0_yy_0_xx_0_ff_0_fused % T.int64(4) * T.int64(2) + ax2)
                    v_ax3 = T.axis.spatial(T.int64(256), ax3)
                    T.reads(p5[v_ax0, v_ax1, v_ax2, v_ax3], conv2d_nhwc[v_ax0, v_ax1, v_ax2, v_ax3], p2[v_ax0, T.int64(0), T.int64(0), v_ax3], p3[v_ax0, T.int64(0), T.int64(0), v_ax3], p4[v_ax0, T.int64(0), T.int64(0), v_ax3])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(p5[v_ax0, v_ax1, v_ax2, v_ax3] + ((conv2d_nhwc[v_ax0, v_ax1, v_ax2, v_ax3] + p2[v_ax0, T.int64(0), T.int64(0), v_ax3]) * p3[v_ax0, T.int64(0), T.int64(0), v_ax3] + p4[v_ax0, T.int64(0), T.int64(0), v_ax3]), T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nhwc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_multiply", func_name="main")
b4 = sch.get_block(name="T_add_1", func_name="main")
b5 = sch.get_block(name="T_add_2", func_name="main")
b6 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b5)
sch.compute_inline(block=b4)
sch.compute_inline(block=b3)
sch.compute_inline(block=b2)
sch.compute_inline(block=b0)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l7, l8, l9, l10, l11, l12, l13 = sch.get_loops(block=b1)
v14, v15, v16, v17 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l18, l19, l20, l21 = sch.split(loop=l7, factors=[v14, v15, v16, v17], preserve_unit_iters=True, disable_predication=False)
v22, v23, v24, v25 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[2, 1, 2, 2])
l26, l27, l28, l29 = sch.split(loop=l8, factors=[v22, v23, v24, v25], preserve_unit_iters=True, disable_predication=False)
v30, v31, v32, v33 = sch.sample_perfect_tile(loop=l9, n=4, max_innermost_factor=64, decision=[4, 1, 2, 1])
l34, l35, l36, l37 = sch.split(loop=l9, factors=[v30, v31, v32, v33], preserve_unit_iters=True, disable_predication=False)
v38, v39, v40, v41 = sch.sample_perfect_tile(loop=l10, n=4, max_innermost_factor=64, decision=[1, 2, 64, 2])
l42, l43, l44, l45 = sch.split(loop=l10, factors=[v38, v39, v40, v41], preserve_unit_iters=True, disable_predication=False)
v46, v47 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 1])
l48, l49 = sch.split(loop=l11, factors=[v46, v47], preserve_unit_iters=True, disable_predication=False)
v50, v51 = sch.sample_perfect_tile(loop=l12, n=2, max_innermost_factor=64, decision=[1, 1])
l52, l53 = sch.split(loop=l12, factors=[v50, v51], preserve_unit_iters=True, disable_predication=False)
v54, v55 = sch.sample_perfect_tile(loop=l13, n=2, max_innermost_factor=64, decision=[64, 1])
l56, l57 = sch.split(loop=l13, factors=[v54, v55], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l18, l26, l34, l42, l19, l27, l35, l43, l48, l52, l56, l20, l28, l36, l44, l49, l53, l57, l21, l29, l37, l45)
b58, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b58, loop=l42, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.parallel", ann_val=96)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.vectorize", ann_val=64)
v59 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.unroll_explicit", ann_val=v59)
sch.enter_postproc()
b60 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b60, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b60, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b60, ann_key="meta_schedule.unroll_explicit")
b61, b62 = sch.get_child_blocks(b60)
l63, l64, l65, l66, l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b61)
l85 = sch.fuse(l63, l64, l65, l66, preserve_unit_iters=True)
sch.parallel(loop=l85)
l86 = sch.fuse(l84, preserve_unit_iters=True)
sch.vectorize(loop=l86)
sch.annotate(block_or_loop=l85, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l85, ann_key="pragma_unroll_explicit", ann_val=1)
l87, l88, l89, l90, l91 = sch.get_loops(block=b62)
b92 = sch.get_block(name="conv2d_nhwc", func_name="main")
l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103, l104, l105, l106, l107, l108, l109, l110, l111 = sch.get_loops(block=b92)
b112 = sch.decompose_reduction(block=b92, loop=l98)
b113 = sch.get_block(name="conv2d_nhwc_update", func_name="main")
b114 = sch.cache_read(block=b113, read_buffer_index=2, storage_scope="global")
sch.annotate(block_or_loop=b114, ann_key="meta_schedule.layout_rewrite_preproc", ann_val=1)
sch.transform_layout(block=b113, buffer=("read", 2), index_map=tvm.tir.IndexMap.from_func(lambda i0, i1, i2, i3: (T.Cast("int64", i3) // T.int64(128), T.Cast("int64", i2), T.Cast("int64", i3) % T.int64(128) // T.int64(2), T.Cast("int64", i3) % T.int64(2),), inverse_index_map=lambda i0, i1, i2, i3: (T.int64(0), T.int64(0), T.Cast("int64", i1), T.Cast("int64", i0) * T.int64(128) + T.Cast("int64", i2) * T.int64(2) + T.Cast("int64", i3),)), pad_value=None, assume_injective_transform=False)
2024-04-30 19:36:30 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_conv2d_add_multiply_add_add_nn_relu_1] Trial #44: GFLOPs: 18.7983. Time: 115.9183 us. Best GFLOPs: 75.2862
2024-04-30 19:36:30 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_conv2d_add_multiply_add_add_nn_relu_1] Trial #45: GFLOPs: 21.8421. Time: 99.7648 us. Best GFLOPs: 75.2862
2024-04-30 19:36:30 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_conv2d_add_multiply_add_add_nn_relu_1] Trial #46: GFLOPs: 67.6600. Time: 32.2062 us. Best GFLOPs: 75.2862
2024-04-30 19:36:30 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_conv2d_add_multiply_add_add_nn_relu_1] Trial #47: GFLOPs: 12.8080. Time: 170.1340 us. Best GFLOPs: 75.2862
2024-04-30 19:36:30 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_conv2d_add_multiply_add_add_nn_relu_1] Trial #48: GFLOPs: 107.8881. Time: 20.1975 us. Best GFLOPs: 107.8881
2024-04-30 19:36:30 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_conv2d_add_multiply_add_add_nn_relu_1] Trial #49: GFLOPs: 90.6813. Time: 24.0300 us. Best GFLOPs: 107.8881
2024-04-30 19:36:30 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_conv2d_add_multiply_add_add_nn_relu_1] Trial #50: GFLOPs: 16.4495. Time: 132.4701 us. Best GFLOPs: 107.8881
2024-04-30 19:36:30 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_conv2d_add_multiply_add_add_nn_relu_1] Trial #51: GFLOPs: 23.7391. Time: 91.7927 us. Best GFLOPs: 107.8881
2024-04-30 19:36:30 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_conv2d_add_multiply_add_add_nn_relu_1] Trial #52: GFLOPs: 100.2868. Time: 21.7284 us. Best GFLOPs: 107.8881
2024-04-30 19:36:30 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_conv2d_add_multiply_add_add_nn_relu_1] Trial #53: GFLOPs: 19.7275. Time: 110.4585 us. Best GFLOPs: 107.8881
2024-04-30 19:36:30 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_conv2d_add_multiply_add_add_nn_relu_1] Trial #54: GFLOPs: 33.0510. Time: 65.9305 us. Best GFLOPs: 107.8881
2024-04-30 19:36:30 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_conv2d_add_multiply_add_add_nn_relu_1] Trial #55: GFLOPs: 14.8322. Time: 146.9148 us. Best GFLOPs: 107.8881
2024-04-30 19:36:30 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_conv2d_add_multiply_add_add_nn_relu_1] Trial #56: GFLOPs: 91.2266. Time: 23.8864 us. Best GFLOPs: 107.8881
2024-04-30 19:36:30 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_conv2d_add_multiply_add_add_nn_relu_1] Trial #57: GFLOPs: 46.0264. Time: 47.3439 us. Best GFLOPs: 107.8881
2024-04-30 19:36:30 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_conv2d_add_multiply_add_add_nn_relu_1] Trial #58: GFLOPs: 22.9620. Time: 94.8989 us. Best GFLOPs: 107.8881
2024-04-30 19:36:30 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_conv2d_add_multiply_add_add_nn_relu_1] Trial #59: GFLOPs: 20.6060. Time: 105.7495 us. Best GFLOPs: 107.8881
2024-04-30 19:36:30 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_conv2d_add_multiply_add_add_nn_relu_1] Trial #60: GFLOPs: 24.9881. Time: 87.2045 us. Best GFLOPs: 107.8881
2024-04-30 19:36:30 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_conv2d_add_multiply_add_add_nn_relu_1] Trial #61: GFLOPs: 41.8053. Time: 52.1243 us. Best GFLOPs: 107.8881
2024-04-30 19:36:30 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_conv2d_add_multiply_add_add_nn_relu_1] Trial #62: GFLOPs: 86.0746. Time: 25.3161 us. Best GFLOPs: 107.8881
2024-04-30 19:36:30 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_conv2d_add_multiply_add_add_nn_relu_1] Trial #63: GFLOPs: 61.3937. Time: 35.4934 us. Best GFLOPs: 107.8881
2024-04-30 19:36:30 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_conv2d_add_multiply_add_add_nn_relu_1] Trial #64: GFLOPs: 42.8294. Time: 50.8779 us. Best GFLOPs: 107.8881
2024-04-30 20:10:41 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-30 20:10:41 [INFO] [evolutionary_search.cc:715] Picked top 63 candidate(s) from database
2024-04-30 20:10:42 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xf1b7728)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x214b1d58)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x118df7b8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x107c14b8)]: 0 failure(s)
2024-04-30 20:10:42 [INFO] [evolutionary_search.cc:723] Sampled 449 candidate(s)
2024-04-30 20:10:45 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xf1b7728)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x214b1d58)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x118df7b8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x107c14b8)]: 0 failure(s)
2024-04-30 20:10:48 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xf1b7728)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x214b1d58)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x118df7b8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x107c14b8)]: 0 failure(s)
2024-04-30 20:10:51 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xf1b7728)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x214b1d58)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x118df7b8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x107c14b8)]: 0 failure(s)
2024-04-30 20:10:54 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xf1b7728)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x214b1d58)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x118df7b8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x107c14b8)]: 0 failure(s)
2024-04-30 20:10:56 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9719  0.9320  0.9127  0.9127  0.9018  0.9005  0.8913  0.8759  0.8727  0.8727  0.8726  0.8718  0.8675  0.8647  0.8625  0.8602
[17 : 32]:	0.8558  0.8531  0.8525  0.8524  0.8524  0.8502  0.8460  0.8442  0.8400  0.8360  0.8340  0.8340  0.8315  0.8315  0.8298  0.8295
[33 : 48]:	0.8288  0.8272  0.8267  0.8262  0.8255  0.8245  0.8245  0.8223  0.8223  0.8216  0.8206  0.8204  0.8196  0.8194  0.8173  0.8173
[49 : 64]:	0.8163  0.8134  0.8121  0.8113  0.8107  0.8103  0.8096  0.8092  0.8085  0.8081  0.8073  0.8066  0.8055  0.8055  0.8043  0.8035
2024-04-30 20:10:56 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-30 20:10:56 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-30 20:11:16 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_conv2d_add_multiply_add_add_nn_relu_1] Trial #65: GFLOPs: 114.9747. Time: 18.9526 us. Best GFLOPs: 114.9747
2024-04-30 20:11:16 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_conv2d_add_multiply_add_add_nn_relu_1] Trial #66: GFLOPs: 147.7416. Time: 14.7492 us. Best GFLOPs: 147.7416
2024-04-30 20:11:16 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_conv2d_add_multiply_add_add_nn_relu_1] Trial #67: GFLOPs: 153.4361. Time: 14.2018 us. Best GFLOPs: 153.4361
2024-04-30 20:11:16 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_conv2d_add_multiply_add_add_nn_relu_1] Trial #68: GFLOPs: 142.5656. Time: 15.2847 us. Best GFLOPs: 153.4361
2024-04-30 20:11:16 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_conv2d_add_multiply_add_add_nn_relu_1] Trial #69: GFLOPs: 154.8241. Time: 14.0745 us. Best GFLOPs: 154.8241
2024-04-30 20:11:16 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_conv2d_add_multiply_add_add_nn_relu_1] Trial #70: GFLOPs: 131.3375. Time: 16.5914 us. Best GFLOPs: 154.8241
2024-04-30 20:11:16 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_conv2d_add_multiply_add_add_nn_relu_1] Trial #71: GFLOPs: 118.3954. Time: 18.4050 us. Best GFLOPs: 154.8241
2024-04-30 20:11:16 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_conv2d_add_multiply_add_add_nn_relu_1] Trial #72: GFLOPs: 124.4451. Time: 17.5103 us. Best GFLOPs: 154.8241
2024-04-30 20:11:16 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_conv2d_add_multiply_add_add_nn_relu_1] Trial #73: GFLOPs: 121.1219. Time: 17.9907 us. Best GFLOPs: 154.8241
2024-04-30 20:11:16 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_conv2d_add_multiply_add_add_nn_relu_1] Trial #74: GFLOPs: 133.3062. Time: 16.3464 us. Best GFLOPs: 154.8241
2024-04-30 20:11:16 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_conv2d_add_multiply_add_add_nn_relu_1] Trial #75: GFLOPs: 128.7032. Time: 16.9310 us. Best GFLOPs: 154.8241
2024-04-30 20:11:16 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_conv2d_add_multiply_add_add_nn_relu_1] Trial #76: GFLOPs: 76.5599. Time: 28.4623 us. Best GFLOPs: 154.8241
2024-04-30 20:11:16 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_conv2d_add_multiply_add_add_nn_relu_1] Trial #77: GFLOPs: 126.5099. Time: 17.2245 us. Best GFLOPs: 154.8241
2024-04-30 20:11:16 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_conv2d_add_multiply_add_add_nn_relu_1] Trial #78: GFLOPs: 84.3792. Time: 25.8248 us. Best GFLOPs: 154.8241
2024-04-30 20:11:16 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_conv2d_add_multiply_add_add_nn_relu_1] Trial #79: GFLOPs: 126.3287. Time: 17.2492 us. Best GFLOPs: 154.8241
2024-04-30 20:11:16 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_conv2d_add_multiply_add_add_nn_relu_1] Trial #80: GFLOPs: 123.8713. Time: 17.5914 us. Best GFLOPs: 154.8241
2024-04-30 20:11:16 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_conv2d_add_multiply_add_add_nn_relu_1] Trial #81: GFLOPs: 122.0445. Time: 17.8547 us. Best GFLOPs: 154.8241
2024-04-30 20:11:16 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_conv2d_add_multiply_add_add_nn_relu_1] Trial #82: GFLOPs: 80.7944. Time: 26.9706 us. Best GFLOPs: 154.8241
2024-04-30 20:11:16 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_conv2d_add_multiply_add_add_nn_relu_1] Trial #83: GFLOPs: 127.9166. Time: 17.0351 us. Best GFLOPs: 154.8241
2024-04-30 20:11:16 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_conv2d_add_multiply_add_add_nn_relu_1] Trial #84: GFLOPs: 105.4527. Time: 20.6640 us. Best GFLOPs: 154.8241
2024-04-30 20:11:16 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_conv2d_add_multiply_add_add_nn_relu_1] Trial #85: GFLOPs: 125.8715. Time: 17.3119 us. Best GFLOPs: 154.8241
2024-04-30 20:11:16 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_conv2d_add_multiply_add_add_nn_relu_1] Trial #86: GFLOPs: 90.2491. Time: 24.1451 us. Best GFLOPs: 154.8241
2024-04-30 20:11:16 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_conv2d_add_multiply_add_add_nn_relu_1] Trial #87: GFLOPs: 111.8271. Time: 19.4861 us. Best GFLOPs: 154.8241
2024-04-30 20:11:16 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_conv2d_add_multiply_add_add_nn_relu_1] Trial #88: GFLOPs: 144.7983. Time: 15.0490 us. Best GFLOPs: 154.8241
2024-04-30 20:11:16 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_conv2d_add_multiply_add_add_nn_relu_1] Trial #89: GFLOPs: 108.1716. Time: 20.1446 us. Best GFLOPs: 154.8241
2024-04-30 20:11:16 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_conv2d_add_multiply_add_add_nn_relu_1] Trial #90: GFLOPs: 123.6761. Time: 17.6192 us. Best GFLOPs: 154.8241
2024-04-30 20:11:16 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_conv2d_add_multiply_add_add_nn_relu_1] Trial #91: GFLOPs: 97.1827. Time: 22.4224 us. Best GFLOPs: 154.8241
2024-04-30 20:11:16 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_conv2d_add_multiply_add_add_nn_relu_1] Trial #92: GFLOPs: 99.6494. Time: 21.8674 us. Best GFLOPs: 154.8241
2024-04-30 20:11:16 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_conv2d_add_multiply_add_add_nn_relu_1] Trial #93: GFLOPs: 97.5106. Time: 22.3470 us. Best GFLOPs: 154.8241
2024-04-30 20:11:16 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_conv2d_add_multiply_add_add_nn_relu_1] Trial #94: GFLOPs: 90.6817. Time: 24.0299 us. Best GFLOPs: 154.8241
2024-04-30 20:11:16 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_conv2d_add_multiply_add_add_nn_relu_1] Trial #95: GFLOPs: 85.2222. Time: 25.5693 us. Best GFLOPs: 154.8241
2024-04-30 20:11:16 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_conv2d_add_multiply_add_add_nn_relu_1] Trial #96: GFLOPs: 116.0086. Time: 18.7837 us. Best GFLOPs: 154.8241
2024-04-30 20:11:16 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_conv2d_add_multiply_add_add_nn_relu_1] Trial #97: GFLOPs: 129.6623. Time: 16.8058 us. Best GFLOPs: 154.8241
2024-04-30 20:11:16 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_conv2d_add_multiply_add_add_nn_relu_1] Trial #98: GFLOPs: 125.6395. Time: 17.3438 us. Best GFLOPs: 154.8241
2024-04-30 20:11:16 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_conv2d_add_multiply_add_add_nn_relu_1] Trial #99: GFLOPs: 105.7028. Time: 20.6151 us. Best GFLOPs: 154.8241
2024-04-30 20:11:16 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_conv2d_add_multiply_add_add_nn_relu_1] Trial #100: GFLOPs: 108.7221. Time: 20.0426 us. Best GFLOPs: 154.8241
2024-04-30 20:11:16 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_conv2d_add_multiply_add_add_nn_relu_1] Trial #101: GFLOPs: 83.1926. Time: 26.1931 us. Best GFLOPs: 154.8241
2024-04-30 20:11:16 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_conv2d_add_multiply_add_add_nn_relu_1] Trial #102: GFLOPs: 75.9040. Time: 28.7083 us. Best GFLOPs: 154.8241
2024-04-30 20:11:16 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_conv2d_add_multiply_add_add_nn_relu_1] Trial #103: GFLOPs: 84.5343. Time: 25.7774 us. Best GFLOPs: 154.8241
2024-04-30 20:11:16 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_conv2d_add_multiply_add_add_nn_relu_1] Trial #104: GFLOPs: 123.8312. Time: 17.5971 us. Best GFLOPs: 154.8241
2024-04-30 20:11:16 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_conv2d_add_multiply_add_add_nn_relu_1] Trial #105: GFLOPs: 91.7219. Time: 23.7574 us. Best GFLOPs: 154.8241
2024-04-30 20:11:16 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_conv2d_add_multiply_add_add_nn_relu_1] Trial #106: GFLOPs: 76.7122. Time: 28.4058 us. Best GFLOPs: 154.8241
2024-04-30 20:11:16 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_conv2d_add_multiply_add_add_nn_relu_1] Trial #107: GFLOPs: 135.7477. Time: 16.0524 us. Best GFLOPs: 154.8241
2024-04-30 20:11:16 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_conv2d_add_multiply_add_add_nn_relu_1] Trial #108: GFLOPs: 97.6316. Time: 22.3193 us. Best GFLOPs: 154.8241
2024-04-30 20:11:16 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_conv2d_add_multiply_add_add_nn_relu_1] Trial #109: GFLOPs: 146.0474. Time: 14.9203 us. Best GFLOPs: 154.8241
2024-04-30 20:11:16 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_conv2d_add_multiply_add_add_nn_relu_1] Trial #110: GFLOPs: 106.6245. Time: 20.4369 us. Best GFLOPs: 154.8241
2024-04-30 20:11:16 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_conv2d_add_multiply_add_add_nn_relu_1] Trial #111: GFLOPs: 137.4110. Time: 15.8581 us. Best GFLOPs: 154.8241
2024-04-30 20:11:16 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_conv2d_add_multiply_add_add_nn_relu_1] Trial #112: GFLOPs: 123.6045. Time: 17.6294 us. Best GFLOPs: 154.8241
2024-04-30 20:11:16 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_conv2d_add_multiply_add_add_nn_relu_1] Trial #113: GFLOPs: 127.9335. Time: 17.0328 us. Best GFLOPs: 154.8241
2024-04-30 20:11:16 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_conv2d_add_multiply_add_add_nn_relu_1] Trial #114: GFLOPs: 89.3021. Time: 24.4011 us. Best GFLOPs: 154.8241
2024-04-30 20:11:16 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_conv2d_add_multiply_add_add_nn_relu_1] Trial #115: GFLOPs: 81.9539. Time: 26.5890 us. Best GFLOPs: 154.8241
2024-04-30 20:11:16 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_conv2d_add_multiply_add_add_nn_relu_1] Trial #116: GFLOPs: 67.0522. Time: 32.4981 us. Best GFLOPs: 154.8241
2024-04-30 20:11:16 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_conv2d_add_multiply_add_add_nn_relu_1] Trial #117: GFLOPs: 98.5715. Time: 22.1065 us. Best GFLOPs: 154.8241
2024-04-30 20:11:16 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_conv2d_add_multiply_add_add_nn_relu_1] Trial #118: GFLOPs: 129.1577. Time: 16.8714 us. Best GFLOPs: 154.8241
2024-04-30 20:11:16 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_conv2d_add_multiply_add_add_nn_relu_1] Trial #119: GFLOPs: 93.2073. Time: 23.3788 us. Best GFLOPs: 154.8241
2024-04-30 20:11:16 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_conv2d_add_multiply_add_add_nn_relu_1] Trial #120: GFLOPs: 83.7670. Time: 26.0135 us. Best GFLOPs: 154.8241
2024-04-30 20:11:16 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_conv2d_add_multiply_add_add_nn_relu_1] Trial #121: GFLOPs: 105.4278. Time: 20.6689 us. Best GFLOPs: 154.8241
2024-04-30 20:11:16 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_conv2d_add_multiply_add_add_nn_relu_1] Trial #122: GFLOPs: 105.6654. Time: 20.6224 us. Best GFLOPs: 154.8241
2024-04-30 20:11:16 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_conv2d_add_multiply_add_add_nn_relu_1] Trial #123: GFLOPs: 114.8665. Time: 18.9705 us. Best GFLOPs: 154.8241
2024-04-30 20:11:16 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_conv2d_add_multiply_add_add_nn_relu_1] Trial #124: GFLOPs: 78.6627. Time: 27.7015 us. Best GFLOPs: 154.8241
2024-04-30 20:11:16 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_conv2d_add_multiply_add_add_nn_relu_1] Trial #125: GFLOPs: 146.3530. Time: 14.8892 us. Best GFLOPs: 154.8241
2024-04-30 20:11:16 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_conv2d_add_multiply_add_add_nn_relu_1] Trial #126: GFLOPs: 13.5726. Time: 160.5498 us. Best GFLOPs: 154.8241
2024-04-30 20:11:16 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_conv2d_add_multiply_add_add_nn_relu_1] Trial #127: GFLOPs: 39.7816. Time: 54.7759 us. Best GFLOPs: 154.8241
2024-04-30 20:11:16 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_conv2d_add_multiply_add_add_nn_relu_1] Trial #128: GFLOPs: 52.3231. Time: 41.6465 us. Best GFLOPs: 154.8241
