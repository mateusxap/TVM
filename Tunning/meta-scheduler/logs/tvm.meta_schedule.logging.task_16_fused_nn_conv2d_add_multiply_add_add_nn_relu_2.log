2024-04-30 19:06:06 [INFO] [task_scheduler.cc:160] Initializing Task #16: "fused_nn_conv2d_add_multiply_add_add_nn_relu_2"
2024-04-30 19:06:06 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(8), T.int64(8), T.int64(256)), "float32"), p1: T.Buffer((T.int64(1), T.int64(1), T.int64(256), T.int64(512)), "float32"), p2: T.Buffer((T.int64(1), T.int64(1), T.int64(1), T.int64(512)), "float32"), p3: T.Buffer((T.int64(1), T.int64(1), T.int64(1), T.int64(512)), "float32"), p4: T.Buffer((T.int64(1), T.int64(1), T.int64(1), T.int64(512)), "float32"), p5: T.Buffer((T.int64(1), T.int64(4), T.int64(4), T.int64(512)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(4), T.int64(4), T.int64(512)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        pad_temp = T.alloc_buffer((T.int64(1), T.int64(8), T.int64(8), T.int64(256)))
        conv2d_nhwc = T.alloc_buffer((T.int64(1), T.int64(4), T.int64(4), T.int64(512)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(4), T.int64(4), T.int64(512)))
        T_multiply = T.alloc_buffer((T.int64(1), T.int64(4), T.int64(4), T.int64(512)))
        T_add_1 = T.alloc_buffer((T.int64(1), T.int64(4), T.int64(4), T.int64(512)))
        T_add_2 = T.alloc_buffer((T.int64(1), T.int64(4), T.int64(4), T.int64(512)))
        for i0, i1, i2, i3 in T.grid(T.int64(1), T.int64(8), T.int64(8), T.int64(256)):
            with T.block("pad_temp"):
                v_i0, v_i1, v_i2, v_i3 = T.axis.remap("SSSS", [i0, i1, i2, i3])
                T.reads(p0[v_i0, v_i1, v_i2, v_i3])
                T.writes(pad_temp[v_i0, v_i1, v_i2, v_i3])
                pad_temp[v_i0, v_i1, v_i2, v_i3] = p0[v_i0, v_i1, v_i2, v_i3]
        for nn, yy, xx, ff, ry, rx, rc in T.grid(T.int64(1), T.int64(4), T.int64(4), T.int64(512), T.int64(1), T.int64(1), T.int64(256)):
            with T.block("conv2d_nhwc"):
                v_nn, v_yy, v_xx, v_ff, v_ry, v_rx, v_rc = T.axis.remap("SSSSRRR", [nn, yy, xx, ff, ry, rx, rc])
                T.reads(pad_temp[v_nn, v_yy * T.int64(2) + v_ry, v_xx * T.int64(2) + v_rx, v_rc], p1[v_ry, v_rx, v_rc, v_ff])
                T.writes(conv2d_nhwc[v_nn, v_yy, v_xx, v_ff])
                with T.init():
                    conv2d_nhwc[v_nn, v_yy, v_xx, v_ff] = T.float32(0)
                conv2d_nhwc[v_nn, v_yy, v_xx, v_ff] = conv2d_nhwc[v_nn, v_yy, v_xx, v_ff] + pad_temp[v_nn, v_yy * T.int64(2) + v_ry, v_xx * T.int64(2) + v_rx, v_rc] * p1[v_ry, v_rx, v_rc, v_ff]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(4), T.int64(4), T.int64(512)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(conv2d_nhwc[v_ax0, v_ax1, v_ax2, v_ax3], p2[v_ax0, T.int64(0), T.int64(0), v_ax3])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3] = conv2d_nhwc[v_ax0, v_ax1, v_ax2, v_ax3] + p2[v_ax0, T.int64(0), T.int64(0), v_ax3]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(4), T.int64(4), T.int64(512)):
            with T.block("T_multiply"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3], p3[v_ax0, T.int64(0), T.int64(0), v_ax3])
                T.writes(T_multiply[v_ax0, v_ax1, v_ax2, v_ax3])
                T_multiply[v_ax0, v_ax1, v_ax2, v_ax3] = T_add[v_ax0, v_ax1, v_ax2, v_ax3] * p3[v_ax0, T.int64(0), T.int64(0), v_ax3]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(4), T.int64(4), T.int64(512)):
            with T.block("T_add_1"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(T_multiply[v_ax0, v_ax1, v_ax2, v_ax3], p4[v_ax0, T.int64(0), T.int64(0), v_ax3])
                T.writes(T_add_1[v_ax0, v_ax1, v_ax2, v_ax3])
                T_add_1[v_ax0, v_ax1, v_ax2, v_ax3] = T_multiply[v_ax0, v_ax1, v_ax2, v_ax3] + p4[v_ax0, T.int64(0), T.int64(0), v_ax3]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(4), T.int64(4), T.int64(512)):
            with T.block("T_add_2"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(T_add_1[v_ax0, v_ax1, v_ax2, v_ax3], p5[v_ax0, v_ax1, v_ax2, v_ax3])
                T.writes(T_add_2[v_ax0, v_ax1, v_ax2, v_ax3])
                T_add_2[v_ax0, v_ax1, v_ax2, v_ax3] = T_add_1[v_ax0, v_ax1, v_ax2, v_ax3] + p5[v_ax0, v_ax1, v_ax2, v_ax3]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(4), T.int64(4), T.int64(512)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(T_add_2[v_ax0, v_ax1, v_ax2, v_ax3])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(T_add_2[v_ax0, v_ax1, v_ax2, v_ax3], T.float32(0))
2024-04-30 19:06:06 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-30 19:06:06 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(8), T.int64(8), T.int64(256)), "float32"), p1: T.Buffer((T.int64(1), T.int64(1), T.int64(256), T.int64(512)), "float32"), p2: T.Buffer((T.int64(1), T.int64(1), T.int64(1), T.int64(512)), "float32"), p3: T.Buffer((T.int64(1), T.int64(1), T.int64(1), T.int64(512)), "float32"), p4: T.Buffer((T.int64(1), T.int64(1), T.int64(1), T.int64(512)), "float32"), p5: T.Buffer((T.int64(1), T.int64(4), T.int64(4), T.int64(512)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(4), T.int64(4), T.int64(512)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 96, "meta_schedule.unroll_explicit": 0, "meta_schedule.vectorize": 64})
            conv2d_nhwc = T.alloc_buffer((T.int64(1), T.int64(4), T.int64(4), T.int64(512)))
            for nn_0, yy_0, xx_0, ff_0, nn_1, yy_1, xx_1, ff_1, ry_0, rx_0, rc_0, nn_2, yy_2, xx_2, ff_2, ry_1, rx_1, rc_1, nn_3, yy_3, xx_3, ff_3 in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(256), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(4), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(64), T.int64(1), T.int64(1), T.int64(2), T.int64(1)):
                with T.block("conv2d_nhwc"):
                    v_nn = T.axis.spatial(T.int64(1), nn_0 + nn_1 + nn_2 + nn_3)
                    v_yy = T.axis.spatial(T.int64(4), yy_0 * T.int64(4) + yy_1 * T.int64(4) + yy_2 + yy_3)
                    v_xx = T.axis.spatial(T.int64(4), xx_0 * T.int64(2) + xx_1 * T.int64(2) + xx_2 * T.int64(2) + xx_3)
                    v_ff = T.axis.spatial(T.int64(512), ff_0 * T.int64(512) + ff_1 * T.int64(2) + ff_2 + ff_3)
                    v_ry = T.axis.reduce(T.int64(1), ry_0 + ry_1)
                    v_rx = T.axis.reduce(T.int64(1), rx_0 + rx_1)
                    v_rc = T.axis.reduce(T.int64(256), rc_0 * T.int64(64) + rc_1)
                    T.reads(p0[v_nn, v_yy * T.int64(2) + v_ry, v_xx * T.int64(2) + v_rx, v_rc], p1[v_ry, v_rx, v_rc, v_ff])
                    T.writes(conv2d_nhwc[v_nn, v_yy, v_xx, v_ff])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    with T.init():
                        conv2d_nhwc[v_nn, v_yy, v_xx, v_ff] = T.float32(0)
                    conv2d_nhwc[v_nn, v_yy, v_xx, v_ff] = conv2d_nhwc[v_nn, v_yy, v_xx, v_ff] + p0[v_nn, v_yy * T.int64(2) + v_ry, v_xx * T.int64(2) + v_rx, v_rc] * p1[v_ry, v_rx, v_rc, v_ff]
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(4), T.int64(4), T.int64(512)):
                with T.block("T_relu"):
                    v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                    T.reads(conv2d_nhwc[v_ax0, v_ax1, v_ax2, v_ax3], p2[v_ax0, T.int64(0), T.int64(0), v_ax3], p3[v_ax0, T.int64(0), T.int64(0), v_ax3], p4[v_ax0, T.int64(0), T.int64(0), v_ax3], p5[v_ax0, v_ax1, v_ax2, v_ax3])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3] = T.max((conv2d_nhwc[v_ax0, v_ax1, v_ax2, v_ax3] + p2[v_ax0, T.int64(0), T.int64(0), v_ax3]) * p3[v_ax0, T.int64(0), T.int64(0), v_ax3] + p4[v_ax0, T.int64(0), T.int64(0), v_ax3] + p5[v_ax0, v_ax1, v_ax2, v_ax3], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nhwc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_multiply", func_name="main")
b4 = sch.get_block(name="T_add_1", func_name="main")
b5 = sch.get_block(name="T_add_2", func_name="main")
b6 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b5)
sch.compute_inline(block=b4)
sch.compute_inline(block=b3)
sch.compute_inline(block=b2)
sch.compute_inline(block=b0)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l7, l8, l9, l10, l11, l12, l13 = sch.get_loops(block=b1)
v14, v15, v16, v17 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l18, l19, l20, l21 = sch.split(loop=l7, factors=[v14, v15, v16, v17], preserve_unit_iters=True, disable_predication=False)
v22, v23, v24, v25 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 1, 4, 1])
l26, l27, l28, l29 = sch.split(loop=l8, factors=[v22, v23, v24, v25], preserve_unit_iters=True, disable_predication=False)
v30, v31, v32, v33 = sch.sample_perfect_tile(loop=l9, n=4, max_innermost_factor=64, decision=[2, 1, 1, 2])
l34, l35, l36, l37 = sch.split(loop=l9, factors=[v30, v31, v32, v33], preserve_unit_iters=True, disable_predication=False)
v38, v39, v40, v41 = sch.sample_perfect_tile(loop=l10, n=4, max_innermost_factor=64, decision=[1, 256, 2, 1])
l42, l43, l44, l45 = sch.split(loop=l10, factors=[v38, v39, v40, v41], preserve_unit_iters=True, disable_predication=False)
v46, v47 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 1])
l48, l49 = sch.split(loop=l11, factors=[v46, v47], preserve_unit_iters=True, disable_predication=False)
v50, v51 = sch.sample_perfect_tile(loop=l12, n=2, max_innermost_factor=64, decision=[1, 1])
l52, l53 = sch.split(loop=l12, factors=[v50, v51], preserve_unit_iters=True, disable_predication=False)
v54, v55 = sch.sample_perfect_tile(loop=l13, n=2, max_innermost_factor=64, decision=[4, 64])
l56, l57 = sch.split(loop=l13, factors=[v54, v55], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l18, l26, l34, l42, l19, l27, l35, l43, l48, l52, l56, l20, l28, l36, l44, l49, l53, l57, l21, l29, l37, l45)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.parallel", ann_val=96)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.vectorize", ann_val=64)
v58 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.unroll_explicit", ann_val=v58)
2024-04-30 19:06:06 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(8), T.int64(8), T.int64(256)), "float32"), p1: T.Buffer((T.int64(1), T.int64(1), T.int64(256), T.int64(512)), "float32"), p2: T.Buffer((T.int64(1), T.int64(1), T.int64(1), T.int64(512)), "float32"), p3: T.Buffer((T.int64(1), T.int64(1), T.int64(1), T.int64(512)), "float32"), p4: T.Buffer((T.int64(1), T.int64(1), T.int64(1), T.int64(512)), "float32"), p5: T.Buffer((T.int64(1), T.int64(4), T.int64(4), T.int64(512)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(4), T.int64(4), T.int64(512)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 96, "meta_schedule.unroll_explicit": 16, "meta_schedule.vectorize": 64})
            conv2d_nhwc = T.alloc_buffer((T.int64(1), T.int64(4), T.int64(4), T.int64(512)))
            for nn_0, yy_0, xx_0, ff_0, nn_1, yy_1, xx_1, ff_1 in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(256)):
                for ry_0, rx_0, rc_0, nn_2, yy_2, xx_2, ff_2, ry_1, rx_1, rc_1, nn_3, yy_3, xx_3, ff_3 in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(4), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(64), T.int64(1), T.int64(1), T.int64(2), T.int64(1)):
                    with T.block("conv2d_nhwc"):
                        v_nn = T.axis.spatial(T.int64(1), nn_0 + nn_1 + nn_2 + nn_3)
                        v_yy = T.axis.spatial(T.int64(4), yy_0 * T.int64(4) + yy_1 * T.int64(4) + yy_2 + yy_3)
                        v_xx = T.axis.spatial(T.int64(4), xx_0 * T.int64(2) + xx_1 * T.int64(2) + xx_2 * T.int64(2) + xx_3)
                        v_ff = T.axis.spatial(T.int64(512), ff_0 * T.int64(512) + ff_1 * T.int64(2) + ff_2 + ff_3)
                        v_ry = T.axis.reduce(T.int64(1), ry_0 + ry_1)
                        v_rx = T.axis.reduce(T.int64(1), rx_0 + rx_1)
                        v_rc = T.axis.reduce(T.int64(256), rc_0 * T.int64(64) + rc_1)
                        T.reads(p0[v_nn, v_yy * T.int64(2) + v_ry, v_xx * T.int64(2) + v_rx, v_rc], p1[v_ry, v_rx, v_rc, v_ff])
                        T.writes(conv2d_nhwc[v_nn, v_yy, v_xx, v_ff])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_nhwc[v_nn, v_yy, v_xx, v_ff] = T.float32(0)
                        conv2d_nhwc[v_nn, v_yy, v_xx, v_ff] = conv2d_nhwc[v_nn, v_yy, v_xx, v_ff] + p0[v_nn, v_yy * T.int64(2) + v_ry, v_xx * T.int64(2) + v_rx, v_rc] * p1[v_ry, v_rx, v_rc, v_ff]
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(4), T.int64(2), T.int64(2)):
                    with T.block("T_relu"):
                        v_ax0, v_ax1 = T.axis.remap("SS", [ax0, ax1])
                        v_ax2 = T.axis.spatial(T.int64(4), xx_0 * T.int64(2) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(512), ff_1 * T.int64(2) + ax3)
                        T.reads(conv2d_nhwc[v_ax0, v_ax1, v_ax2, v_ax3], p2[v_ax0, T.int64(0), T.int64(0), v_ax3], p3[v_ax0, T.int64(0), T.int64(0), v_ax3], p4[v_ax0, T.int64(0), T.int64(0), v_ax3], p5[v_ax0, v_ax1, v_ax2, v_ax3])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3] = T.max((conv2d_nhwc[v_ax0, v_ax1, v_ax2, v_ax3] + p2[v_ax0, T.int64(0), T.int64(0), v_ax3]) * p3[v_ax0, T.int64(0), T.int64(0), v_ax3] + p4[v_ax0, T.int64(0), T.int64(0), v_ax3] + p5[v_ax0, v_ax1, v_ax2, v_ax3], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nhwc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_multiply", func_name="main")
b4 = sch.get_block(name="T_add_1", func_name="main")
b5 = sch.get_block(name="T_add_2", func_name="main")
b6 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b5)
sch.compute_inline(block=b4)
sch.compute_inline(block=b3)
sch.compute_inline(block=b2)
sch.compute_inline(block=b0)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l7, l8, l9, l10, l11, l12, l13 = sch.get_loops(block=b1)
v14, v15, v16, v17 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l18, l19, l20, l21 = sch.split(loop=l7, factors=[v14, v15, v16, v17], preserve_unit_iters=True, disable_predication=False)
v22, v23, v24, v25 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 1, 4, 1])
l26, l27, l28, l29 = sch.split(loop=l8, factors=[v22, v23, v24, v25], preserve_unit_iters=True, disable_predication=False)
v30, v31, v32, v33 = sch.sample_perfect_tile(loop=l9, n=4, max_innermost_factor=64, decision=[2, 1, 1, 2])
l34, l35, l36, l37 = sch.split(loop=l9, factors=[v30, v31, v32, v33], preserve_unit_iters=True, disable_predication=False)
v38, v39, v40, v41 = sch.sample_perfect_tile(loop=l10, n=4, max_innermost_factor=64, decision=[1, 256, 2, 1])
l42, l43, l44, l45 = sch.split(loop=l10, factors=[v38, v39, v40, v41], preserve_unit_iters=True, disable_predication=False)
v46, v47 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 1])
l48, l49 = sch.split(loop=l11, factors=[v46, v47], preserve_unit_iters=True, disable_predication=False)
v50, v51 = sch.sample_perfect_tile(loop=l12, n=2, max_innermost_factor=64, decision=[1, 1])
l52, l53 = sch.split(loop=l12, factors=[v50, v51], preserve_unit_iters=True, disable_predication=False)
v54, v55 = sch.sample_perfect_tile(loop=l13, n=2, max_innermost_factor=64, decision=[4, 64])
l56, l57 = sch.split(loop=l13, factors=[v54, v55], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l18, l26, l34, l42, l19, l27, l35, l43, l48, l52, l56, l20, l28, l36, l44, l49, l53, l57, l21, l29, l37, l45)
b58, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b58, loop=l43, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.parallel", ann_val=96)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.vectorize", ann_val=64)
v59 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.unroll_explicit", ann_val=v59)
2024-04-30 19:06:06 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(8), T.int64(8), T.int64(256)), "float32"), p1: T.Buffer((T.int64(1), T.int64(1), T.int64(256), T.int64(512)), "float32"), p2: T.Buffer((T.int64(1), T.int64(1), T.int64(1), T.int64(512)), "float32"), p3: T.Buffer((T.int64(1), T.int64(1), T.int64(1), T.int64(512)), "float32"), p4: T.Buffer((T.int64(1), T.int64(1), T.int64(1), T.int64(512)), "float32"), p5: T.Buffer((T.int64(1), T.int64(4), T.int64(4), T.int64(512)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(4), T.int64(4), T.int64(512)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 96, "meta_schedule.unroll_explicit": 512, "meta_schedule.vectorize": 64})
            conv2d_nhwc = T.alloc_buffer((T.int64(1), T.int64(4), T.int64(4), T.int64(512)))
            for nn_0, yy_0, xx_0, ff_0 in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(1)):
                for nn_1, yy_1, xx_1, ff_1, ry_0, rx_0, rc_0, nn_2, yy_2, xx_2, ff_2, ry_1, rx_1, rc_1, nn_3, yy_3, xx_3, ff_3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(256), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(4), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(64), T.int64(1), T.int64(1), T.int64(2), T.int64(1)):
                    with T.block("conv2d_nhwc"):
                        v_nn = T.axis.spatial(T.int64(1), nn_0 + nn_1 + nn_2 + nn_3)
                        v_yy = T.axis.spatial(T.int64(4), yy_0 * T.int64(4) + yy_1 * T.int64(4) + yy_2 + yy_3)
                        v_xx = T.axis.spatial(T.int64(4), xx_0 * T.int64(2) + xx_1 * T.int64(2) + xx_2 * T.int64(2) + xx_3)
                        v_ff = T.axis.spatial(T.int64(512), ff_0 * T.int64(512) + ff_1 * T.int64(2) + ff_2 + ff_3)
                        v_ry = T.axis.reduce(T.int64(1), ry_0 + ry_1)
                        v_rx = T.axis.reduce(T.int64(1), rx_0 + rx_1)
                        v_rc = T.axis.reduce(T.int64(256), rc_0 * T.int64(64) + rc_1)
                        T.reads(p0[v_nn, v_yy * T.int64(2) + v_ry, v_xx * T.int64(2) + v_rx, v_rc], p1[v_ry, v_rx, v_rc, v_ff])
                        T.writes(conv2d_nhwc[v_nn, v_yy, v_xx, v_ff])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_nhwc[v_nn, v_yy, v_xx, v_ff] = T.float32(0)
                        conv2d_nhwc[v_nn, v_yy, v_xx, v_ff] = conv2d_nhwc[v_nn, v_yy, v_xx, v_ff] + p0[v_nn, v_yy * T.int64(2) + v_ry, v_xx * T.int64(2) + v_rx, v_rc] * p1[v_ry, v_rx, v_rc, v_ff]
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(4), T.int64(2), T.int64(512)):
                    with T.block("T_relu"):
                        v_ax0, v_ax1 = T.axis.remap("SS", [ax0, ax1])
                        v_ax2 = T.axis.spatial(T.int64(4), xx_0 * T.int64(2) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(512), ax3)
                        T.reads(conv2d_nhwc[v_ax0, v_ax1, v_ax2, v_ax3], p2[v_ax0, T.int64(0), T.int64(0), v_ax3], p3[v_ax0, T.int64(0), T.int64(0), v_ax3], p4[v_ax0, T.int64(0), T.int64(0), v_ax3], p5[v_ax0, v_ax1, v_ax2, v_ax3])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3] = T.max((conv2d_nhwc[v_ax0, v_ax1, v_ax2, v_ax3] + p2[v_ax0, T.int64(0), T.int64(0), v_ax3]) * p3[v_ax0, T.int64(0), T.int64(0), v_ax3] + p4[v_ax0, T.int64(0), T.int64(0), v_ax3] + p5[v_ax0, v_ax1, v_ax2, v_ax3], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nhwc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_multiply", func_name="main")
b4 = sch.get_block(name="T_add_1", func_name="main")
b5 = sch.get_block(name="T_add_2", func_name="main")
b6 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b5)
sch.compute_inline(block=b4)
sch.compute_inline(block=b3)
sch.compute_inline(block=b2)
sch.compute_inline(block=b0)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l7, l8, l9, l10, l11, l12, l13 = sch.get_loops(block=b1)
v14, v15, v16, v17 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l18, l19, l20, l21 = sch.split(loop=l7, factors=[v14, v15, v16, v17], preserve_unit_iters=True, disable_predication=False)
v22, v23, v24, v25 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 1, 4, 1])
l26, l27, l28, l29 = sch.split(loop=l8, factors=[v22, v23, v24, v25], preserve_unit_iters=True, disable_predication=False)
v30, v31, v32, v33 = sch.sample_perfect_tile(loop=l9, n=4, max_innermost_factor=64, decision=[2, 1, 1, 2])
l34, l35, l36, l37 = sch.split(loop=l9, factors=[v30, v31, v32, v33], preserve_unit_iters=True, disable_predication=False)
v38, v39, v40, v41 = sch.sample_perfect_tile(loop=l10, n=4, max_innermost_factor=64, decision=[1, 256, 2, 1])
l42, l43, l44, l45 = sch.split(loop=l10, factors=[v38, v39, v40, v41], preserve_unit_iters=True, disable_predication=False)
v46, v47 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 1])
l48, l49 = sch.split(loop=l11, factors=[v46, v47], preserve_unit_iters=True, disable_predication=False)
v50, v51 = sch.sample_perfect_tile(loop=l12, n=2, max_innermost_factor=64, decision=[1, 1])
l52, l53 = sch.split(loop=l12, factors=[v50, v51], preserve_unit_iters=True, disable_predication=False)
v54, v55 = sch.sample_perfect_tile(loop=l13, n=2, max_innermost_factor=64, decision=[4, 64])
l56, l57 = sch.split(loop=l13, factors=[v54, v55], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l18, l26, l34, l42, l19, l27, l35, l43, l48, l52, l56, l20, l28, l36, l44, l49, l53, l57, l21, l29, l37, l45)
b58, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b58, loop=l42, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.parallel", ann_val=96)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.vectorize", ann_val=64)
v59 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.unroll_explicit", ann_val=v59)
2024-04-30 19:13:54 [INFO] [task_scheduler.cc:160] Initializing Task #16: "fused_nn_conv2d_add_multiply_add_add_nn_relu_2"
2024-04-30 19:13:54 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(8), T.int64(8), T.int64(256)), "float32"), p1: T.Buffer((T.int64(1), T.int64(1), T.int64(256), T.int64(512)), "float32"), p2: T.Buffer((T.int64(1), T.int64(1), T.int64(1), T.int64(512)), "float32"), p3: T.Buffer((T.int64(1), T.int64(1), T.int64(1), T.int64(512)), "float32"), p4: T.Buffer((T.int64(1), T.int64(1), T.int64(1), T.int64(512)), "float32"), p5: T.Buffer((T.int64(1), T.int64(4), T.int64(4), T.int64(512)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(4), T.int64(4), T.int64(512)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        pad_temp = T.alloc_buffer((T.int64(1), T.int64(8), T.int64(8), T.int64(256)))
        conv2d_nhwc = T.alloc_buffer((T.int64(1), T.int64(4), T.int64(4), T.int64(512)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(4), T.int64(4), T.int64(512)))
        T_multiply = T.alloc_buffer((T.int64(1), T.int64(4), T.int64(4), T.int64(512)))
        T_add_1 = T.alloc_buffer((T.int64(1), T.int64(4), T.int64(4), T.int64(512)))
        T_add_2 = T.alloc_buffer((T.int64(1), T.int64(4), T.int64(4), T.int64(512)))
        for i0, i1, i2, i3 in T.grid(T.int64(1), T.int64(8), T.int64(8), T.int64(256)):
            with T.block("pad_temp"):
                v_i0, v_i1, v_i2, v_i3 = T.axis.remap("SSSS", [i0, i1, i2, i3])
                T.reads(p0[v_i0, v_i1, v_i2, v_i3])
                T.writes(pad_temp[v_i0, v_i1, v_i2, v_i3])
                pad_temp[v_i0, v_i1, v_i2, v_i3] = p0[v_i0, v_i1, v_i2, v_i3]
        for nn, yy, xx, ff, ry, rx, rc in T.grid(T.int64(1), T.int64(4), T.int64(4), T.int64(512), T.int64(1), T.int64(1), T.int64(256)):
            with T.block("conv2d_nhwc"):
                v_nn, v_yy, v_xx, v_ff, v_ry, v_rx, v_rc = T.axis.remap("SSSSRRR", [nn, yy, xx, ff, ry, rx, rc])
                T.reads(pad_temp[v_nn, v_yy * T.int64(2) + v_ry, v_xx * T.int64(2) + v_rx, v_rc], p1[v_ry, v_rx, v_rc, v_ff])
                T.writes(conv2d_nhwc[v_nn, v_yy, v_xx, v_ff])
                with T.init():
                    conv2d_nhwc[v_nn, v_yy, v_xx, v_ff] = T.float32(0)
                conv2d_nhwc[v_nn, v_yy, v_xx, v_ff] = conv2d_nhwc[v_nn, v_yy, v_xx, v_ff] + pad_temp[v_nn, v_yy * T.int64(2) + v_ry, v_xx * T.int64(2) + v_rx, v_rc] * p1[v_ry, v_rx, v_rc, v_ff]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(4), T.int64(4), T.int64(512)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(conv2d_nhwc[v_ax0, v_ax1, v_ax2, v_ax3], p2[v_ax0, T.int64(0), T.int64(0), v_ax3])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3] = conv2d_nhwc[v_ax0, v_ax1, v_ax2, v_ax3] + p2[v_ax0, T.int64(0), T.int64(0), v_ax3]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(4), T.int64(4), T.int64(512)):
            with T.block("T_multiply"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3], p3[v_ax0, T.int64(0), T.int64(0), v_ax3])
                T.writes(T_multiply[v_ax0, v_ax1, v_ax2, v_ax3])
                T_multiply[v_ax0, v_ax1, v_ax2, v_ax3] = T_add[v_ax0, v_ax1, v_ax2, v_ax3] * p3[v_ax0, T.int64(0), T.int64(0), v_ax3]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(4), T.int64(4), T.int64(512)):
            with T.block("T_add_1"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(T_multiply[v_ax0, v_ax1, v_ax2, v_ax3], p4[v_ax0, T.int64(0), T.int64(0), v_ax3])
                T.writes(T_add_1[v_ax0, v_ax1, v_ax2, v_ax3])
                T_add_1[v_ax0, v_ax1, v_ax2, v_ax3] = T_multiply[v_ax0, v_ax1, v_ax2, v_ax3] + p4[v_ax0, T.int64(0), T.int64(0), v_ax3]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(4), T.int64(4), T.int64(512)):
            with T.block("T_add_2"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(T_add_1[v_ax0, v_ax1, v_ax2, v_ax3], p5[v_ax0, v_ax1, v_ax2, v_ax3])
                T.writes(T_add_2[v_ax0, v_ax1, v_ax2, v_ax3])
                T_add_2[v_ax0, v_ax1, v_ax2, v_ax3] = T_add_1[v_ax0, v_ax1, v_ax2, v_ax3] + p5[v_ax0, v_ax1, v_ax2, v_ax3]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(4), T.int64(4), T.int64(512)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(T_add_2[v_ax0, v_ax1, v_ax2, v_ax3])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(T_add_2[v_ax0, v_ax1, v_ax2, v_ax3], T.float32(0))
2024-04-30 19:13:54 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-30 19:13:54 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(8), T.int64(8), T.int64(256)), "float32"), p1: T.Buffer((T.int64(1), T.int64(1), T.int64(256), T.int64(512)), "float32"), p2: T.Buffer((T.int64(1), T.int64(1), T.int64(1), T.int64(512)), "float32"), p3: T.Buffer((T.int64(1), T.int64(1), T.int64(1), T.int64(512)), "float32"), p4: T.Buffer((T.int64(1), T.int64(1), T.int64(1), T.int64(512)), "float32"), p5: T.Buffer((T.int64(1), T.int64(4), T.int64(4), T.int64(512)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(4), T.int64(4), T.int64(512)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 96, "meta_schedule.unroll_explicit": 0, "meta_schedule.vectorize": 64})
            conv2d_nhwc = T.alloc_buffer((T.int64(1), T.int64(4), T.int64(4), T.int64(512)))
            for nn_0, yy_0, xx_0, ff_0, nn_1, yy_1, xx_1, ff_1, ry_0, rx_0, rc_0, nn_2, yy_2, xx_2, ff_2, ry_1, rx_1, rc_1, nn_3, yy_3, xx_3, ff_3 in T.grid(T.int64(1), T.int64(2), T.int64(2), T.int64(8), T.int64(1), T.int64(1), T.int64(2), T.int64(4), T.int64(1), T.int64(1), T.int64(8), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(1), T.int64(16)):
                with T.block("conv2d_nhwc"):
                    v_nn = T.axis.spatial(T.int64(1), nn_0 + nn_1 + nn_2 + nn_3)
                    v_yy = T.axis.spatial(T.int64(4), yy_0 * T.int64(2) + yy_1 * T.int64(2) + yy_2 + yy_3)
                    v_xx = T.axis.spatial(T.int64(4), xx_0 * T.int64(2) + xx_1 + xx_2 + xx_3)
                    v_ff = T.axis.spatial(T.int64(512), ff_0 * T.int64(64) + ff_1 * T.int64(16) + ff_2 * T.int64(16) + ff_3)
                    v_ry = T.axis.reduce(T.int64(1), ry_0 + ry_1)
                    v_rx = T.axis.reduce(T.int64(1), rx_0 + rx_1)
                    v_rc = T.axis.reduce(T.int64(256), rc_0 * T.int64(32) + rc_1)
                    T.reads(p0[v_nn, v_yy * T.int64(2) + v_ry, v_xx * T.int64(2) + v_rx, v_rc], p1[v_ry, v_rx, v_rc, v_ff])
                    T.writes(conv2d_nhwc[v_nn, v_yy, v_xx, v_ff])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    with T.init():
                        conv2d_nhwc[v_nn, v_yy, v_xx, v_ff] = T.float32(0)
                    conv2d_nhwc[v_nn, v_yy, v_xx, v_ff] = conv2d_nhwc[v_nn, v_yy, v_xx, v_ff] + p0[v_nn, v_yy * T.int64(2) + v_ry, v_xx * T.int64(2) + v_rx, v_rc] * p1[v_ry, v_rx, v_rc, v_ff]
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(4), T.int64(4), T.int64(512)):
                with T.block("T_relu"):
                    v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                    T.reads(conv2d_nhwc[v_ax0, v_ax1, v_ax2, v_ax3], p2[v_ax0, T.int64(0), T.int64(0), v_ax3], p3[v_ax0, T.int64(0), T.int64(0), v_ax3], p4[v_ax0, T.int64(0), T.int64(0), v_ax3], p5[v_ax0, v_ax1, v_ax2, v_ax3])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3] = T.max((conv2d_nhwc[v_ax0, v_ax1, v_ax2, v_ax3] + p2[v_ax0, T.int64(0), T.int64(0), v_ax3]) * p3[v_ax0, T.int64(0), T.int64(0), v_ax3] + p4[v_ax0, T.int64(0), T.int64(0), v_ax3] + p5[v_ax0, v_ax1, v_ax2, v_ax3], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nhwc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_multiply", func_name="main")
b4 = sch.get_block(name="T_add_1", func_name="main")
b5 = sch.get_block(name="T_add_2", func_name="main")
b6 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b5)
sch.compute_inline(block=b4)
sch.compute_inline(block=b3)
sch.compute_inline(block=b2)
sch.compute_inline(block=b0)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l7, l8, l9, l10, l11, l12, l13 = sch.get_loops(block=b1)
v14, v15, v16, v17 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l18, l19, l20, l21 = sch.split(loop=l7, factors=[v14, v15, v16, v17], preserve_unit_iters=True, disable_predication=False)
v22, v23, v24, v25 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[2, 1, 2, 1])
l26, l27, l28, l29 = sch.split(loop=l8, factors=[v22, v23, v24, v25], preserve_unit_iters=True, disable_predication=False)
v30, v31, v32, v33 = sch.sample_perfect_tile(loop=l9, n=4, max_innermost_factor=64, decision=[2, 2, 1, 1])
l34, l35, l36, l37 = sch.split(loop=l9, factors=[v30, v31, v32, v33], preserve_unit_iters=True, disable_predication=False)
v38, v39, v40, v41 = sch.sample_perfect_tile(loop=l10, n=4, max_innermost_factor=64, decision=[8, 4, 1, 16])
l42, l43, l44, l45 = sch.split(loop=l10, factors=[v38, v39, v40, v41], preserve_unit_iters=True, disable_predication=False)
v46, v47 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 1])
l48, l49 = sch.split(loop=l11, factors=[v46, v47], preserve_unit_iters=True, disable_predication=False)
v50, v51 = sch.sample_perfect_tile(loop=l12, n=2, max_innermost_factor=64, decision=[1, 1])
l52, l53 = sch.split(loop=l12, factors=[v50, v51], preserve_unit_iters=True, disable_predication=False)
v54, v55 = sch.sample_perfect_tile(loop=l13, n=2, max_innermost_factor=64, decision=[8, 32])
l56, l57 = sch.split(loop=l13, factors=[v54, v55], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l18, l26, l34, l42, l19, l27, l35, l43, l48, l52, l56, l20, l28, l36, l44, l49, l53, l57, l21, l29, l37, l45)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.parallel", ann_val=96)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.vectorize", ann_val=64)
v58 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.unroll_explicit", ann_val=v58)
2024-04-30 19:13:54 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(8), T.int64(8), T.int64(256)), "float32"), p1: T.Buffer((T.int64(1), T.int64(1), T.int64(256), T.int64(512)), "float32"), p2: T.Buffer((T.int64(1), T.int64(1), T.int64(1), T.int64(512)), "float32"), p3: T.Buffer((T.int64(1), T.int64(1), T.int64(1), T.int64(512)), "float32"), p4: T.Buffer((T.int64(1), T.int64(1), T.int64(1), T.int64(512)), "float32"), p5: T.Buffer((T.int64(1), T.int64(4), T.int64(4), T.int64(512)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(4), T.int64(4), T.int64(512)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 96, "meta_schedule.unroll_explicit": 512, "meta_schedule.vectorize": 64})
            conv2d_nhwc = T.alloc_buffer((T.int64(1), T.int64(4), T.int64(4), T.int64(512)))
            for nn_0, yy_0, xx_0, ff_0, nn_1, yy_1, xx_1, ff_1 in T.grid(T.int64(1), T.int64(2), T.int64(2), T.int64(8), T.int64(1), T.int64(1), T.int64(2), T.int64(4)):
                for ry_0, rx_0, rc_0, nn_2, yy_2, xx_2, ff_2, ry_1, rx_1, rc_1, nn_3, yy_3, xx_3, ff_3 in T.grid(T.int64(1), T.int64(1), T.int64(8), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(1), T.int64(16)):
                    with T.block("conv2d_nhwc"):
                        v_nn = T.axis.spatial(T.int64(1), nn_0 + nn_1 + nn_2 + nn_3)
                        v_yy = T.axis.spatial(T.int64(4), yy_0 * T.int64(2) + yy_1 * T.int64(2) + yy_2 + yy_3)
                        v_xx = T.axis.spatial(T.int64(4), xx_0 * T.int64(2) + xx_1 + xx_2 + xx_3)
                        v_ff = T.axis.spatial(T.int64(512), ff_0 * T.int64(64) + ff_1 * T.int64(16) + ff_2 * T.int64(16) + ff_3)
                        v_ry = T.axis.reduce(T.int64(1), ry_0 + ry_1)
                        v_rx = T.axis.reduce(T.int64(1), rx_0 + rx_1)
                        v_rc = T.axis.reduce(T.int64(256), rc_0 * T.int64(32) + rc_1)
                        T.reads(p0[v_nn, v_yy * T.int64(2) + v_ry, v_xx * T.int64(2) + v_rx, v_rc], p1[v_ry, v_rx, v_rc, v_ff])
                        T.writes(conv2d_nhwc[v_nn, v_yy, v_xx, v_ff])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_nhwc[v_nn, v_yy, v_xx, v_ff] = T.float32(0)
                        conv2d_nhwc[v_nn, v_yy, v_xx, v_ff] = conv2d_nhwc[v_nn, v_yy, v_xx, v_ff] + p0[v_nn, v_yy * T.int64(2) + v_ry, v_xx * T.int64(2) + v_rx, v_rc] * p1[v_ry, v_rx, v_rc, v_ff]
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(16)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(4), yy_0 * T.int64(2) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(4), xx_0 * T.int64(2) + xx_1 + ax2)
                        v_ax3 = T.axis.spatial(T.int64(512), ff_0 * T.int64(64) + ff_1 * T.int64(16) + ax3)
                        T.reads(conv2d_nhwc[v_ax0, v_ax1, v_ax2, v_ax3], p2[v_ax0, T.int64(0), T.int64(0), v_ax3], p3[v_ax0, T.int64(0), T.int64(0), v_ax3], p4[v_ax0, T.int64(0), T.int64(0), v_ax3], p5[v_ax0, v_ax1, v_ax2, v_ax3])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3] = T.max((conv2d_nhwc[v_ax0, v_ax1, v_ax2, v_ax3] + p2[v_ax0, T.int64(0), T.int64(0), v_ax3]) * p3[v_ax0, T.int64(0), T.int64(0), v_ax3] + p4[v_ax0, T.int64(0), T.int64(0), v_ax3] + p5[v_ax0, v_ax1, v_ax2, v_ax3], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nhwc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_multiply", func_name="main")
b4 = sch.get_block(name="T_add_1", func_name="main")
b5 = sch.get_block(name="T_add_2", func_name="main")
b6 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b5)
sch.compute_inline(block=b4)
sch.compute_inline(block=b3)
sch.compute_inline(block=b2)
sch.compute_inline(block=b0)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l7, l8, l9, l10, l11, l12, l13 = sch.get_loops(block=b1)
v14, v15, v16, v17 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l18, l19, l20, l21 = sch.split(loop=l7, factors=[v14, v15, v16, v17], preserve_unit_iters=True, disable_predication=False)
v22, v23, v24, v25 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[2, 1, 2, 1])
l26, l27, l28, l29 = sch.split(loop=l8, factors=[v22, v23, v24, v25], preserve_unit_iters=True, disable_predication=False)
v30, v31, v32, v33 = sch.sample_perfect_tile(loop=l9, n=4, max_innermost_factor=64, decision=[2, 2, 1, 1])
l34, l35, l36, l37 = sch.split(loop=l9, factors=[v30, v31, v32, v33], preserve_unit_iters=True, disable_predication=False)
v38, v39, v40, v41 = sch.sample_perfect_tile(loop=l10, n=4, max_innermost_factor=64, decision=[8, 4, 1, 16])
l42, l43, l44, l45 = sch.split(loop=l10, factors=[v38, v39, v40, v41], preserve_unit_iters=True, disable_predication=False)
v46, v47 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 1])
l48, l49 = sch.split(loop=l11, factors=[v46, v47], preserve_unit_iters=True, disable_predication=False)
v50, v51 = sch.sample_perfect_tile(loop=l12, n=2, max_innermost_factor=64, decision=[1, 1])
l52, l53 = sch.split(loop=l12, factors=[v50, v51], preserve_unit_iters=True, disable_predication=False)
v54, v55 = sch.sample_perfect_tile(loop=l13, n=2, max_innermost_factor=64, decision=[8, 32])
l56, l57 = sch.split(loop=l13, factors=[v54, v55], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l18, l26, l34, l42, l19, l27, l35, l43, l48, l52, l56, l20, l28, l36, l44, l49, l53, l57, l21, l29, l37, l45)
b58, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b58, loop=l43, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.parallel", ann_val=96)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.vectorize", ann_val=64)
v59 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.unroll_explicit", ann_val=v59)
2024-04-30 19:13:54 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(8), T.int64(8), T.int64(256)), "float32"), p1: T.Buffer((T.int64(1), T.int64(1), T.int64(256), T.int64(512)), "float32"), p2: T.Buffer((T.int64(1), T.int64(1), T.int64(1), T.int64(512)), "float32"), p3: T.Buffer((T.int64(1), T.int64(1), T.int64(1), T.int64(512)), "float32"), p4: T.Buffer((T.int64(1), T.int64(1), T.int64(1), T.int64(512)), "float32"), p5: T.Buffer((T.int64(1), T.int64(4), T.int64(4), T.int64(512)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(4), T.int64(4), T.int64(512)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 96, "meta_schedule.unroll_explicit": 16, "meta_schedule.vectorize": 64})
            conv2d_nhwc = T.alloc_buffer((T.int64(1), T.int64(4), T.int64(4), T.int64(512)))
            for nn_0, yy_0, xx_0, ff_0 in T.grid(T.int64(1), T.int64(2), T.int64(2), T.int64(8)):
                for nn_1, yy_1, xx_1, ff_1, ry_0, rx_0, rc_0, nn_2, yy_2, xx_2, ff_2, ry_1, rx_1, rc_1, nn_3, yy_3, xx_3, ff_3 in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(4), T.int64(1), T.int64(1), T.int64(8), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(1), T.int64(16)):
                    with T.block("conv2d_nhwc"):
                        v_nn = T.axis.spatial(T.int64(1), nn_0 + nn_1 + nn_2 + nn_3)
                        v_yy = T.axis.spatial(T.int64(4), yy_0 * T.int64(2) + yy_1 * T.int64(2) + yy_2 + yy_3)
                        v_xx = T.axis.spatial(T.int64(4), xx_0 * T.int64(2) + xx_1 + xx_2 + xx_3)
                        v_ff = T.axis.spatial(T.int64(512), ff_0 * T.int64(64) + ff_1 * T.int64(16) + ff_2 * T.int64(16) + ff_3)
                        v_ry = T.axis.reduce(T.int64(1), ry_0 + ry_1)
                        v_rx = T.axis.reduce(T.int64(1), rx_0 + rx_1)
                        v_rc = T.axis.reduce(T.int64(256), rc_0 * T.int64(32) + rc_1)
                        T.reads(p0[v_nn, v_yy * T.int64(2) + v_ry, v_xx * T.int64(2) + v_rx, v_rc], p1[v_ry, v_rx, v_rc, v_ff])
                        T.writes(conv2d_nhwc[v_nn, v_yy, v_xx, v_ff])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_nhwc[v_nn, v_yy, v_xx, v_ff] = T.float32(0)
                        conv2d_nhwc[v_nn, v_yy, v_xx, v_ff] = conv2d_nhwc[v_nn, v_yy, v_xx, v_ff] + p0[v_nn, v_yy * T.int64(2) + v_ry, v_xx * T.int64(2) + v_rx, v_rc] * p1[v_ry, v_rx, v_rc, v_ff]
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(2), T.int64(64)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(4), yy_0 * T.int64(2) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(4), xx_0 * T.int64(2) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(512), ff_0 * T.int64(64) + ax3)
                        T.reads(conv2d_nhwc[v_ax0, v_ax1, v_ax2, v_ax3], p2[v_ax0, T.int64(0), T.int64(0), v_ax3], p3[v_ax0, T.int64(0), T.int64(0), v_ax3], p4[v_ax0, T.int64(0), T.int64(0), v_ax3], p5[v_ax0, v_ax1, v_ax2, v_ax3])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3] = T.max((conv2d_nhwc[v_ax0, v_ax1, v_ax2, v_ax3] + p2[v_ax0, T.int64(0), T.int64(0), v_ax3]) * p3[v_ax0, T.int64(0), T.int64(0), v_ax3] + p4[v_ax0, T.int64(0), T.int64(0), v_ax3] + p5[v_ax0, v_ax1, v_ax2, v_ax3], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nhwc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_multiply", func_name="main")
b4 = sch.get_block(name="T_add_1", func_name="main")
b5 = sch.get_block(name="T_add_2", func_name="main")
b6 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b5)
sch.compute_inline(block=b4)
sch.compute_inline(block=b3)
sch.compute_inline(block=b2)
sch.compute_inline(block=b0)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l7, l8, l9, l10, l11, l12, l13 = sch.get_loops(block=b1)
v14, v15, v16, v17 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l18, l19, l20, l21 = sch.split(loop=l7, factors=[v14, v15, v16, v17], preserve_unit_iters=True, disable_predication=False)
v22, v23, v24, v25 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[2, 1, 2, 1])
l26, l27, l28, l29 = sch.split(loop=l8, factors=[v22, v23, v24, v25], preserve_unit_iters=True, disable_predication=False)
v30, v31, v32, v33 = sch.sample_perfect_tile(loop=l9, n=4, max_innermost_factor=64, decision=[2, 2, 1, 1])
l34, l35, l36, l37 = sch.split(loop=l9, factors=[v30, v31, v32, v33], preserve_unit_iters=True, disable_predication=False)
v38, v39, v40, v41 = sch.sample_perfect_tile(loop=l10, n=4, max_innermost_factor=64, decision=[8, 4, 1, 16])
l42, l43, l44, l45 = sch.split(loop=l10, factors=[v38, v39, v40, v41], preserve_unit_iters=True, disable_predication=False)
v46, v47 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 1])
l48, l49 = sch.split(loop=l11, factors=[v46, v47], preserve_unit_iters=True, disable_predication=False)
v50, v51 = sch.sample_perfect_tile(loop=l12, n=2, max_innermost_factor=64, decision=[1, 1])
l52, l53 = sch.split(loop=l12, factors=[v50, v51], preserve_unit_iters=True, disable_predication=False)
v54, v55 = sch.sample_perfect_tile(loop=l13, n=2, max_innermost_factor=64, decision=[8, 32])
l56, l57 = sch.split(loop=l13, factors=[v54, v55], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l18, l26, l34, l42, l19, l27, l35, l43, l48, l52, l56, l20, l28, l36, l44, l49, l53, l57, l21, l29, l37, l45)
b58, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b58, loop=l42, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.parallel", ann_val=96)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.vectorize", ann_val=64)
v59 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.unroll_explicit", ann_val=v59)
2024-04-30 19:22:33 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-30 19:22:33 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-30 19:22:34 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xeeb39b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x8d19128)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x1bef58e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x89568c8)]: 0 failure(s)
2024-04-30 19:22:34 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-30 19:22:35 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xeeb39b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x8d19128)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x1bef58e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x89568c8)]: 0 failure(s)
2024-04-30 19:22:37 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xeeb39b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x8d19128)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x1bef58e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x89568c8)]: 0 failure(s)
2024-04-30 19:22:38 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xeeb39b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x8d19128)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x1bef58e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x89568c8)]: 0 failure(s)
2024-04-30 19:22:39 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xeeb39b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x8d19128)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x1bef58e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x89568c8)]: 0 failure(s)
2024-04-30 19:22:40 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9996  0.9992  0.9987  0.9987  0.9983  0.9980  0.9977  0.9971  0.9965  0.9963  0.9957  0.9954  0.9952  0.9949  0.9943  0.9940
[17 : 32]:	0.9938  0.9938  0.9935  0.9928  0.9926  0.9914  0.9912  0.9911  0.9908  0.9907  0.9906  0.9904  0.9904  0.9903  0.9896  0.9892
[33 : 48]:	0.9892  0.9891  0.9890  0.9889  0.9884  0.9883  0.9876  0.9871  0.9866  0.9858  0.9856  0.9855  0.9851  0.9848  0.9834  0.9828
[49 : 64]:	0.9826  0.9818  0.9804  0.9799  0.9797  0.9795  0.9794  0.9782  0.9778  0.9778  0.9763  0.9760  0.9755  0.9755  0.9752  0.9750
2024-04-30 19:22:40 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-30 19:22:40 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-30 19:36:30 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_conv2d_add_multiply_add_add_nn_relu_2] Trial #1: GFLOPs: 17.9000. Time: 236.6071 us. Best GFLOPs: 17.9000
2024-04-30 19:36:30 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_conv2d_add_multiply_add_add_nn_relu_2] Trial #2: GFLOPs: 13.3820. Time: 316.4887 us. Best GFLOPs: 17.9000
2024-04-30 19:36:30 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_conv2d_add_multiply_add_add_nn_relu_2] Trial #3: GFLOPs: 28.7993. Time: 147.0613 us. Best GFLOPs: 28.7993
2024-04-30 19:36:30 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_conv2d_add_multiply_add_add_nn_relu_2] Trial #4: GFLOPs: 32.7394. Time: 129.3629 us. Best GFLOPs: 32.7394
2024-04-30 19:36:30 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_conv2d_add_multiply_add_add_nn_relu_2] Trial #5: GFLOPs: 20.3586. Time: 208.0332 us. Best GFLOPs: 32.7394
2024-04-30 19:36:30 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_conv2d_add_multiply_add_add_nn_relu_2] Trial #6: GFLOPs: 47.0363. Time: 90.0425 us. Best GFLOPs: 47.0363
2024-04-30 19:36:30 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_conv2d_add_multiply_add_add_nn_relu_2] Trial #7: GFLOPs: 49.6521. Time: 85.2988 us. Best GFLOPs: 49.6521
2024-04-30 19:36:30 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_conv2d_add_multiply_add_add_nn_relu_2] Trial #8: GFLOPs: 32.4906. Time: 130.3536 us. Best GFLOPs: 49.6521
2024-04-30 19:36:30 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_conv2d_add_multiply_add_add_nn_relu_2] Trial #9: GFLOPs: 68.5025. Time: 61.8264 us. Best GFLOPs: 68.5025
2024-04-30 19:36:30 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_conv2d_add_multiply_add_add_nn_relu_2] Trial #10: GFLOPs: 27.2910. Time: 155.1893 us. Best GFLOPs: 68.5025
2024-04-30 19:36:30 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_conv2d_add_multiply_add_add_nn_relu_2] Trial #11: GFLOPs: 44.6923. Time: 94.7651 us. Best GFLOPs: 68.5025
2024-04-30 19:36:30 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_conv2d_add_multiply_add_add_nn_relu_2] Trial #12: GFLOPs: 37.9234. Time: 111.6796 us. Best GFLOPs: 68.5025
2024-04-30 19:36:30 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_conv2d_add_multiply_add_add_nn_relu_2] Trial #13: GFLOPs: 95.1641. Time: 44.5048 us. Best GFLOPs: 95.1641
2024-04-30 19:36:30 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_conv2d_add_multiply_add_add_nn_relu_2] Trial #14: GFLOPs: 73.2172. Time: 57.8452 us. Best GFLOPs: 95.1641
2024-04-30 19:36:30 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_conv2d_add_multiply_add_add_nn_relu_2] Trial #15: GFLOPs: 16.7727. Time: 252.5093 us. Best GFLOPs: 95.1641
2024-04-30 19:36:30 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_conv2d_add_multiply_add_add_nn_relu_2] Trial #16: GFLOPs: 29.8955. Time: 141.6690 us. Best GFLOPs: 95.1641
2024-04-30 19:36:30 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_conv2d_add_multiply_add_add_nn_relu_2] Trial #17: GFLOPs: 24.4413. Time: 173.2829 us. Best GFLOPs: 95.1641
2024-04-30 19:36:30 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_conv2d_add_multiply_add_add_nn_relu_2] Trial #18: GFLOPs: 90.8448. Time: 46.6209 us. Best GFLOPs: 95.1641
2024-04-30 19:36:30 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_conv2d_add_multiply_add_add_nn_relu_2] Trial #19: GFLOPs: 86.0006. Time: 49.2469 us. Best GFLOPs: 95.1641
2024-04-30 19:36:30 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_conv2d_add_multiply_add_add_nn_relu_2] Trial #20: GFLOPs: 110.3209. Time: 38.3904 us. Best GFLOPs: 110.3209
2024-04-30 19:36:30 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_conv2d_add_multiply_add_add_nn_relu_2] Trial #21: GFLOPs: 30.9751. Time: 136.7313 us. Best GFLOPs: 110.3209
2024-04-30 19:36:30 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_conv2d_add_multiply_add_add_nn_relu_2] Trial #22: GFLOPs: 88.5547. Time: 47.8266 us. Best GFLOPs: 110.3209
2024-04-30 19:36:30 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_conv2d_add_multiply_add_add_nn_relu_2] Trial #23: GFLOPs: 13.8909. Time: 304.8938 us. Best GFLOPs: 110.3209
2024-04-30 19:36:30 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_conv2d_add_multiply_add_add_nn_relu_2] Trial #24: GFLOPs: 41.5027. Time: 102.0479 us. Best GFLOPs: 110.3209
2024-04-30 19:36:30 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_conv2d_add_multiply_add_add_nn_relu_2] Trial #25: GFLOPs: 109.0861. Time: 38.8250 us. Best GFLOPs: 110.3209
2024-04-30 19:36:30 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_conv2d_add_multiply_add_add_nn_relu_2] Trial #26: GFLOPs: 23.4896. Time: 180.3034 us. Best GFLOPs: 110.3209
2024-04-30 19:36:30 [INFO] [task_scheduler.cc:121] [Task #16: fused_nn_conv2d_add_multiply_add_add_nn_relu_2] Trial #27: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(8), T.int64(8), T.int64(256)), "float32"), p1: T.Buffer((T.int64(1), T.int64(1), T.int64(256), T.int64(512)), "float32"), p2: T.Buffer((T.int64(1), T.int64(1), T.int64(1), T.int64(512)), "float32"), p3: T.Buffer((T.int64(1), T.int64(1), T.int64(1), T.int64(512)), "float32"), p4: T.Buffer((T.int64(1), T.int64(1), T.int64(1), T.int64(512)), "float32"), p5: T.Buffer((T.int64(1), T.int64(4), T.int64(4), T.int64(512)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(4), T.int64(4), T.int64(512)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_nhwc = T.alloc_buffer((T.int64(1), T.int64(4), T.int64(4), T.int64(512)))
        p1_global = T.alloc_buffer((T.int64(2), T.int64(8), T.int64(16), T.int64(16), T.int64(16), T.int64(2)))
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(256), T.int64(512)):
            with T.block("p1_global"):
                v0, v1, v2, v3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(p1[v0, v1, v2, v3])
                T.writes(p1_global[v3 // T.int64(256), v3 % T.int64(256) // T.int64(32), v2 // T.int64(16), v3 % T.int64(32) // T.int64(2), v2 % T.int64(16), v3 % T.int64(2)])
                T.block_attr({"meta_schedule.layout_rewrite_preproc": T.bool(True)})
                p1_global[v3 // T.int64(256), v3 % T.int64(256) // T.int64(32), v2 // T.int64(16), v3 % T.int64(32) // T.int64(2), v2 % T.int64(16), v3 % T.int64(2)] = p1[v0, v1, v2, v3]
        for nn_0_yy_0_xx_0_ff_0_fused in T.parallel(T.int64(8), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for nn_1, yy_1, xx_1, ff_1 in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(8)):
                for nn_2_init, yy_2_init, xx_2_init, ff_2_init, nn_3_init, yy_3_init, xx_3_init in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(16), T.int64(1), T.int64(1), T.int64(1)):
                    for ff_3_fused_init in T.vectorized(T.int64(2)):
                        with T.block("conv2d_nhwc_init"):
                            v_nn = T.axis.spatial(T.int64(1), nn_1 + nn_2_init + nn_3_init)
                            v_yy = T.axis.spatial(T.int64(4), nn_0_yy_0_xx_0_ff_0_fused // T.int64(4) * T.int64(2) + yy_1 + yy_2_init + yy_3_init)
                            v_xx = T.axis.spatial(T.int64(4), nn_0_yy_0_xx_0_ff_0_fused % T.int64(4) // T.int64(2) * T.int64(2) + xx_1 * T.int64(2) + xx_2_init + xx_3_init)
                            v_ff = T.axis.spatial(T.int64(512), nn_0_yy_0_xx_0_ff_0_fused % T.int64(2) * T.int64(256) + ff_1 * T.int64(32) + ff_2_init * T.int64(2) + ff_3_fused_init)
                            T.reads()
                            T.writes(conv2d_nhwc[v_nn, v_yy, v_xx, v_ff])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_nhwc[v_nn, v_yy, v_xx, v_ff] = T.float32(0)
                for ry_0, rx_0, rc_0, nn_2, yy_2, xx_2, ff_2, ry_1, rx_1, rc_1, nn_3, yy_3, xx_3 in T.grid(T.int64(1), T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(2), T.int64(16), T.int64(1), T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(1)):
                    for ff_3_fused in T.vectorized(T.int64(2)):
                        with T.block("conv2d_nhwc_update"):
                            v_nn = T.axis.spatial(T.int64(1), nn_1 + nn_2 + nn_3)
                            v_yy = T.axis.spatial(T.int64(4), nn_0_yy_0_xx_0_ff_0_fused // T.int64(4) * T.int64(2) + yy_1 + yy_2 + yy_3)
                            v_xx = T.axis.spatial(T.int64(4), nn_0_yy_0_xx_0_ff_0_fused % T.int64(4) // T.int64(2) * T.int64(2) + xx_1 * T.int64(2) + xx_2 + xx_3)
                            v_ff = T.axis.spatial(T.int64(512), nn_0_yy_0_xx_0_ff_0_fused % T.int64(2) * T.int64(256) + ff_1 * T.int64(32) + ff_2 * T.int64(2) + ff_3_fused)
                            v_ry = T.axis.reduce(T.int64(1), ry_0 + ry_1)
                            v_rx = T.axis.reduce(T.int64(1), rx_0 + rx_1)
                            v_rc = T.axis.reduce(T.int64(256), rc_0 * T.int64(16) + rc_1)
                            T.reads(conv2d_nhwc[v_nn, v_yy, v_xx, v_ff], p0[v_nn, v_yy * T.int64(2) + v_ry, v_xx * T.int64(2) + v_rx, v_rc], p1_global[v_ff // T.int64(256), v_ff % T.int64(256) // T.int64(32), v_rc // T.int64(16), v_ff % T.int64(32) // T.int64(2), v_rc % T.int64(16), v_ff % T.int64(2)])
                            T.writes(conv2d_nhwc[v_nn, v_yy, v_xx, v_ff])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_nhwc[v_nn, v_yy, v_xx, v_ff] = conv2d_nhwc[v_nn, v_yy, v_xx, v_ff] + p0[v_nn, v_yy * T.int64(2) + v_ry, v_xx * T.int64(2) + v_rx, v_rc] * p1_global[v_ff // T.int64(256), v_ff % T.int64(256) // T.int64(32), v_rc // T.int64(16), v_ff % T.int64(32) // T.int64(2), v_rc % T.int64(16), v_ff % T.int64(2)]
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(2), T.int64(256)):
                with T.block("T_relu"):
                    v_ax0 = T.axis.spatial(T.int64(1), ax0)
                    v_ax1 = T.axis.spatial(T.int64(4), nn_0_yy_0_xx_0_ff_0_fused // T.int64(4) * T.int64(2) + ax1)
                    v_ax2 = T.axis.spatial(T.int64(4), nn_0_yy_0_xx_0_ff_0_fused % T.int64(4) // T.int64(2) * T.int64(2) + ax2)
                    v_ax3 = T.axis.spatial(T.int64(512), nn_0_yy_0_xx_0_ff_0_fused % T.int64(2) * T.int64(256) + ax3)
                    T.reads(conv2d_nhwc[v_ax0, v_ax1, v_ax2, v_ax3], p2[v_ax0, T.int64(0), T.int64(0), v_ax3], p3[v_ax0, T.int64(0), T.int64(0), v_ax3], p4[v_ax0, T.int64(0), T.int64(0), v_ax3], p5[v_ax0, v_ax1, v_ax2, v_ax3])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3] = T.max((conv2d_nhwc[v_ax0, v_ax1, v_ax2, v_ax3] + p2[v_ax0, T.int64(0), T.int64(0), v_ax3]) * p3[v_ax0, T.int64(0), T.int64(0), v_ax3] + p4[v_ax0, T.int64(0), T.int64(0), v_ax3] + p5[v_ax0, v_ax1, v_ax2, v_ax3], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nhwc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_multiply", func_name="main")
b4 = sch.get_block(name="T_add_1", func_name="main")
b5 = sch.get_block(name="T_add_2", func_name="main")
b6 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b5)
sch.compute_inline(block=b4)
sch.compute_inline(block=b3)
sch.compute_inline(block=b2)
sch.compute_inline(block=b0)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l7, l8, l9, l10, l11, l12, l13 = sch.get_loops(block=b1)
v14, v15, v16, v17 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l18, l19, l20, l21 = sch.split(loop=l7, factors=[v14, v15, v16, v17], preserve_unit_iters=True, disable_predication=False)
v22, v23, v24, v25 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[2, 2, 1, 1])
l26, l27, l28, l29 = sch.split(loop=l8, factors=[v22, v23, v24, v25], preserve_unit_iters=True, disable_predication=False)
v30, v31, v32, v33 = sch.sample_perfect_tile(loop=l9, n=4, max_innermost_factor=64, decision=[2, 1, 2, 1])
l34, l35, l36, l37 = sch.split(loop=l9, factors=[v30, v31, v32, v33], preserve_unit_iters=True, disable_predication=False)
v38, v39, v40, v41 = sch.sample_perfect_tile(loop=l10, n=4, max_innermost_factor=64, decision=[2, 8, 16, 2])
l42, l43, l44, l45 = sch.split(loop=l10, factors=[v38, v39, v40, v41], preserve_unit_iters=True, disable_predication=False)
v46, v47 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 1])
l48, l49 = sch.split(loop=l11, factors=[v46, v47], preserve_unit_iters=True, disable_predication=False)
v50, v51 = sch.sample_perfect_tile(loop=l12, n=2, max_innermost_factor=64, decision=[1, 1])
l52, l53 = sch.split(loop=l12, factors=[v50, v51], preserve_unit_iters=True, disable_predication=False)
v54, v55 = sch.sample_perfect_tile(loop=l13, n=2, max_innermost_factor=64, decision=[16, 16])
l56, l57 = sch.split(loop=l13, factors=[v54, v55], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l18, l26, l34, l42, l19, l27, l35, l43, l48, l52, l56, l20, l28, l36, l44, l49, l53, l57, l21, l29, l37, l45)
b58, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b58, loop=l42, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.parallel", ann_val=96)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.vectorize", ann_val=64)
v59 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.unroll_explicit", ann_val=v59)
sch.enter_postproc()
b60 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b60, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b60, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b60, ann_key="meta_schedule.unroll_explicit")
b61, b62 = sch.get_child_blocks(b60)
l63, l64, l65, l66, l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b61)
l85 = sch.fuse(l63, l64, l65, l66, preserve_unit_iters=True)
sch.parallel(loop=l85)
l86 = sch.fuse(l84, preserve_unit_iters=True)
sch.vectorize(loop=l86)
sch.annotate(block_or_loop=l85, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l85, ann_key="pragma_unroll_explicit", ann_val=1)
l87, l88, l89, l90, l91 = sch.get_loops(block=b62)
b92 = sch.get_block(name="conv2d_nhwc", func_name="main")
l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103, l104, l105, l106, l107, l108, l109, l110, l111 = sch.get_loops(block=b92)
b112 = sch.decompose_reduction(block=b92, loop=l98)
b113 = sch.get_block(name="conv2d_nhwc_update", func_name="main")
b114 = sch.cache_read(block=b113, read_buffer_index=2, storage_scope="global")
sch.annotate(block_or_loop=b114, ann_key="meta_schedule.layout_rewrite_preproc", ann_val=1)
sch.transform_layout(block=b113, buffer=("read", 2), index_map=tvm.tir.IndexMap.from_func(lambda i0, i1, i2, i3: (T.Cast("int64", i3) // T.int64(256), T.Cast("int64", i3) % T.int64(256) // T.int64(32), T.Cast("int64", i2) // T.int64(16), T.Cast("int64", i3) % T.int64(32) // T.int64(2), T.Cast("int64", i2) % T.int64(16), T.Cast("int64", i3) % T.int64(2),), inverse_index_map=lambda i0, i1, i2, i3, i4, i5: (T.int64(0), T.int64(0), T.Cast("int64", i2) * T.int64(16) + T.Cast("int64", i4), T.Cast("int64", i0) * T.int64(256) + T.Cast("int64", i1) * T.int64(32) + T.Cast("int64", i3) * T.int64(2) + T.Cast("int64", i5),)), pad_value=None, assume_injective_transform=False)
2024-04-30 19:36:30 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_conv2d_add_multiply_add_add_nn_relu_2] Trial #28: GFLOPs: 73.2323. Time: 57.8333 us. Best GFLOPs: 110.3209
2024-04-30 19:36:30 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_conv2d_add_multiply_add_add_nn_relu_2] Trial #29: GFLOPs: 29.9012. Time: 141.6421 us. Best GFLOPs: 110.3209
2024-04-30 19:36:30 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_conv2d_add_multiply_add_add_nn_relu_2] Trial #30: GFLOPs: 56.2066. Time: 75.3518 us. Best GFLOPs: 110.3209
2024-04-30 19:36:30 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_conv2d_add_multiply_add_add_nn_relu_2] Trial #31: GFLOPs: 39.2789. Time: 107.8253 us. Best GFLOPs: 110.3209
2024-04-30 19:36:30 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_conv2d_add_multiply_add_add_nn_relu_2] Trial #32: GFLOPs: 118.2169. Time: 35.8262 us. Best GFLOPs: 118.2169
2024-04-30 19:36:30 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_conv2d_add_multiply_add_add_nn_relu_2] Trial #33: GFLOPs: 72.0032. Time: 58.8205 us. Best GFLOPs: 118.2169
2024-04-30 19:36:30 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_conv2d_add_multiply_add_add_nn_relu_2] Trial #34: GFLOPs: 19.6301. Time: 215.7541 us. Best GFLOPs: 118.2169
2024-04-30 19:36:30 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_conv2d_add_multiply_add_add_nn_relu_2] Trial #35: GFLOPs: 25.3256. Time: 167.2328 us. Best GFLOPs: 118.2169
2024-04-30 19:36:30 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_conv2d_add_multiply_add_add_nn_relu_2] Trial #36: GFLOPs: 78.5543. Time: 53.9151 us. Best GFLOPs: 118.2169
2024-04-30 19:36:30 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_conv2d_add_multiply_add_add_nn_relu_2] Trial #37: GFLOPs: 117.3144. Time: 36.1018 us. Best GFLOPs: 118.2169
2024-04-30 19:36:30 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_conv2d_add_multiply_add_add_nn_relu_2] Trial #38: GFLOPs: 69.0747. Time: 61.3143 us. Best GFLOPs: 118.2169
2024-04-30 19:36:30 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_conv2d_add_multiply_add_add_nn_relu_2] Trial #39: GFLOPs: 73.5985. Time: 57.5455 us. Best GFLOPs: 118.2169
2024-04-30 19:36:30 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_conv2d_add_multiply_add_add_nn_relu_2] Trial #40: GFLOPs: 29.2788. Time: 144.6527 us. Best GFLOPs: 118.2169
2024-04-30 19:36:30 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_conv2d_add_multiply_add_add_nn_relu_2] Trial #41: GFLOPs: 130.5152. Time: 32.4504 us. Best GFLOPs: 130.5152
2024-04-30 19:36:30 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_conv2d_add_multiply_add_add_nn_relu_2] Trial #42: GFLOPs: 26.6698. Time: 158.8038 us. Best GFLOPs: 130.5152
2024-04-30 19:36:30 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_conv2d_add_multiply_add_add_nn_relu_2] Trial #43: GFLOPs: 62.6227. Time: 67.6315 us. Best GFLOPs: 130.5152
2024-04-30 19:36:30 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_conv2d_add_multiply_add_add_nn_relu_2] Trial #44: GFLOPs: 6.2366. Time: 679.0941 us. Best GFLOPs: 130.5152
2024-04-30 19:36:30 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_conv2d_add_multiply_add_add_nn_relu_2] Trial #45: GFLOPs: 80.0110. Time: 52.9335 us. Best GFLOPs: 130.5152
2024-04-30 19:36:30 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_conv2d_add_multiply_add_add_nn_relu_2] Trial #46: GFLOPs: 15.2781. Time: 277.2122 us. Best GFLOPs: 130.5152
2024-04-30 19:36:30 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_conv2d_add_multiply_add_add_nn_relu_2] Trial #47: GFLOPs: 18.0358. Time: 234.8253 us. Best GFLOPs: 130.5152
2024-04-30 19:36:30 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_conv2d_add_multiply_add_add_nn_relu_2] Trial #48: GFLOPs: 27.7282. Time: 152.7424 us. Best GFLOPs: 130.5152
2024-04-30 19:36:30 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_conv2d_add_multiply_add_add_nn_relu_2] Trial #49: GFLOPs: 35.9876. Time: 117.6869 us. Best GFLOPs: 130.5152
2024-04-30 19:36:30 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_conv2d_add_multiply_add_add_nn_relu_2] Trial #50: GFLOPs: 79.7846. Time: 53.0837 us. Best GFLOPs: 130.5152
2024-04-30 19:36:30 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_conv2d_add_multiply_add_add_nn_relu_2] Trial #51: GFLOPs: 68.5920. Time: 61.7457 us. Best GFLOPs: 130.5152
2024-04-30 19:36:30 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_conv2d_add_multiply_add_add_nn_relu_2] Trial #52: GFLOPs: 23.2033. Time: 182.5285 us. Best GFLOPs: 130.5152
2024-04-30 19:36:30 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_conv2d_add_multiply_add_add_nn_relu_2] Trial #53: GFLOPs: 38.4737. Time: 110.0821 us. Best GFLOPs: 130.5152
2024-04-30 19:36:30 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_conv2d_add_multiply_add_add_nn_relu_2] Trial #54: GFLOPs: 12.8842. Time: 328.7178 us. Best GFLOPs: 130.5152
2024-04-30 19:36:30 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_conv2d_add_multiply_add_add_nn_relu_2] Trial #55: GFLOPs: 28.2696. Time: 149.8168 us. Best GFLOPs: 130.5152
2024-04-30 19:36:30 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_conv2d_add_multiply_add_add_nn_relu_2] Trial #56: GFLOPs: 31.4069. Time: 134.8512 us. Best GFLOPs: 130.5152
2024-04-30 19:36:30 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_conv2d_add_multiply_add_add_nn_relu_2] Trial #57: GFLOPs: 22.9888. Time: 184.2315 us. Best GFLOPs: 130.5152
2024-04-30 19:36:30 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_conv2d_add_multiply_add_add_nn_relu_2] Trial #58: GFLOPs: 20.9719. Time: 201.9491 us. Best GFLOPs: 130.5152
2024-04-30 19:36:30 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_conv2d_add_multiply_add_add_nn_relu_2] Trial #59: GFLOPs: 43.2106. Time: 98.0146 us. Best GFLOPs: 130.5152
2024-04-30 19:36:30 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_conv2d_add_multiply_add_add_nn_relu_2] Trial #60: GFLOPs: 15.4960. Time: 273.3133 us. Best GFLOPs: 130.5152
2024-04-30 19:36:30 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_conv2d_add_multiply_add_add_nn_relu_2] Trial #61: GFLOPs: 21.7588. Time: 194.6462 us. Best GFLOPs: 130.5152
2024-04-30 19:36:30 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_conv2d_add_multiply_add_add_nn_relu_2] Trial #62: GFLOPs: 19.7179. Time: 214.7931 us. Best GFLOPs: 130.5152
2024-04-30 19:36:30 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_conv2d_add_multiply_add_add_nn_relu_2] Trial #63: GFLOPs: 44.0590. Time: 96.1272 us. Best GFLOPs: 130.5152
2024-04-30 19:36:30 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_conv2d_add_multiply_add_add_nn_relu_2] Trial #64: GFLOPs: 103.8415. Time: 40.7859 us. Best GFLOPs: 130.5152
2024-04-30 20:12:55 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-30 20:12:55 [INFO] [evolutionary_search.cc:715] Picked top 63 candidate(s) from database
2024-04-30 20:12:57 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xeeb39b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x8d19128)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x1bef58e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x89568c8)]: 0 failure(s)
2024-04-30 20:12:57 [INFO] [evolutionary_search.cc:723] Sampled 449 candidate(s)
2024-04-30 20:12:59 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xeeb39b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x8d19128)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x1bef58e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x89568c8)]: 0 failure(s)
2024-04-30 20:13:02 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xeeb39b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x8d19128)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x1bef58e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x89568c8)]: 0 failure(s)
2024-04-30 20:13:05 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xeeb39b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x8d19128)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x1bef58e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x89568c8)]: 0 failure(s)
2024-04-30 20:13:08 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xeeb39b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x8d19128)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x1bef58e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x89568c8)]: 0 failure(s)
2024-04-30 20:13:10 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.0126  1.0112  0.9954  0.9936  0.9906  0.9890  0.9835  0.9816  0.9462  0.9380  0.9338  0.9322  0.9289  0.9146  0.9119  0.9111
[17 : 32]:	0.9111  0.9099  0.9099  0.9069  0.9049  0.9019  0.9019  0.8950  0.8932  0.8932  0.8884  0.8884  0.8840  0.8835  0.8833  0.8800
[33 : 48]:	0.8750  0.8750  0.8743  0.8693  0.8693  0.8693  0.8679  0.8655  0.8601  0.8601  0.8601  0.8601  0.8586  0.8584  0.8577  0.8563
[49 : 64]:	0.8563  0.8558  0.8499  0.8492  0.8482  0.8440  0.8432  0.8408  0.8378  0.8373  0.8352  0.8329  0.8313  0.8313  0.8294  0.8277
2024-04-30 20:13:10 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-30 20:13:10 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-30 20:13:30 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_conv2d_add_multiply_add_add_nn_relu_2] Trial #65: GFLOPs: 161.2575. Time: 26.2640 us. Best GFLOPs: 161.2575
2024-04-30 20:13:30 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_conv2d_add_multiply_add_add_nn_relu_2] Trial #66: GFLOPs: 155.2494. Time: 27.2804 us. Best GFLOPs: 161.2575
2024-04-30 20:13:30 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_conv2d_add_multiply_add_add_nn_relu_2] Trial #67: GFLOPs: 144.3359. Time: 29.3431 us. Best GFLOPs: 161.2575
2024-04-30 20:13:30 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_conv2d_add_multiply_add_add_nn_relu_2] Trial #68: GFLOPs: 142.5275. Time: 29.7154 us. Best GFLOPs: 161.2575
2024-04-30 20:13:30 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_conv2d_add_multiply_add_add_nn_relu_2] Trial #69: GFLOPs: 148.0896. Time: 28.5993 us. Best GFLOPs: 161.2575
2024-04-30 20:13:30 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_conv2d_add_multiply_add_add_nn_relu_2] Trial #70: GFLOPs: 171.3631. Time: 24.7151 us. Best GFLOPs: 171.3631
2024-04-30 20:13:30 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_conv2d_add_multiply_add_add_nn_relu_2] Trial #71: GFLOPs: 175.2469. Time: 24.1674 us. Best GFLOPs: 175.2469
2024-04-30 20:13:30 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_conv2d_add_multiply_add_add_nn_relu_2] Trial #72: GFLOPs: 134.3168. Time: 31.5319 us. Best GFLOPs: 175.2469
2024-04-30 20:13:30 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_conv2d_add_multiply_add_add_nn_relu_2] Trial #73: GFLOPs: 170.4996. Time: 24.8403 us. Best GFLOPs: 175.2469
2024-04-30 20:13:30 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_conv2d_add_multiply_add_add_nn_relu_2] Trial #74: GFLOPs: 163.6280. Time: 25.8835 us. Best GFLOPs: 175.2469
2024-04-30 20:13:30 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_conv2d_add_multiply_add_add_nn_relu_2] Trial #75: GFLOPs: 151.5174. Time: 27.9523 us. Best GFLOPs: 175.2469
2024-04-30 20:13:30 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_conv2d_add_multiply_add_add_nn_relu_2] Trial #76: GFLOPs: 176.1655. Time: 24.0414 us. Best GFLOPs: 176.1655
2024-04-30 20:13:30 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_conv2d_add_multiply_add_add_nn_relu_2] Trial #77: GFLOPs: 94.0152. Time: 45.0487 us. Best GFLOPs: 176.1655
2024-04-30 20:13:30 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_conv2d_add_multiply_add_add_nn_relu_2] Trial #78: GFLOPs: 165.2142. Time: 25.6350 us. Best GFLOPs: 176.1655
2024-04-30 20:13:30 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_conv2d_add_multiply_add_add_nn_relu_2] Trial #79: GFLOPs: 162.8098. Time: 26.0136 us. Best GFLOPs: 176.1655
2024-04-30 20:13:30 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_conv2d_add_multiply_add_add_nn_relu_2] Trial #80: GFLOPs: 126.9494. Time: 33.3618 us. Best GFLOPs: 176.1655
2024-04-30 20:13:30 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_conv2d_add_multiply_add_add_nn_relu_2] Trial #81: GFLOPs: 139.6685. Time: 30.3237 us. Best GFLOPs: 176.1655
2024-04-30 20:13:30 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_conv2d_add_multiply_add_add_nn_relu_2] Trial #82: GFLOPs: 136.9945. Time: 30.9156 us. Best GFLOPs: 176.1655
2024-04-30 20:13:30 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_conv2d_add_multiply_add_add_nn_relu_2] Trial #83: GFLOPs: 125.0368. Time: 33.8721 us. Best GFLOPs: 176.1655
2024-04-30 20:13:30 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_conv2d_add_multiply_add_add_nn_relu_2] Trial #84: GFLOPs: 153.7424. Time: 27.5478 us. Best GFLOPs: 176.1655
2024-04-30 20:13:30 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_conv2d_add_multiply_add_add_nn_relu_2] Trial #85: GFLOPs: 171.2748. Time: 24.7279 us. Best GFLOPs: 176.1655
2024-04-30 20:13:30 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_conv2d_add_multiply_add_add_nn_relu_2] Trial #86: GFLOPs: 127.4662. Time: 33.2266 us. Best GFLOPs: 176.1655
2024-04-30 20:13:30 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_conv2d_add_multiply_add_add_nn_relu_2] Trial #87: GFLOPs: 131.4826. Time: 32.2116 us. Best GFLOPs: 176.1655
2024-04-30 20:13:30 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_conv2d_add_multiply_add_add_nn_relu_2] Trial #88: GFLOPs: 162.0211. Time: 26.1402 us. Best GFLOPs: 176.1655
2024-04-30 20:13:30 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_conv2d_add_multiply_add_add_nn_relu_2] Trial #89: GFLOPs: 149.7470. Time: 28.2828 us. Best GFLOPs: 176.1655
2024-04-30 20:13:30 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_conv2d_add_multiply_add_add_nn_relu_2] Trial #90: GFLOPs: 141.3826. Time: 29.9560 us. Best GFLOPs: 176.1655
2024-04-30 20:13:30 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_conv2d_add_multiply_add_add_nn_relu_2] Trial #91: GFLOPs: 93.1249. Time: 45.4794 us. Best GFLOPs: 176.1655
2024-04-30 20:13:30 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_conv2d_add_multiply_add_add_nn_relu_2] Trial #92: GFLOPs: 87.9934. Time: 48.1316 us. Best GFLOPs: 176.1655
2024-04-30 20:13:30 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_conv2d_add_multiply_add_add_nn_relu_2] Trial #93: GFLOPs: 112.8678. Time: 37.5241 us. Best GFLOPs: 176.1655
2024-04-30 20:13:30 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_conv2d_add_multiply_add_add_nn_relu_2] Trial #94: GFLOPs: 171.0080. Time: 24.7665 us. Best GFLOPs: 176.1655
2024-04-30 20:13:30 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_conv2d_add_multiply_add_add_nn_relu_2] Trial #95: GFLOPs: 123.2994. Time: 34.3494 us. Best GFLOPs: 176.1655
2024-04-30 20:13:30 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_conv2d_add_multiply_add_add_nn_relu_2] Trial #96: GFLOPs: 143.7286. Time: 29.4671 us. Best GFLOPs: 176.1655
2024-04-30 20:13:30 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_conv2d_add_multiply_add_add_nn_relu_2] Trial #97: GFLOPs: 133.6013. Time: 31.7008 us. Best GFLOPs: 176.1655
2024-04-30 20:13:30 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_conv2d_add_multiply_add_add_nn_relu_2] Trial #98: GFLOPs: 108.0428. Time: 39.1999 us. Best GFLOPs: 176.1655
2024-04-30 20:13:30 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_conv2d_add_multiply_add_add_nn_relu_2] Trial #99: GFLOPs: 111.2480. Time: 38.0705 us. Best GFLOPs: 176.1655
2024-04-30 20:13:30 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_conv2d_add_multiply_add_add_nn_relu_2] Trial #100: GFLOPs: 103.5503. Time: 40.9005 us. Best GFLOPs: 176.1655
2024-04-30 20:13:30 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_conv2d_add_multiply_add_add_nn_relu_2] Trial #101: GFLOPs: 106.5169. Time: 39.7614 us. Best GFLOPs: 176.1655
2024-04-30 20:13:30 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_conv2d_add_multiply_add_add_nn_relu_2] Trial #102: GFLOPs: 108.6791. Time: 38.9704 us. Best GFLOPs: 176.1655
2024-04-30 20:13:30 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_conv2d_add_multiply_add_add_nn_relu_2] Trial #103: GFLOPs: 102.8512. Time: 41.1785 us. Best GFLOPs: 176.1655
2024-04-30 20:13:30 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_conv2d_add_multiply_add_add_nn_relu_2] Trial #104: GFLOPs: 101.9835. Time: 41.5289 us. Best GFLOPs: 176.1655
2024-04-30 20:13:30 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_conv2d_add_multiply_add_add_nn_relu_2] Trial #105: GFLOPs: 129.4718. Time: 32.7119 us. Best GFLOPs: 176.1655
2024-04-30 20:13:30 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_conv2d_add_multiply_add_add_nn_relu_2] Trial #106: GFLOPs: 110.0091. Time: 38.4992 us. Best GFLOPs: 176.1655
2024-04-30 20:13:30 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_conv2d_add_multiply_add_add_nn_relu_2] Trial #107: GFLOPs: 120.4346. Time: 35.1665 us. Best GFLOPs: 176.1655
2024-04-30 20:13:30 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_conv2d_add_multiply_add_add_nn_relu_2] Trial #108: GFLOPs: 130.9818. Time: 32.3348 us. Best GFLOPs: 176.1655
2024-04-30 20:13:30 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_conv2d_add_multiply_add_add_nn_relu_2] Trial #109: GFLOPs: 136.8703. Time: 30.9436 us. Best GFLOPs: 176.1655
2024-04-30 20:13:30 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_conv2d_add_multiply_add_add_nn_relu_2] Trial #110: GFLOPs: 126.4853. Time: 33.4842 us. Best GFLOPs: 176.1655
2024-04-30 20:13:30 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_conv2d_add_multiply_add_add_nn_relu_2] Trial #111: GFLOPs: 104.1304. Time: 40.6727 us. Best GFLOPs: 176.1655
2024-04-30 20:13:30 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_conv2d_add_multiply_add_add_nn_relu_2] Trial #112: GFLOPs: 134.1990. Time: 31.5596 us. Best GFLOPs: 176.1655
2024-04-30 20:13:30 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_conv2d_add_multiply_add_add_nn_relu_2] Trial #113: GFLOPs: 129.0291. Time: 32.8241 us. Best GFLOPs: 176.1655
2024-04-30 20:13:30 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_conv2d_add_multiply_add_add_nn_relu_2] Trial #114: GFLOPs: 131.2700. Time: 32.2638 us. Best GFLOPs: 176.1655
2024-04-30 20:13:30 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_conv2d_add_multiply_add_add_nn_relu_2] Trial #115: GFLOPs: 104.8059. Time: 40.4106 us. Best GFLOPs: 176.1655
2024-04-30 20:13:30 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_conv2d_add_multiply_add_add_nn_relu_2] Trial #116: GFLOPs: 117.1992. Time: 36.1373 us. Best GFLOPs: 176.1655
2024-04-30 20:13:30 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_conv2d_add_multiply_add_add_nn_relu_2] Trial #117: GFLOPs: 167.9855. Time: 25.2121 us. Best GFLOPs: 176.1655
2024-04-30 20:13:30 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_conv2d_add_multiply_add_add_nn_relu_2] Trial #118: GFLOPs: 133.9038. Time: 31.6292 us. Best GFLOPs: 176.1655
2024-04-30 20:13:30 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_conv2d_add_multiply_add_add_nn_relu_2] Trial #119: GFLOPs: 112.1797. Time: 37.7543 us. Best GFLOPs: 176.1655
2024-04-30 20:13:30 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_conv2d_add_multiply_add_add_nn_relu_2] Trial #120: GFLOPs: 92.8920. Time: 45.5934 us. Best GFLOPs: 176.1655
2024-04-30 20:13:30 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_conv2d_add_multiply_add_add_nn_relu_2] Trial #121: GFLOPs: 105.8323. Time: 40.0186 us. Best GFLOPs: 176.1655
2024-04-30 20:13:30 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_conv2d_add_multiply_add_add_nn_relu_2] Trial #122: GFLOPs: 161.7342. Time: 26.1866 us. Best GFLOPs: 176.1655
2024-04-30 20:13:30 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_conv2d_add_multiply_add_add_nn_relu_2] Trial #123: GFLOPs: 126.6514. Time: 33.4403 us. Best GFLOPs: 176.1655
2024-04-30 20:13:30 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_conv2d_add_multiply_add_add_nn_relu_2] Trial #124: GFLOPs: 173.6731. Time: 24.3864 us. Best GFLOPs: 176.1655
2024-04-30 20:13:30 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_conv2d_add_multiply_add_add_nn_relu_2] Trial #125: GFLOPs: 98.4787. Time: 43.0069 us. Best GFLOPs: 176.1655
2024-04-30 20:13:30 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_conv2d_add_multiply_add_add_nn_relu_2] Trial #126: GFLOPs: 26.3231. Time: 160.8954 us. Best GFLOPs: 176.1655
2024-04-30 20:13:30 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_conv2d_add_multiply_add_add_nn_relu_2] Trial #127: GFLOPs: 38.0328. Time: 111.3581 us. Best GFLOPs: 176.1655
2024-04-30 20:13:30 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_conv2d_add_multiply_add_add_nn_relu_2] Trial #128: GFLOPs: 49.7300. Time: 85.1651 us. Best GFLOPs: 176.1655
