2024-04-30 19:06:05 [INFO] [task_scheduler.cc:160] Initializing Task #11: "fused_nn_max_pool2d"
2024-04-30 19:06:05 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(18), T.int64(18), T.int64(64)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(8), T.int64(8), T.int64(64)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        for ax0, ax1, ax2, ax3, rv0, rv1 in T.grid(T.int64(1), T.int64(8), T.int64(8), T.int64(64), T.int64(3), T.int64(3)):
            with T.block("pool_max"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_rv0, v_rv1 = T.axis.remap("SSSSRR", [ax0, ax1, ax2, ax3, rv0, rv1])
                T.reads(p0[v_ax0, v_ax1 * T.int64(2) + v_rv0, v_ax2 * T.int64(2) + v_rv1, v_ax3])
                T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3])
                T.block_attr({"schedule_rule": "meta_schedule.pool_max"})
                with T.init():
                    pool_max[v_ax0, v_ax1, v_ax2, v_ax3] = T.float32(-3.4028234663852886e+38)
                pool_max[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3], p0[v_ax0, v_ax1 * T.int64(2) + v_rv0, v_ax2 * T.int64(2) + v_rv1, v_ax3])
2024-04-30 19:06:05 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-30 19:06:05 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(18), T.int64(18), T.int64(64)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(8), T.int64(8), T.int64(64)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 96, "meta_schedule.unroll_explicit": 0, "meta_schedule.vectorize": 64})
            pool_max_rf = T.alloc_buffer((T.int64(1), T.int64(8), T.int64(8), T.int64(64), T.int64(3)))
            for ax0, ax1, ax2, ax3, rv0_rv1_fused_0, rv0_rv1_fused_1 in T.grid(T.int64(1), T.int64(8), T.int64(8), T.int64(64), T.int64(3), T.int64(3)):
                with T.block("pool_max_rf"):
                    vrv0_rv1_fused_0, v_ax0, v_ax1, v_ax2, v_ax3, vrv0_rv1_fused_1 = T.axis.remap("SSSSSR", [rv0_rv1_fused_0, ax0, ax1, ax2, ax3, rv0_rv1_fused_1])
                    T.reads(p0[v_ax0, v_ax1 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(3) + vrv0_rv1_fused_1) // T.int64(3), v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(3) + vrv0_rv1_fused_1) % T.int64(3), v_ax3])
                    T.writes(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, vrv0_rv1_fused_0])
                    with T.init():
                        pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, vrv0_rv1_fused_0] = T.float32(-3.4028234663852886e+38)
                    pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, vrv0_rv1_fused_0] = T.max(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, vrv0_rv1_fused_0], p0[v_ax0, v_ax1 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(3) + vrv0_rv1_fused_1) // T.int64(3), v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(3) + vrv0_rv1_fused_1) % T.int64(3), v_ax3])
            for ax0, ax1, ax2, ax3, rv0_rv1_fused_0 in T.grid(T.int64(1), T.int64(8), T.int64(8), T.int64(64), T.int64(3)):
                with T.block("pool_max"):
                    vrv0_rv1_fused_0, v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("RSSSS", [rv0_rv1_fused_0, ax0, ax1, ax2, ax3])
                    T.reads(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, vrv0_rv1_fused_0])
                    T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3])
                    T.block_attr({"meta_schedule.random_compute_producer": 1})
                    with T.init():
                        pool_max[v_ax0, v_ax1, v_ax2, v_ax3] = T.float32(-3.4028234663852886e+38)
                    pool_max[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3], pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, vrv0_rv1_fused_0])
b0 = sch.get_block(name="pool_max", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b0, ann_key="schedule_rule")
l2, l3, l4, l5, l6, l7 = sch.get_loops(block=b0)
l8 = sch.fuse(l6, l7, preserve_unit_iters=True)
v9, v10 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[3, 3])
l11, l12 = sch.split(loop=l8, factors=[v9, v10], preserve_unit_iters=True, disable_predication=False)
b13 = sch.rfactor(loop=l11, factor_axis=4)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer", ann_val=1)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.parallel", ann_val=96)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.vectorize", ann_val=64)
v14 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v14)
2024-04-30 19:06:05 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(18), T.int64(18), T.int64(64)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(8), T.int64(8), T.int64(64)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 96, "meta_schedule.unroll_explicit": 0, "meta_schedule.vectorize": 64})
            pool_max_rf = T.alloc_buffer((T.int64(1), T.int64(8), T.int64(8), T.int64(64), T.int64(3)))
            for ax0, ax1, ax2, ax3, rv0_rv1_fused_0, rv0_rv1_fused_1 in T.grid(T.int64(1), T.int64(8), T.int64(8), T.int64(64), T.int64(3), T.int64(3)):
                with T.block("pool_max_rf"):
                    vrv0_rv1_fused_1, v_ax0, v_ax1, v_ax2, v_ax3, vrv0_rv1_fused_0 = T.axis.remap("SSSSSR", [rv0_rv1_fused_1, ax0, ax1, ax2, ax3, rv0_rv1_fused_0])
                    T.reads(p0[v_ax0, v_ax1 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(3) + vrv0_rv1_fused_1) // T.int64(3), v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(3) + vrv0_rv1_fused_1) % T.int64(3), v_ax3])
                    T.writes(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, vrv0_rv1_fused_1])
                    with T.init():
                        pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, vrv0_rv1_fused_1] = T.float32(-3.4028234663852886e+38)
                    pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, vrv0_rv1_fused_1] = T.max(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, vrv0_rv1_fused_1], p0[v_ax0, v_ax1 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(3) + vrv0_rv1_fused_1) // T.int64(3), v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(3) + vrv0_rv1_fused_1) % T.int64(3), v_ax3])
            for ax0, ax1, ax2, ax3, rv0_rv1_fused_1 in T.grid(T.int64(1), T.int64(8), T.int64(8), T.int64(64), T.int64(3)):
                with T.block("pool_max"):
                    vrv0_rv1_fused_1, v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("RSSSS", [rv0_rv1_fused_1, ax0, ax1, ax2, ax3])
                    T.reads(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, vrv0_rv1_fused_1])
                    T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3])
                    T.block_attr({"meta_schedule.random_compute_producer": 1})
                    with T.init():
                        pool_max[v_ax0, v_ax1, v_ax2, v_ax3] = T.float32(-3.4028234663852886e+38)
                    pool_max[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3], pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, vrv0_rv1_fused_1])
b0 = sch.get_block(name="pool_max", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b0, ann_key="schedule_rule")
l2, l3, l4, l5, l6, l7 = sch.get_loops(block=b0)
l8 = sch.fuse(l6, l7, preserve_unit_iters=True)
v9, v10 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[3, 3])
l11, l12 = sch.split(loop=l8, factors=[v9, v10], preserve_unit_iters=True, disable_predication=False)
b13 = sch.rfactor(loop=l12, factor_axis=4)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer", ann_val=1)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.parallel", ann_val=96)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.vectorize", ann_val=64)
v14 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v14)
2024-04-30 19:06:05 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(18), T.int64(18), T.int64(64)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(8), T.int64(8), T.int64(64)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 96, "meta_schedule.unroll_explicit": 512, "meta_schedule.vectorize": 64})
            for ax0, ax1, ax2, ax3, rv0, rv1 in T.grid(T.int64(1), T.int64(8), T.int64(8), T.int64(64), T.int64(3), T.int64(3)):
                with T.block("pool_max"):
                    v_ax0, v_ax1, v_ax2, v_ax3, v_rv0, v_rv1 = T.axis.remap("SSSSRR", [ax0, ax1, ax2, ax3, rv0, rv1])
                    T.reads(p0[v_ax0, v_ax1 * T.int64(2) + v_rv0, v_ax2 * T.int64(2) + v_rv1, v_ax3])
                    T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3])
                    with T.init():
                        pool_max[v_ax0, v_ax1, v_ax2, v_ax3] = T.float32(-3.4028234663852886e+38)
                    pool_max[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3], p0[v_ax0, v_ax1 * T.int64(2) + v_rv0, v_ax2 * T.int64(2) + v_rv1, v_ax3])
b0 = sch.get_block(name="pool_max", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b0, ann_key="schedule_rule")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.parallel", ann_val=96)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.vectorize", ann_val=64)
v2 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v2)
2024-04-30 19:13:54 [INFO] [task_scheduler.cc:160] Initializing Task #11: "fused_nn_max_pool2d"
2024-04-30 19:13:54 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(18), T.int64(18), T.int64(64)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(8), T.int64(8), T.int64(64)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        for ax0, ax1, ax2, ax3, rv0, rv1 in T.grid(T.int64(1), T.int64(8), T.int64(8), T.int64(64), T.int64(3), T.int64(3)):
            with T.block("pool_max"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_rv0, v_rv1 = T.axis.remap("SSSSRR", [ax0, ax1, ax2, ax3, rv0, rv1])
                T.reads(p0[v_ax0, v_ax1 * T.int64(2) + v_rv0, v_ax2 * T.int64(2) + v_rv1, v_ax3])
                T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3])
                T.block_attr({"schedule_rule": "meta_schedule.pool_max"})
                with T.init():
                    pool_max[v_ax0, v_ax1, v_ax2, v_ax3] = T.float32(-3.4028234663852886e+38)
                pool_max[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3], p0[v_ax0, v_ax1 * T.int64(2) + v_rv0, v_ax2 * T.int64(2) + v_rv1, v_ax3])
2024-04-30 19:13:54 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-30 19:13:54 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(18), T.int64(18), T.int64(64)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(8), T.int64(8), T.int64(64)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 96, "meta_schedule.unroll_explicit": 16, "meta_schedule.vectorize": 64})
            pool_max_rf = T.alloc_buffer((T.int64(1), T.int64(8), T.int64(8), T.int64(64), T.int64(9)))
            for ax0, ax1, ax2, ax3, rv0_rv1_fused_0, rv0_rv1_fused_1 in T.grid(T.int64(1), T.int64(8), T.int64(8), T.int64(64), T.int64(9), T.int64(1)):
                with T.block("pool_max_rf"):
                    vrv0_rv1_fused_0, v_ax0, v_ax1, v_ax2, v_ax3, vrv0_rv1_fused_1 = T.axis.remap("SSSSSR", [rv0_rv1_fused_0, ax0, ax1, ax2, ax3, rv0_rv1_fused_1])
                    T.reads(p0[v_ax0, v_ax1 * T.int64(2) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) // T.int64(3), v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) % T.int64(3), v_ax3])
                    T.writes(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, vrv0_rv1_fused_0])
                    with T.init():
                        pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, vrv0_rv1_fused_0] = T.float32(-3.4028234663852886e+38)
                    pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, vrv0_rv1_fused_0] = T.max(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, vrv0_rv1_fused_0], p0[v_ax0, v_ax1 * T.int64(2) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) // T.int64(3), v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) % T.int64(3), v_ax3])
            for ax0, ax1, ax2, ax3, rv0_rv1_fused_0 in T.grid(T.int64(1), T.int64(8), T.int64(8), T.int64(64), T.int64(9)):
                with T.block("pool_max"):
                    vrv0_rv1_fused_0, v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("RSSSS", [rv0_rv1_fused_0, ax0, ax1, ax2, ax3])
                    T.reads(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, vrv0_rv1_fused_0])
                    T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3])
                    T.block_attr({"meta_schedule.random_compute_producer": 1})
                    with T.init():
                        pool_max[v_ax0, v_ax1, v_ax2, v_ax3] = T.float32(-3.4028234663852886e+38)
                    pool_max[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3], pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, vrv0_rv1_fused_0])
b0 = sch.get_block(name="pool_max", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b0, ann_key="schedule_rule")
l2, l3, l4, l5, l6, l7 = sch.get_loops(block=b0)
l8 = sch.fuse(l6, l7, preserve_unit_iters=True)
v9, v10 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[9, 1])
l11, l12 = sch.split(loop=l8, factors=[v9, v10], preserve_unit_iters=True, disable_predication=False)
b13 = sch.rfactor(loop=l11, factor_axis=4)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer", ann_val=1)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.parallel", ann_val=96)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.vectorize", ann_val=64)
v14 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v14)
2024-04-30 19:13:54 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(18), T.int64(18), T.int64(64)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(8), T.int64(8), T.int64(64)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 96, "meta_schedule.unroll_explicit": 512, "meta_schedule.vectorize": 64})
            pool_max_rf = T.alloc_buffer((T.int64(1), T.int64(8), T.int64(8), T.int64(64), T.int64(1)))
            for ax0, ax1, ax2, ax3, rv0_rv1_fused_0, rv0_rv1_fused_1 in T.grid(T.int64(1), T.int64(8), T.int64(8), T.int64(64), T.int64(9), T.int64(1)):
                with T.block("pool_max_rf"):
                    vrv0_rv1_fused_1, v_ax0, v_ax1, v_ax2, v_ax3, vrv0_rv1_fused_0 = T.axis.remap("SSSSSR", [rv0_rv1_fused_1, ax0, ax1, ax2, ax3, rv0_rv1_fused_0])
                    T.reads(p0[v_ax0, v_ax1 * T.int64(2) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) // T.int64(3), v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) % T.int64(3), v_ax3])
                    T.writes(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, vrv0_rv1_fused_1])
                    with T.init():
                        pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, vrv0_rv1_fused_1] = T.float32(-3.4028234663852886e+38)
                    pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, vrv0_rv1_fused_1] = T.max(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, vrv0_rv1_fused_1], p0[v_ax0, v_ax1 * T.int64(2) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) // T.int64(3), v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) % T.int64(3), v_ax3])
            for ax0, ax1, ax2, ax3, rv0_rv1_fused_1 in T.grid(T.int64(1), T.int64(8), T.int64(8), T.int64(64), T.int64(1)):
                with T.block("pool_max"):
                    vrv0_rv1_fused_1, v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("RSSSS", [rv0_rv1_fused_1, ax0, ax1, ax2, ax3])
                    T.reads(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, vrv0_rv1_fused_1])
                    T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3])
                    T.block_attr({"meta_schedule.random_compute_producer": 1})
                    with T.init():
                        pool_max[v_ax0, v_ax1, v_ax2, v_ax3] = T.float32(-3.4028234663852886e+38)
                    pool_max[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3], pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, vrv0_rv1_fused_1])
b0 = sch.get_block(name="pool_max", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b0, ann_key="schedule_rule")
l2, l3, l4, l5, l6, l7 = sch.get_loops(block=b0)
l8 = sch.fuse(l6, l7, preserve_unit_iters=True)
v9, v10 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[9, 1])
l11, l12 = sch.split(loop=l8, factors=[v9, v10], preserve_unit_iters=True, disable_predication=False)
b13 = sch.rfactor(loop=l12, factor_axis=4)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer", ann_val=1)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.parallel", ann_val=96)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.vectorize", ann_val=64)
v14 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v14)
2024-04-30 19:13:54 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(18), T.int64(18), T.int64(64)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(8), T.int64(8), T.int64(64)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 96, "meta_schedule.unroll_explicit": 16, "meta_schedule.vectorize": 64})
            for ax0, ax1, ax2, ax3, rv0, rv1 in T.grid(T.int64(1), T.int64(8), T.int64(8), T.int64(64), T.int64(3), T.int64(3)):
                with T.block("pool_max"):
                    v_ax0, v_ax1, v_ax2, v_ax3, v_rv0, v_rv1 = T.axis.remap("SSSSRR", [ax0, ax1, ax2, ax3, rv0, rv1])
                    T.reads(p0[v_ax0, v_ax1 * T.int64(2) + v_rv0, v_ax2 * T.int64(2) + v_rv1, v_ax3])
                    T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3])
                    with T.init():
                        pool_max[v_ax0, v_ax1, v_ax2, v_ax3] = T.float32(-3.4028234663852886e+38)
                    pool_max[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3], p0[v_ax0, v_ax1 * T.int64(2) + v_rv0, v_ax2 * T.int64(2) + v_rv1, v_ax3])
b0 = sch.get_block(name="pool_max", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b0, ann_key="schedule_rule")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.parallel", ann_val=96)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.vectorize", ann_val=64)
v2 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v2)
2024-04-30 19:19:23 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-30 19:19:23 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-30 19:19:23 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xcf7f088)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x167795b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x1ba4ac08)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x22a00758)]: 0 failure(s)
2024-04-30 19:19:23 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-30 19:19:23 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xcf7f088)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x167795b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x1ba4ac08)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x22a00758)]: 0 failure(s)
2024-04-30 19:19:24 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xcf7f088)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x167795b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x1ba4ac08)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x22a00758)]: 0 failure(s)
2024-04-30 19:19:24 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xcf7f088)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x167795b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x1ba4ac08)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x22a00758)]: 0 failure(s)
2024-04-30 19:19:24 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xcf7f088)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x167795b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x1ba4ac08)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x22a00758)]: 0 failure(s)
2024-04-30 19:19:25 [INFO] [evolutionary_search.cc:649] Scores of the best 55 candidates:
[1 : 16]:	0.9869  0.9446  0.9365  0.9127  0.9106  0.8999  0.8759  0.8716  0.8689  0.8511  0.8362  0.8181  0.7974  0.7906  0.7377  0.7181
[17 : 32]:	0.7147  0.7110  0.7049  0.6877  0.6692  0.6487  0.6066  0.5982  0.5915  0.5869  0.5583  0.5535  0.5507  0.5495  0.5474  0.5326
[33 : 48]:	0.5248  0.5088  0.5082  0.4551  0.3782  0.3102  0.3075  0.3047  0.2818  0.2426  0.2405  0.2312  0.1847  0.1777  0.1734  0.1688
[49 : 55]:	0.1321  0.1251  0.1126  0.1078  0.0946  0.0138  0.0022
2024-04-30 19:19:25 [INFO] [evolutionary_search.cc:727] Got 55 candidate(s) with evolutionary search
2024-04-30 19:19:25 [INFO] [evolutionary_search.cc:730] Sending 55 candidates(s) for measurement
2024-04-30 19:36:27 [INFO] [task_scheduler.cc:131] [Task #11: fused_nn_max_pool2d] Trial #1: GFLOPs: 1.7666. Time: 20.8674 us. Best GFLOPs: 1.7666
2024-04-30 19:36:27 [INFO] [task_scheduler.cc:131] [Task #11: fused_nn_max_pool2d] Trial #2: GFLOPs: 3.0949. Time: 11.9114 us. Best GFLOPs: 3.0949
2024-04-30 19:36:27 [INFO] [task_scheduler.cc:131] [Task #11: fused_nn_max_pool2d] Trial #3: GFLOPs: 5.7149. Time: 6.4505 us. Best GFLOPs: 5.7149
2024-04-30 19:36:27 [INFO] [task_scheduler.cc:131] [Task #11: fused_nn_max_pool2d] Trial #4: GFLOPs: 1.7983. Time: 20.4997 us. Best GFLOPs: 5.7149
2024-04-30 19:36:27 [INFO] [task_scheduler.cc:131] [Task #11: fused_nn_max_pool2d] Trial #5: GFLOPs: 1.7955. Time: 20.5315 us. Best GFLOPs: 5.7149
2024-04-30 19:36:27 [INFO] [task_scheduler.cc:131] [Task #11: fused_nn_max_pool2d] Trial #6: GFLOPs: 2.1144. Time: 17.4345 us. Best GFLOPs: 5.7149
2024-04-30 19:36:27 [INFO] [task_scheduler.cc:131] [Task #11: fused_nn_max_pool2d] Trial #7: GFLOPs: 2.0821. Time: 17.7051 us. Best GFLOPs: 5.7149
2024-04-30 19:36:27 [INFO] [task_scheduler.cc:131] [Task #11: fused_nn_max_pool2d] Trial #8: GFLOPs: 2.3130. Time: 15.9378 us. Best GFLOPs: 5.7149
2024-04-30 19:36:27 [INFO] [task_scheduler.cc:131] [Task #11: fused_nn_max_pool2d] Trial #9: GFLOPs: 2.2425. Time: 16.4391 us. Best GFLOPs: 5.7149
2024-04-30 19:36:27 [INFO] [task_scheduler.cc:131] [Task #11: fused_nn_max_pool2d] Trial #10: GFLOPs: 3.1242. Time: 11.7993 us. Best GFLOPs: 5.7149
2024-04-30 19:36:27 [INFO] [task_scheduler.cc:131] [Task #11: fused_nn_max_pool2d] Trial #11: GFLOPs: 6.1001. Time: 6.0432 us. Best GFLOPs: 6.1001
2024-04-30 19:36:27 [INFO] [task_scheduler.cc:131] [Task #11: fused_nn_max_pool2d] Trial #12: GFLOPs: 3.4869. Time: 10.5721 us. Best GFLOPs: 6.1001
2024-04-30 19:36:27 [INFO] [task_scheduler.cc:131] [Task #11: fused_nn_max_pool2d] Trial #13: GFLOPs: 3.2049. Time: 11.5024 us. Best GFLOPs: 6.1001
2024-04-30 19:36:27 [INFO] [task_scheduler.cc:131] [Task #11: fused_nn_max_pool2d] Trial #14: GFLOPs: 2.0779. Time: 17.7410 us. Best GFLOPs: 6.1001
2024-04-30 19:36:27 [INFO] [task_scheduler.cc:131] [Task #11: fused_nn_max_pool2d] Trial #15: GFLOPs: 2.2436. Time: 16.4304 us. Best GFLOPs: 6.1001
2024-04-30 19:36:27 [INFO] [task_scheduler.cc:131] [Task #11: fused_nn_max_pool2d] Trial #16: GFLOPs: 3.2414. Time: 11.3730 us. Best GFLOPs: 6.1001
2024-04-30 19:36:27 [INFO] [task_scheduler.cc:131] [Task #11: fused_nn_max_pool2d] Trial #17: GFLOPs: 2.2882. Time: 16.1108 us. Best GFLOPs: 6.1001
2024-04-30 19:36:27 [INFO] [task_scheduler.cc:131] [Task #11: fused_nn_max_pool2d] Trial #18: GFLOPs: 3.3845. Time: 10.8920 us. Best GFLOPs: 6.1001
2024-04-30 19:36:27 [INFO] [task_scheduler.cc:131] [Task #11: fused_nn_max_pool2d] Trial #19: GFLOPs: 2.5167. Time: 14.6480 us. Best GFLOPs: 6.1001
2024-04-30 19:36:27 [INFO] [task_scheduler.cc:131] [Task #11: fused_nn_max_pool2d] Trial #20: GFLOPs: 3.0713. Time: 12.0026 us. Best GFLOPs: 6.1001
2024-04-30 19:36:27 [INFO] [task_scheduler.cc:131] [Task #11: fused_nn_max_pool2d] Trial #21: GFLOPs: 2.1327. Time: 17.2855 us. Best GFLOPs: 6.1001
2024-04-30 19:36:27 [INFO] [task_scheduler.cc:131] [Task #11: fused_nn_max_pool2d] Trial #22: GFLOPs: 1.7798. Time: 20.7123 us. Best GFLOPs: 6.1001
2024-04-30 19:36:27 [INFO] [task_scheduler.cc:131] [Task #11: fused_nn_max_pool2d] Trial #23: GFLOPs: 2.9568. Time: 12.4677 us. Best GFLOPs: 6.1001
2024-04-30 19:36:27 [INFO] [task_scheduler.cc:131] [Task #11: fused_nn_max_pool2d] Trial #24: GFLOPs: 2.1854. Time: 16.8680 us. Best GFLOPs: 6.1001
2024-04-30 19:36:27 [INFO] [task_scheduler.cc:131] [Task #11: fused_nn_max_pool2d] Trial #25: GFLOPs: 2.7031. Time: 13.6376 us. Best GFLOPs: 6.1001
2024-04-30 19:36:27 [INFO] [task_scheduler.cc:131] [Task #11: fused_nn_max_pool2d] Trial #26: GFLOPs: 2.3974. Time: 15.3769 us. Best GFLOPs: 6.1001
2024-04-30 19:36:27 [INFO] [task_scheduler.cc:131] [Task #11: fused_nn_max_pool2d] Trial #27: GFLOPs: 1.5344. Time: 24.0248 us. Best GFLOPs: 6.1001
2024-04-30 19:36:27 [INFO] [task_scheduler.cc:131] [Task #11: fused_nn_max_pool2d] Trial #28: GFLOPs: 3.4092. Time: 10.8132 us. Best GFLOPs: 6.1001
2024-04-30 19:36:27 [INFO] [task_scheduler.cc:131] [Task #11: fused_nn_max_pool2d] Trial #29: GFLOPs: 1.8575. Time: 19.8461 us. Best GFLOPs: 6.1001
2024-04-30 19:36:27 [INFO] [task_scheduler.cc:131] [Task #11: fused_nn_max_pool2d] Trial #30: GFLOPs: 1.6502. Time: 22.3391 us. Best GFLOPs: 6.1001
2024-04-30 19:36:27 [INFO] [task_scheduler.cc:131] [Task #11: fused_nn_max_pool2d] Trial #31: GFLOPs: 3.3355. Time: 11.0519 us. Best GFLOPs: 6.1001
2024-04-30 19:36:27 [INFO] [task_scheduler.cc:131] [Task #11: fused_nn_max_pool2d] Trial #32: GFLOPs: 1.5026. Time: 24.5330 us. Best GFLOPs: 6.1001
2024-04-30 19:36:27 [INFO] [task_scheduler.cc:131] [Task #11: fused_nn_max_pool2d] Trial #33: GFLOPs: 2.5160. Time: 14.6518 us. Best GFLOPs: 6.1001
2024-04-30 19:36:27 [INFO] [task_scheduler.cc:131] [Task #11: fused_nn_max_pool2d] Trial #34: GFLOPs: 2.8590. Time: 12.8940 us. Best GFLOPs: 6.1001
2024-04-30 19:36:27 [INFO] [task_scheduler.cc:131] [Task #11: fused_nn_max_pool2d] Trial #35: GFLOPs: 1.9721. Time: 18.6930 us. Best GFLOPs: 6.1001
2024-04-30 19:36:27 [INFO] [task_scheduler.cc:131] [Task #11: fused_nn_max_pool2d] Trial #36: GFLOPs: 1.8359. Time: 20.0797 us. Best GFLOPs: 6.1001
2024-04-30 19:36:27 [INFO] [task_scheduler.cc:131] [Task #11: fused_nn_max_pool2d] Trial #37: GFLOPs: 1.6946. Time: 21.7536 us. Best GFLOPs: 6.1001
2024-04-30 19:36:27 [INFO] [task_scheduler.cc:131] [Task #11: fused_nn_max_pool2d] Trial #38: GFLOPs: 2.8832. Time: 12.7856 us. Best GFLOPs: 6.1001
2024-04-30 19:36:27 [INFO] [task_scheduler.cc:131] [Task #11: fused_nn_max_pool2d] Trial #39: GFLOPs: 1.8522. Time: 19.9033 us. Best GFLOPs: 6.1001
2024-04-30 19:36:27 [INFO] [task_scheduler.cc:131] [Task #11: fused_nn_max_pool2d] Trial #40: GFLOPs: 6.1170. Time: 6.0265 us. Best GFLOPs: 6.1170
2024-04-30 19:36:27 [INFO] [task_scheduler.cc:131] [Task #11: fused_nn_max_pool2d] Trial #41: GFLOPs: 3.2290. Time: 11.4165 us. Best GFLOPs: 6.1170
2024-04-30 19:36:27 [INFO] [task_scheduler.cc:131] [Task #11: fused_nn_max_pool2d] Trial #42: GFLOPs: 2.1611. Time: 17.0579 us. Best GFLOPs: 6.1170
2024-04-30 19:36:27 [INFO] [task_scheduler.cc:131] [Task #11: fused_nn_max_pool2d] Trial #43: GFLOPs: 3.1674. Time: 11.6387 us. Best GFLOPs: 6.1170
2024-04-30 19:36:27 [INFO] [task_scheduler.cc:131] [Task #11: fused_nn_max_pool2d] Trial #44: GFLOPs: 3.2215. Time: 11.4432 us. Best GFLOPs: 6.1170
2024-04-30 19:36:27 [INFO] [task_scheduler.cc:131] [Task #11: fused_nn_max_pool2d] Trial #45: GFLOPs: 2.0470. Time: 18.0091 us. Best GFLOPs: 6.1170
2024-04-30 19:36:27 [INFO] [task_scheduler.cc:131] [Task #11: fused_nn_max_pool2d] Trial #46: GFLOPs: 2.1757. Time: 16.9432 us. Best GFLOPs: 6.1170
2024-04-30 19:36:27 [INFO] [task_scheduler.cc:131] [Task #11: fused_nn_max_pool2d] Trial #47: GFLOPs: 2.1869. Time: 16.8568 us. Best GFLOPs: 6.1170
2024-04-30 19:36:27 [INFO] [task_scheduler.cc:131] [Task #11: fused_nn_max_pool2d] Trial #48: GFLOPs: 2.4858. Time: 14.8299 us. Best GFLOPs: 6.1170
2024-04-30 19:36:27 [INFO] [task_scheduler.cc:131] [Task #11: fused_nn_max_pool2d] Trial #49: GFLOPs: 3.5504. Time: 10.3832 us. Best GFLOPs: 6.1170
2024-04-30 19:36:27 [INFO] [task_scheduler.cc:131] [Task #11: fused_nn_max_pool2d] Trial #50: GFLOPs: 2.5416. Time: 14.5044 us. Best GFLOPs: 6.1170
2024-04-30 19:36:27 [INFO] [task_scheduler.cc:131] [Task #11: fused_nn_max_pool2d] Trial #51: GFLOPs: 2.7945. Time: 13.1914 us. Best GFLOPs: 6.1170
2024-04-30 19:36:27 [INFO] [task_scheduler.cc:131] [Task #11: fused_nn_max_pool2d] Trial #52: GFLOPs: 1.4771. Time: 24.9565 us. Best GFLOPs: 6.1170
2024-04-30 19:36:27 [INFO] [task_scheduler.cc:131] [Task #11: fused_nn_max_pool2d] Trial #53: GFLOPs: 2.1866. Time: 16.8587 us. Best GFLOPs: 6.1170
2024-04-30 19:36:27 [INFO] [task_scheduler.cc:131] [Task #11: fused_nn_max_pool2d] Trial #54: GFLOPs: 1.9192. Time: 19.2078 us. Best GFLOPs: 6.1170
2024-04-30 19:36:27 [INFO] [task_scheduler.cc:131] [Task #11: fused_nn_max_pool2d] Trial #55: GFLOPs: 2.1312. Time: 17.2971 us. Best GFLOPs: 6.1170
