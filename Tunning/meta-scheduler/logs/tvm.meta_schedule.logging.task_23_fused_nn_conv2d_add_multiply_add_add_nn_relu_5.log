2024-04-30 19:06:08 [INFO] [task_scheduler.cc:160] Initializing Task #23: "fused_nn_conv2d_add_multiply_add_add_nn_relu_5"
2024-04-30 19:06:08 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(2), T.int64(2), T.int64(256)), "float32"), p1: T.Buffer((T.int64(1), T.int64(1), T.int64(256), T.int64(1024)), "float32"), p2: T.Buffer((T.int64(1), T.int64(1), T.int64(1), T.int64(1024)), "float32"), p3: T.Buffer((T.int64(1), T.int64(1), T.int64(1), T.int64(1024)), "float32"), p4: T.Buffer((T.int64(1), T.int64(1), T.int64(1), T.int64(1024)), "float32"), p5: T.Buffer((T.int64(1), T.int64(2), T.int64(2), T.int64(1024)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(2), T.int64(2), T.int64(1024)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        pad_temp = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(2), T.int64(256)))
        conv2d_nhwc = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(2), T.int64(1024)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(2), T.int64(1024)))
        T_multiply = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(2), T.int64(1024)))
        T_add_1 = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(2), T.int64(1024)))
        T_add_2 = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(2), T.int64(1024)))
        for i0, i1, i2, i3 in T.grid(T.int64(1), T.int64(2), T.int64(2), T.int64(256)):
            with T.block("pad_temp"):
                v_i0, v_i1, v_i2, v_i3 = T.axis.remap("SSSS", [i0, i1, i2, i3])
                T.reads(p0[v_i0, v_i1, v_i2, v_i3])
                T.writes(pad_temp[v_i0, v_i1, v_i2, v_i3])
                pad_temp[v_i0, v_i1, v_i2, v_i3] = p0[v_i0, v_i1, v_i2, v_i3]
        for nn, yy, xx, ff, ry, rx, rc in T.grid(T.int64(1), T.int64(2), T.int64(2), T.int64(1024), T.int64(1), T.int64(1), T.int64(256)):
            with T.block("conv2d_nhwc"):
                v_nn, v_yy, v_xx, v_ff, v_ry, v_rx, v_rc = T.axis.remap("SSSSRRR", [nn, yy, xx, ff, ry, rx, rc])
                T.reads(pad_temp[v_nn, v_yy + v_ry, v_xx + v_rx, v_rc], p1[v_ry, v_rx, v_rc, v_ff])
                T.writes(conv2d_nhwc[v_nn, v_yy, v_xx, v_ff])
                with T.init():
                    conv2d_nhwc[v_nn, v_yy, v_xx, v_ff] = T.float32(0)
                conv2d_nhwc[v_nn, v_yy, v_xx, v_ff] = conv2d_nhwc[v_nn, v_yy, v_xx, v_ff] + pad_temp[v_nn, v_yy + v_ry, v_xx + v_rx, v_rc] * p1[v_ry, v_rx, v_rc, v_ff]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(2), T.int64(1024)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(conv2d_nhwc[v_ax0, v_ax1, v_ax2, v_ax3], p2[v_ax0, T.int64(0), T.int64(0), v_ax3])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3] = conv2d_nhwc[v_ax0, v_ax1, v_ax2, v_ax3] + p2[v_ax0, T.int64(0), T.int64(0), v_ax3]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(2), T.int64(1024)):
            with T.block("T_multiply"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3], p3[v_ax0, T.int64(0), T.int64(0), v_ax3])
                T.writes(T_multiply[v_ax0, v_ax1, v_ax2, v_ax3])
                T_multiply[v_ax0, v_ax1, v_ax2, v_ax3] = T_add[v_ax0, v_ax1, v_ax2, v_ax3] * p3[v_ax0, T.int64(0), T.int64(0), v_ax3]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(2), T.int64(1024)):
            with T.block("T_add_1"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(T_multiply[v_ax0, v_ax1, v_ax2, v_ax3], p4[v_ax0, T.int64(0), T.int64(0), v_ax3])
                T.writes(T_add_1[v_ax0, v_ax1, v_ax2, v_ax3])
                T_add_1[v_ax0, v_ax1, v_ax2, v_ax3] = T_multiply[v_ax0, v_ax1, v_ax2, v_ax3] + p4[v_ax0, T.int64(0), T.int64(0), v_ax3]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(2), T.int64(1024)):
            with T.block("T_add_2"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(p5[v_ax0, v_ax1, v_ax2, v_ax3], T_add_1[v_ax0, v_ax1, v_ax2, v_ax3])
                T.writes(T_add_2[v_ax0, v_ax1, v_ax2, v_ax3])
                T_add_2[v_ax0, v_ax1, v_ax2, v_ax3] = p5[v_ax0, v_ax1, v_ax2, v_ax3] + T_add_1[v_ax0, v_ax1, v_ax2, v_ax3]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(2), T.int64(1024)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(T_add_2[v_ax0, v_ax1, v_ax2, v_ax3])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(T_add_2[v_ax0, v_ax1, v_ax2, v_ax3], T.float32(0))
2024-04-30 19:06:08 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-30 19:06:08 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(2), T.int64(2), T.int64(256)), "float32"), p1: T.Buffer((T.int64(1), T.int64(1), T.int64(256), T.int64(1024)), "float32"), p2: T.Buffer((T.int64(1), T.int64(1), T.int64(1), T.int64(1024)), "float32"), p3: T.Buffer((T.int64(1), T.int64(1), T.int64(1), T.int64(1024)), "float32"), p4: T.Buffer((T.int64(1), T.int64(1), T.int64(1), T.int64(1024)), "float32"), p5: T.Buffer((T.int64(1), T.int64(2), T.int64(2), T.int64(1024)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(2), T.int64(2), T.int64(1024)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 96, "meta_schedule.unroll_explicit": 0, "meta_schedule.vectorize": 64})
            conv2d_nhwc = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(2), T.int64(1024)))
            for nn_0, yy_0, xx_0, ff_0, nn_1, yy_1, xx_1, ff_1, ry_0, rx_0, rc_0, nn_2, yy_2, xx_2, ff_2, ry_1, rx_1, rc_1, nn_3, yy_3, xx_3, ff_3 in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(1), T.int64(2), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(128), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(32)):
                with T.block("conv2d_nhwc"):
                    v_nn = T.axis.spatial(T.int64(1), nn_0 + nn_1 + nn_2 + nn_3)
                    v_yy = T.axis.spatial(T.int64(2), yy_0 * T.int64(2) + yy_1 + yy_2 + yy_3)
                    v_xx = T.axis.spatial(T.int64(2), xx_0 + xx_1 + xx_2 + xx_3)
                    v_ff = T.axis.spatial(T.int64(1024), ff_0 * T.int64(512) + ff_1 * T.int64(256) + ff_2 * T.int64(32) + ff_3)
                    v_ry = T.axis.reduce(T.int64(1), ry_0 + ry_1)
                    v_rx = T.axis.reduce(T.int64(1), rx_0 + rx_1)
                    v_rc = T.axis.reduce(T.int64(256), rc_0 * T.int64(2) + rc_1)
                    T.reads(p0[v_nn, v_yy + v_ry, v_xx + v_rx, v_rc], p1[v_ry, v_rx, v_rc, v_ff])
                    T.writes(conv2d_nhwc[v_nn, v_yy, v_xx, v_ff])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    with T.init():
                        conv2d_nhwc[v_nn, v_yy, v_xx, v_ff] = T.float32(0)
                    conv2d_nhwc[v_nn, v_yy, v_xx, v_ff] = conv2d_nhwc[v_nn, v_yy, v_xx, v_ff] + p0[v_nn, v_yy + v_ry, v_xx + v_rx, v_rc] * p1[v_ry, v_rx, v_rc, v_ff]
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(2), T.int64(1024)):
                with T.block("T_relu"):
                    v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                    T.reads(p5[v_ax0, v_ax1, v_ax2, v_ax3], conv2d_nhwc[v_ax0, v_ax1, v_ax2, v_ax3], p2[v_ax0, T.int64(0), T.int64(0), v_ax3], p3[v_ax0, T.int64(0), T.int64(0), v_ax3], p4[v_ax0, T.int64(0), T.int64(0), v_ax3])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(p5[v_ax0, v_ax1, v_ax2, v_ax3] + ((conv2d_nhwc[v_ax0, v_ax1, v_ax2, v_ax3] + p2[v_ax0, T.int64(0), T.int64(0), v_ax3]) * p3[v_ax0, T.int64(0), T.int64(0), v_ax3] + p4[v_ax0, T.int64(0), T.int64(0), v_ax3]), T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nhwc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_multiply", func_name="main")
b4 = sch.get_block(name="T_add_1", func_name="main")
b5 = sch.get_block(name="T_add_2", func_name="main")
b6 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b5)
sch.compute_inline(block=b4)
sch.compute_inline(block=b3)
sch.compute_inline(block=b2)
sch.compute_inline(block=b0)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l7, l8, l9, l10, l11, l12, l13 = sch.get_loops(block=b1)
v14, v15, v16, v17 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l18, l19, l20, l21 = sch.split(loop=l7, factors=[v14, v15, v16, v17], preserve_unit_iters=True, disable_predication=False)
v22, v23, v24, v25 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 2, 1, 1])
l26, l27, l28, l29 = sch.split(loop=l8, factors=[v22, v23, v24, v25], preserve_unit_iters=True, disable_predication=False)
v30, v31, v32, v33 = sch.sample_perfect_tile(loop=l9, n=4, max_innermost_factor=64, decision=[2, 1, 1, 1])
l34, l35, l36, l37 = sch.split(loop=l9, factors=[v30, v31, v32, v33], preserve_unit_iters=True, disable_predication=False)
v38, v39, v40, v41 = sch.sample_perfect_tile(loop=l10, n=4, max_innermost_factor=64, decision=[2, 2, 8, 32])
l42, l43, l44, l45 = sch.split(loop=l10, factors=[v38, v39, v40, v41], preserve_unit_iters=True, disable_predication=False)
v46, v47 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 1])
l48, l49 = sch.split(loop=l11, factors=[v46, v47], preserve_unit_iters=True, disable_predication=False)
v50, v51 = sch.sample_perfect_tile(loop=l12, n=2, max_innermost_factor=64, decision=[1, 1])
l52, l53 = sch.split(loop=l12, factors=[v50, v51], preserve_unit_iters=True, disable_predication=False)
v54, v55 = sch.sample_perfect_tile(loop=l13, n=2, max_innermost_factor=64, decision=[128, 2])
l56, l57 = sch.split(loop=l13, factors=[v54, v55], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l18, l26, l34, l42, l19, l27, l35, l43, l48, l52, l56, l20, l28, l36, l44, l49, l53, l57, l21, l29, l37, l45)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.parallel", ann_val=96)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.vectorize", ann_val=64)
v58 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.unroll_explicit", ann_val=v58)
2024-04-30 19:06:08 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(2), T.int64(2), T.int64(256)), "float32"), p1: T.Buffer((T.int64(1), T.int64(1), T.int64(256), T.int64(1024)), "float32"), p2: T.Buffer((T.int64(1), T.int64(1), T.int64(1), T.int64(1024)), "float32"), p3: T.Buffer((T.int64(1), T.int64(1), T.int64(1), T.int64(1024)), "float32"), p4: T.Buffer((T.int64(1), T.int64(1), T.int64(1), T.int64(1024)), "float32"), p5: T.Buffer((T.int64(1), T.int64(2), T.int64(2), T.int64(1024)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(2), T.int64(2), T.int64(1024)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 96, "meta_schedule.unroll_explicit": 16, "meta_schedule.vectorize": 64})
            conv2d_nhwc = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(2), T.int64(1024)))
            for nn_0, yy_0, xx_0, ff_0, nn_1, yy_1, xx_1, ff_1 in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(1), T.int64(2), T.int64(1), T.int64(2)):
                for ry_0, rx_0, rc_0, nn_2, yy_2, xx_2, ff_2, ry_1, rx_1, rc_1, nn_3, yy_3, xx_3, ff_3 in T.grid(T.int64(1), T.int64(1), T.int64(128), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(32)):
                    with T.block("conv2d_nhwc"):
                        v_nn = T.axis.spatial(T.int64(1), nn_0 + nn_1 + nn_2 + nn_3)
                        v_yy = T.axis.spatial(T.int64(2), yy_0 * T.int64(2) + yy_1 + yy_2 + yy_3)
                        v_xx = T.axis.spatial(T.int64(2), xx_0 + xx_1 + xx_2 + xx_3)
                        v_ff = T.axis.spatial(T.int64(1024), ff_0 * T.int64(512) + ff_1 * T.int64(256) + ff_2 * T.int64(32) + ff_3)
                        v_ry = T.axis.reduce(T.int64(1), ry_0 + ry_1)
                        v_rx = T.axis.reduce(T.int64(1), rx_0 + rx_1)
                        v_rc = T.axis.reduce(T.int64(256), rc_0 * T.int64(2) + rc_1)
                        T.reads(p0[v_nn, v_yy + v_ry, v_xx + v_rx, v_rc], p1[v_ry, v_rx, v_rc, v_ff])
                        T.writes(conv2d_nhwc[v_nn, v_yy, v_xx, v_ff])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_nhwc[v_nn, v_yy, v_xx, v_ff] = T.float32(0)
                        conv2d_nhwc[v_nn, v_yy, v_xx, v_ff] = conv2d_nhwc[v_nn, v_yy, v_xx, v_ff] + p0[v_nn, v_yy + v_ry, v_xx + v_rx, v_rc] * p1[v_ry, v_rx, v_rc, v_ff]
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(256)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(2), yy_1 + ax1)
                        v_ax2 = T.axis.spatial(T.int64(2), xx_0 + ax2)
                        v_ax3 = T.axis.spatial(T.int64(1024), ff_0 * T.int64(512) + ff_1 * T.int64(256) + ax3)
                        T.reads(p5[v_ax0, v_ax1, v_ax2, v_ax3], conv2d_nhwc[v_ax0, v_ax1, v_ax2, v_ax3], p2[v_ax0, T.int64(0), T.int64(0), v_ax3], p3[v_ax0, T.int64(0), T.int64(0), v_ax3], p4[v_ax0, T.int64(0), T.int64(0), v_ax3])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(p5[v_ax0, v_ax1, v_ax2, v_ax3] + ((conv2d_nhwc[v_ax0, v_ax1, v_ax2, v_ax3] + p2[v_ax0, T.int64(0), T.int64(0), v_ax3]) * p3[v_ax0, T.int64(0), T.int64(0), v_ax3] + p4[v_ax0, T.int64(0), T.int64(0), v_ax3]), T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nhwc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_multiply", func_name="main")
b4 = sch.get_block(name="T_add_1", func_name="main")
b5 = sch.get_block(name="T_add_2", func_name="main")
b6 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b5)
sch.compute_inline(block=b4)
sch.compute_inline(block=b3)
sch.compute_inline(block=b2)
sch.compute_inline(block=b0)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l7, l8, l9, l10, l11, l12, l13 = sch.get_loops(block=b1)
v14, v15, v16, v17 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l18, l19, l20, l21 = sch.split(loop=l7, factors=[v14, v15, v16, v17], preserve_unit_iters=True, disable_predication=False)
v22, v23, v24, v25 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 2, 1, 1])
l26, l27, l28, l29 = sch.split(loop=l8, factors=[v22, v23, v24, v25], preserve_unit_iters=True, disable_predication=False)
v30, v31, v32, v33 = sch.sample_perfect_tile(loop=l9, n=4, max_innermost_factor=64, decision=[2, 1, 1, 1])
l34, l35, l36, l37 = sch.split(loop=l9, factors=[v30, v31, v32, v33], preserve_unit_iters=True, disable_predication=False)
v38, v39, v40, v41 = sch.sample_perfect_tile(loop=l10, n=4, max_innermost_factor=64, decision=[2, 2, 8, 32])
l42, l43, l44, l45 = sch.split(loop=l10, factors=[v38, v39, v40, v41], preserve_unit_iters=True, disable_predication=False)
v46, v47 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 1])
l48, l49 = sch.split(loop=l11, factors=[v46, v47], preserve_unit_iters=True, disable_predication=False)
v50, v51 = sch.sample_perfect_tile(loop=l12, n=2, max_innermost_factor=64, decision=[1, 1])
l52, l53 = sch.split(loop=l12, factors=[v50, v51], preserve_unit_iters=True, disable_predication=False)
v54, v55 = sch.sample_perfect_tile(loop=l13, n=2, max_innermost_factor=64, decision=[128, 2])
l56, l57 = sch.split(loop=l13, factors=[v54, v55], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l18, l26, l34, l42, l19, l27, l35, l43, l48, l52, l56, l20, l28, l36, l44, l49, l53, l57, l21, l29, l37, l45)
b58, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b58, loop=l43, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.parallel", ann_val=96)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.vectorize", ann_val=64)
v59 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.unroll_explicit", ann_val=v59)
2024-04-30 19:06:08 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(2), T.int64(2), T.int64(256)), "float32"), p1: T.Buffer((T.int64(1), T.int64(1), T.int64(256), T.int64(1024)), "float32"), p2: T.Buffer((T.int64(1), T.int64(1), T.int64(1), T.int64(1024)), "float32"), p3: T.Buffer((T.int64(1), T.int64(1), T.int64(1), T.int64(1024)), "float32"), p4: T.Buffer((T.int64(1), T.int64(1), T.int64(1), T.int64(1024)), "float32"), p5: T.Buffer((T.int64(1), T.int64(2), T.int64(2), T.int64(1024)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(2), T.int64(2), T.int64(1024)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 96, "meta_schedule.unroll_explicit": 512, "meta_schedule.vectorize": 64})
            conv2d_nhwc = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(2), T.int64(1024)))
            for nn_0, yy_0, xx_0, ff_0 in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(2)):
                for nn_1, yy_1, xx_1, ff_1, ry_0, rx_0, rc_0, nn_2, yy_2, xx_2, ff_2, ry_1, rx_1, rc_1, nn_3, yy_3, xx_3, ff_3 in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(128), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(32)):
                    with T.block("conv2d_nhwc"):
                        v_nn = T.axis.spatial(T.int64(1), nn_0 + nn_1 + nn_2 + nn_3)
                        v_yy = T.axis.spatial(T.int64(2), yy_0 * T.int64(2) + yy_1 + yy_2 + yy_3)
                        v_xx = T.axis.spatial(T.int64(2), xx_0 + xx_1 + xx_2 + xx_3)
                        v_ff = T.axis.spatial(T.int64(1024), ff_0 * T.int64(512) + ff_1 * T.int64(256) + ff_2 * T.int64(32) + ff_3)
                        v_ry = T.axis.reduce(T.int64(1), ry_0 + ry_1)
                        v_rx = T.axis.reduce(T.int64(1), rx_0 + rx_1)
                        v_rc = T.axis.reduce(T.int64(256), rc_0 * T.int64(2) + rc_1)
                        T.reads(p0[v_nn, v_yy + v_ry, v_xx + v_rx, v_rc], p1[v_ry, v_rx, v_rc, v_ff])
                        T.writes(conv2d_nhwc[v_nn, v_yy, v_xx, v_ff])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_nhwc[v_nn, v_yy, v_xx, v_ff] = T.float32(0)
                        conv2d_nhwc[v_nn, v_yy, v_xx, v_ff] = conv2d_nhwc[v_nn, v_yy, v_xx, v_ff] + p0[v_nn, v_yy + v_ry, v_xx + v_rx, v_rc] * p1[v_ry, v_rx, v_rc, v_ff]
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(512)):
                    with T.block("T_relu"):
                        v_ax0, v_ax1 = T.axis.remap("SS", [ax0, ax1])
                        v_ax2 = T.axis.spatial(T.int64(2), xx_0 + ax2)
                        v_ax3 = T.axis.spatial(T.int64(1024), ff_0 * T.int64(512) + ax3)
                        T.reads(p5[v_ax0, v_ax1, v_ax2, v_ax3], conv2d_nhwc[v_ax0, v_ax1, v_ax2, v_ax3], p2[v_ax0, T.int64(0), T.int64(0), v_ax3], p3[v_ax0, T.int64(0), T.int64(0), v_ax3], p4[v_ax0, T.int64(0), T.int64(0), v_ax3])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(p5[v_ax0, v_ax1, v_ax2, v_ax3] + ((conv2d_nhwc[v_ax0, v_ax1, v_ax2, v_ax3] + p2[v_ax0, T.int64(0), T.int64(0), v_ax3]) * p3[v_ax0, T.int64(0), T.int64(0), v_ax3] + p4[v_ax0, T.int64(0), T.int64(0), v_ax3]), T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nhwc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_multiply", func_name="main")
b4 = sch.get_block(name="T_add_1", func_name="main")
b5 = sch.get_block(name="T_add_2", func_name="main")
b6 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b5)
sch.compute_inline(block=b4)
sch.compute_inline(block=b3)
sch.compute_inline(block=b2)
sch.compute_inline(block=b0)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l7, l8, l9, l10, l11, l12, l13 = sch.get_loops(block=b1)
v14, v15, v16, v17 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l18, l19, l20, l21 = sch.split(loop=l7, factors=[v14, v15, v16, v17], preserve_unit_iters=True, disable_predication=False)
v22, v23, v24, v25 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 2, 1, 1])
l26, l27, l28, l29 = sch.split(loop=l8, factors=[v22, v23, v24, v25], preserve_unit_iters=True, disable_predication=False)
v30, v31, v32, v33 = sch.sample_perfect_tile(loop=l9, n=4, max_innermost_factor=64, decision=[2, 1, 1, 1])
l34, l35, l36, l37 = sch.split(loop=l9, factors=[v30, v31, v32, v33], preserve_unit_iters=True, disable_predication=False)
v38, v39, v40, v41 = sch.sample_perfect_tile(loop=l10, n=4, max_innermost_factor=64, decision=[2, 2, 8, 32])
l42, l43, l44, l45 = sch.split(loop=l10, factors=[v38, v39, v40, v41], preserve_unit_iters=True, disable_predication=False)
v46, v47 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 1])
l48, l49 = sch.split(loop=l11, factors=[v46, v47], preserve_unit_iters=True, disable_predication=False)
v50, v51 = sch.sample_perfect_tile(loop=l12, n=2, max_innermost_factor=64, decision=[1, 1])
l52, l53 = sch.split(loop=l12, factors=[v50, v51], preserve_unit_iters=True, disable_predication=False)
v54, v55 = sch.sample_perfect_tile(loop=l13, n=2, max_innermost_factor=64, decision=[128, 2])
l56, l57 = sch.split(loop=l13, factors=[v54, v55], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l18, l26, l34, l42, l19, l27, l35, l43, l48, l52, l56, l20, l28, l36, l44, l49, l53, l57, l21, l29, l37, l45)
b58, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b58, loop=l42, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.parallel", ann_val=96)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.vectorize", ann_val=64)
v59 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.unroll_explicit", ann_val=v59)
2024-04-30 19:13:55 [INFO] [task_scheduler.cc:160] Initializing Task #23: "fused_nn_conv2d_add_multiply_add_add_nn_relu_5"
2024-04-30 19:13:55 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(2), T.int64(2), T.int64(256)), "float32"), p1: T.Buffer((T.int64(1), T.int64(1), T.int64(256), T.int64(1024)), "float32"), p2: T.Buffer((T.int64(1), T.int64(1), T.int64(1), T.int64(1024)), "float32"), p3: T.Buffer((T.int64(1), T.int64(1), T.int64(1), T.int64(1024)), "float32"), p4: T.Buffer((T.int64(1), T.int64(1), T.int64(1), T.int64(1024)), "float32"), p5: T.Buffer((T.int64(1), T.int64(2), T.int64(2), T.int64(1024)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(2), T.int64(2), T.int64(1024)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        pad_temp = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(2), T.int64(256)))
        conv2d_nhwc = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(2), T.int64(1024)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(2), T.int64(1024)))
        T_multiply = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(2), T.int64(1024)))
        T_add_1 = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(2), T.int64(1024)))
        T_add_2 = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(2), T.int64(1024)))
        for i0, i1, i2, i3 in T.grid(T.int64(1), T.int64(2), T.int64(2), T.int64(256)):
            with T.block("pad_temp"):
                v_i0, v_i1, v_i2, v_i3 = T.axis.remap("SSSS", [i0, i1, i2, i3])
                T.reads(p0[v_i0, v_i1, v_i2, v_i3])
                T.writes(pad_temp[v_i0, v_i1, v_i2, v_i3])
                pad_temp[v_i0, v_i1, v_i2, v_i3] = p0[v_i0, v_i1, v_i2, v_i3]
        for nn, yy, xx, ff, ry, rx, rc in T.grid(T.int64(1), T.int64(2), T.int64(2), T.int64(1024), T.int64(1), T.int64(1), T.int64(256)):
            with T.block("conv2d_nhwc"):
                v_nn, v_yy, v_xx, v_ff, v_ry, v_rx, v_rc = T.axis.remap("SSSSRRR", [nn, yy, xx, ff, ry, rx, rc])
                T.reads(pad_temp[v_nn, v_yy + v_ry, v_xx + v_rx, v_rc], p1[v_ry, v_rx, v_rc, v_ff])
                T.writes(conv2d_nhwc[v_nn, v_yy, v_xx, v_ff])
                with T.init():
                    conv2d_nhwc[v_nn, v_yy, v_xx, v_ff] = T.float32(0)
                conv2d_nhwc[v_nn, v_yy, v_xx, v_ff] = conv2d_nhwc[v_nn, v_yy, v_xx, v_ff] + pad_temp[v_nn, v_yy + v_ry, v_xx + v_rx, v_rc] * p1[v_ry, v_rx, v_rc, v_ff]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(2), T.int64(1024)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(conv2d_nhwc[v_ax0, v_ax1, v_ax2, v_ax3], p2[v_ax0, T.int64(0), T.int64(0), v_ax3])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3] = conv2d_nhwc[v_ax0, v_ax1, v_ax2, v_ax3] + p2[v_ax0, T.int64(0), T.int64(0), v_ax3]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(2), T.int64(1024)):
            with T.block("T_multiply"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3], p3[v_ax0, T.int64(0), T.int64(0), v_ax3])
                T.writes(T_multiply[v_ax0, v_ax1, v_ax2, v_ax3])
                T_multiply[v_ax0, v_ax1, v_ax2, v_ax3] = T_add[v_ax0, v_ax1, v_ax2, v_ax3] * p3[v_ax0, T.int64(0), T.int64(0), v_ax3]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(2), T.int64(1024)):
            with T.block("T_add_1"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(T_multiply[v_ax0, v_ax1, v_ax2, v_ax3], p4[v_ax0, T.int64(0), T.int64(0), v_ax3])
                T.writes(T_add_1[v_ax0, v_ax1, v_ax2, v_ax3])
                T_add_1[v_ax0, v_ax1, v_ax2, v_ax3] = T_multiply[v_ax0, v_ax1, v_ax2, v_ax3] + p4[v_ax0, T.int64(0), T.int64(0), v_ax3]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(2), T.int64(1024)):
            with T.block("T_add_2"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(p5[v_ax0, v_ax1, v_ax2, v_ax3], T_add_1[v_ax0, v_ax1, v_ax2, v_ax3])
                T.writes(T_add_2[v_ax0, v_ax1, v_ax2, v_ax3])
                T_add_2[v_ax0, v_ax1, v_ax2, v_ax3] = p5[v_ax0, v_ax1, v_ax2, v_ax3] + T_add_1[v_ax0, v_ax1, v_ax2, v_ax3]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(2), T.int64(1024)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(T_add_2[v_ax0, v_ax1, v_ax2, v_ax3])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(T_add_2[v_ax0, v_ax1, v_ax2, v_ax3], T.float32(0))
2024-04-30 19:13:55 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-30 19:13:55 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(2), T.int64(2), T.int64(256)), "float32"), p1: T.Buffer((T.int64(1), T.int64(1), T.int64(256), T.int64(1024)), "float32"), p2: T.Buffer((T.int64(1), T.int64(1), T.int64(1), T.int64(1024)), "float32"), p3: T.Buffer((T.int64(1), T.int64(1), T.int64(1), T.int64(1024)), "float32"), p4: T.Buffer((T.int64(1), T.int64(1), T.int64(1), T.int64(1024)), "float32"), p5: T.Buffer((T.int64(1), T.int64(2), T.int64(2), T.int64(1024)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(2), T.int64(2), T.int64(1024)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 96, "meta_schedule.unroll_explicit": 64, "meta_schedule.vectorize": 64})
            conv2d_nhwc = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(2), T.int64(1024)))
            for nn_0, yy_0, xx_0, ff_0, nn_1, yy_1, xx_1, ff_1, ry_0, rx_0, rc_0, nn_2, yy_2, xx_2, ff_2, ry_1, rx_1, rc_1, nn_3, yy_3, xx_3, ff_3 in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(32), T.int64(1), T.int64(2), T.int64(1), T.int64(4)):
                with T.block("conv2d_nhwc"):
                    v_nn = T.axis.spatial(T.int64(1), nn_0 + nn_1 + nn_2 + nn_3)
                    v_yy = T.axis.spatial(T.int64(2), yy_0 * T.int64(2) + yy_1 * T.int64(2) + yy_2 * T.int64(2) + yy_3)
                    v_xx = T.axis.spatial(T.int64(2), xx_0 + xx_1 + xx_2 + xx_3)
                    v_ff = T.axis.spatial(T.int64(1024), ff_0 * T.int64(128) + ff_1 * T.int64(32) + ff_2 * T.int64(4) + ff_3)
                    v_ry = T.axis.reduce(T.int64(1), ry_0 + ry_1)
                    v_rx = T.axis.reduce(T.int64(1), rx_0 + rx_1)
                    v_rc = T.axis.reduce(T.int64(256), rc_0 * T.int64(32) + rc_1)
                    T.reads(p0[v_nn, v_yy + v_ry, v_xx + v_rx, v_rc], p1[v_ry, v_rx, v_rc, v_ff])
                    T.writes(conv2d_nhwc[v_nn, v_yy, v_xx, v_ff])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    with T.init():
                        conv2d_nhwc[v_nn, v_yy, v_xx, v_ff] = T.float32(0)
                    conv2d_nhwc[v_nn, v_yy, v_xx, v_ff] = conv2d_nhwc[v_nn, v_yy, v_xx, v_ff] + p0[v_nn, v_yy + v_ry, v_xx + v_rx, v_rc] * p1[v_ry, v_rx, v_rc, v_ff]
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(2), T.int64(1024)):
                with T.block("T_relu"):
                    v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                    T.reads(p5[v_ax0, v_ax1, v_ax2, v_ax3], conv2d_nhwc[v_ax0, v_ax1, v_ax2, v_ax3], p2[v_ax0, T.int64(0), T.int64(0), v_ax3], p3[v_ax0, T.int64(0), T.int64(0), v_ax3], p4[v_ax0, T.int64(0), T.int64(0), v_ax3])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(p5[v_ax0, v_ax1, v_ax2, v_ax3] + ((conv2d_nhwc[v_ax0, v_ax1, v_ax2, v_ax3] + p2[v_ax0, T.int64(0), T.int64(0), v_ax3]) * p3[v_ax0, T.int64(0), T.int64(0), v_ax3] + p4[v_ax0, T.int64(0), T.int64(0), v_ax3]), T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nhwc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_multiply", func_name="main")
b4 = sch.get_block(name="T_add_1", func_name="main")
b5 = sch.get_block(name="T_add_2", func_name="main")
b6 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b5)
sch.compute_inline(block=b4)
sch.compute_inline(block=b3)
sch.compute_inline(block=b2)
sch.compute_inline(block=b0)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l7, l8, l9, l10, l11, l12, l13 = sch.get_loops(block=b1)
v14, v15, v16, v17 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l18, l19, l20, l21 = sch.split(loop=l7, factors=[v14, v15, v16, v17], preserve_unit_iters=True, disable_predication=False)
v22, v23, v24, v25 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 1, 1, 2])
l26, l27, l28, l29 = sch.split(loop=l8, factors=[v22, v23, v24, v25], preserve_unit_iters=True, disable_predication=False)
v30, v31, v32, v33 = sch.sample_perfect_tile(loop=l9, n=4, max_innermost_factor=64, decision=[2, 1, 1, 1])
l34, l35, l36, l37 = sch.split(loop=l9, factors=[v30, v31, v32, v33], preserve_unit_iters=True, disable_predication=False)
v38, v39, v40, v41 = sch.sample_perfect_tile(loop=l10, n=4, max_innermost_factor=64, decision=[8, 4, 8, 4])
l42, l43, l44, l45 = sch.split(loop=l10, factors=[v38, v39, v40, v41], preserve_unit_iters=True, disable_predication=False)
v46, v47 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 1])
l48, l49 = sch.split(loop=l11, factors=[v46, v47], preserve_unit_iters=True, disable_predication=False)
v50, v51 = sch.sample_perfect_tile(loop=l12, n=2, max_innermost_factor=64, decision=[1, 1])
l52, l53 = sch.split(loop=l12, factors=[v50, v51], preserve_unit_iters=True, disable_predication=False)
v54, v55 = sch.sample_perfect_tile(loop=l13, n=2, max_innermost_factor=64, decision=[8, 32])
l56, l57 = sch.split(loop=l13, factors=[v54, v55], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l18, l26, l34, l42, l19, l27, l35, l43, l48, l52, l56, l20, l28, l36, l44, l49, l53, l57, l21, l29, l37, l45)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.parallel", ann_val=96)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.vectorize", ann_val=64)
v58 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.unroll_explicit", ann_val=v58)
2024-04-30 19:13:55 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(2), T.int64(2), T.int64(256)), "float32"), p1: T.Buffer((T.int64(1), T.int64(1), T.int64(256), T.int64(1024)), "float32"), p2: T.Buffer((T.int64(1), T.int64(1), T.int64(1), T.int64(1024)), "float32"), p3: T.Buffer((T.int64(1), T.int64(1), T.int64(1), T.int64(1024)), "float32"), p4: T.Buffer((T.int64(1), T.int64(1), T.int64(1), T.int64(1024)), "float32"), p5: T.Buffer((T.int64(1), T.int64(2), T.int64(2), T.int64(1024)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(2), T.int64(2), T.int64(1024)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 96, "meta_schedule.unroll_explicit": 64, "meta_schedule.vectorize": 64})
            conv2d_nhwc = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(2), T.int64(1024)))
            for nn_0, yy_0, xx_0, ff_0, nn_1, yy_1, xx_1, ff_1 in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(4)):
                for ry_0, rx_0, rc_0, nn_2, yy_2, xx_2, ff_2, ry_1, rx_1, rc_1, nn_3, yy_3, xx_3, ff_3 in T.grid(T.int64(1), T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(32), T.int64(1), T.int64(2), T.int64(1), T.int64(4)):
                    with T.block("conv2d_nhwc"):
                        v_nn = T.axis.spatial(T.int64(1), nn_0 + nn_1 + nn_2 + nn_3)
                        v_yy = T.axis.spatial(T.int64(2), yy_0 * T.int64(2) + yy_1 * T.int64(2) + yy_2 * T.int64(2) + yy_3)
                        v_xx = T.axis.spatial(T.int64(2), xx_0 + xx_1 + xx_2 + xx_3)
                        v_ff = T.axis.spatial(T.int64(1024), ff_0 * T.int64(128) + ff_1 * T.int64(32) + ff_2 * T.int64(4) + ff_3)
                        v_ry = T.axis.reduce(T.int64(1), ry_0 + ry_1)
                        v_rx = T.axis.reduce(T.int64(1), rx_0 + rx_1)
                        v_rc = T.axis.reduce(T.int64(256), rc_0 * T.int64(32) + rc_1)
                        T.reads(p0[v_nn, v_yy + v_ry, v_xx + v_rx, v_rc], p1[v_ry, v_rx, v_rc, v_ff])
                        T.writes(conv2d_nhwc[v_nn, v_yy, v_xx, v_ff])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_nhwc[v_nn, v_yy, v_xx, v_ff] = T.float32(0)
                        conv2d_nhwc[v_nn, v_yy, v_xx, v_ff] = conv2d_nhwc[v_nn, v_yy, v_xx, v_ff] + p0[v_nn, v_yy + v_ry, v_xx + v_rx, v_rc] * p1[v_ry, v_rx, v_rc, v_ff]
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(32)):
                    with T.block("T_relu"):
                        v_ax0, v_ax1 = T.axis.remap("SS", [ax0, ax1])
                        v_ax2 = T.axis.spatial(T.int64(2), xx_0 + ax2)
                        v_ax3 = T.axis.spatial(T.int64(1024), ff_0 * T.int64(128) + ff_1 * T.int64(32) + ax3)
                        T.reads(p5[v_ax0, v_ax1, v_ax2, v_ax3], conv2d_nhwc[v_ax0, v_ax1, v_ax2, v_ax3], p2[v_ax0, T.int64(0), T.int64(0), v_ax3], p3[v_ax0, T.int64(0), T.int64(0), v_ax3], p4[v_ax0, T.int64(0), T.int64(0), v_ax3])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(p5[v_ax0, v_ax1, v_ax2, v_ax3] + ((conv2d_nhwc[v_ax0, v_ax1, v_ax2, v_ax3] + p2[v_ax0, T.int64(0), T.int64(0), v_ax3]) * p3[v_ax0, T.int64(0), T.int64(0), v_ax3] + p4[v_ax0, T.int64(0), T.int64(0), v_ax3]), T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nhwc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_multiply", func_name="main")
b4 = sch.get_block(name="T_add_1", func_name="main")
b5 = sch.get_block(name="T_add_2", func_name="main")
b6 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b5)
sch.compute_inline(block=b4)
sch.compute_inline(block=b3)
sch.compute_inline(block=b2)
sch.compute_inline(block=b0)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l7, l8, l9, l10, l11, l12, l13 = sch.get_loops(block=b1)
v14, v15, v16, v17 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l18, l19, l20, l21 = sch.split(loop=l7, factors=[v14, v15, v16, v17], preserve_unit_iters=True, disable_predication=False)
v22, v23, v24, v25 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 1, 1, 2])
l26, l27, l28, l29 = sch.split(loop=l8, factors=[v22, v23, v24, v25], preserve_unit_iters=True, disable_predication=False)
v30, v31, v32, v33 = sch.sample_perfect_tile(loop=l9, n=4, max_innermost_factor=64, decision=[2, 1, 1, 1])
l34, l35, l36, l37 = sch.split(loop=l9, factors=[v30, v31, v32, v33], preserve_unit_iters=True, disable_predication=False)
v38, v39, v40, v41 = sch.sample_perfect_tile(loop=l10, n=4, max_innermost_factor=64, decision=[8, 4, 8, 4])
l42, l43, l44, l45 = sch.split(loop=l10, factors=[v38, v39, v40, v41], preserve_unit_iters=True, disable_predication=False)
v46, v47 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 1])
l48, l49 = sch.split(loop=l11, factors=[v46, v47], preserve_unit_iters=True, disable_predication=False)
v50, v51 = sch.sample_perfect_tile(loop=l12, n=2, max_innermost_factor=64, decision=[1, 1])
l52, l53 = sch.split(loop=l12, factors=[v50, v51], preserve_unit_iters=True, disable_predication=False)
v54, v55 = sch.sample_perfect_tile(loop=l13, n=2, max_innermost_factor=64, decision=[8, 32])
l56, l57 = sch.split(loop=l13, factors=[v54, v55], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l18, l26, l34, l42, l19, l27, l35, l43, l48, l52, l56, l20, l28, l36, l44, l49, l53, l57, l21, l29, l37, l45)
b58, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b58, loop=l43, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.parallel", ann_val=96)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.vectorize", ann_val=64)
v59 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.unroll_explicit", ann_val=v59)
2024-04-30 19:13:55 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(2), T.int64(2), T.int64(256)), "float32"), p1: T.Buffer((T.int64(1), T.int64(1), T.int64(256), T.int64(1024)), "float32"), p2: T.Buffer((T.int64(1), T.int64(1), T.int64(1), T.int64(1024)), "float32"), p3: T.Buffer((T.int64(1), T.int64(1), T.int64(1), T.int64(1024)), "float32"), p4: T.Buffer((T.int64(1), T.int64(1), T.int64(1), T.int64(1024)), "float32"), p5: T.Buffer((T.int64(1), T.int64(2), T.int64(2), T.int64(1024)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(2), T.int64(2), T.int64(1024)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 96, "meta_schedule.unroll_explicit": 16, "meta_schedule.vectorize": 64})
            conv2d_nhwc = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(2), T.int64(1024)))
            for nn_0, yy_0, xx_0, ff_0 in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(8)):
                for nn_1, yy_1, xx_1, ff_1, ry_0, rx_0, rc_0, nn_2, yy_2, xx_2, ff_2, ry_1, rx_1, rc_1, nn_3, yy_3, xx_3, ff_3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(32), T.int64(1), T.int64(2), T.int64(1), T.int64(4)):
                    with T.block("conv2d_nhwc"):
                        v_nn = T.axis.spatial(T.int64(1), nn_0 + nn_1 + nn_2 + nn_3)
                        v_yy = T.axis.spatial(T.int64(2), yy_0 * T.int64(2) + yy_1 * T.int64(2) + yy_2 * T.int64(2) + yy_3)
                        v_xx = T.axis.spatial(T.int64(2), xx_0 + xx_1 + xx_2 + xx_3)
                        v_ff = T.axis.spatial(T.int64(1024), ff_0 * T.int64(128) + ff_1 * T.int64(32) + ff_2 * T.int64(4) + ff_3)
                        v_ry = T.axis.reduce(T.int64(1), ry_0 + ry_1)
                        v_rx = T.axis.reduce(T.int64(1), rx_0 + rx_1)
                        v_rc = T.axis.reduce(T.int64(256), rc_0 * T.int64(32) + rc_1)
                        T.reads(p0[v_nn, v_yy + v_ry, v_xx + v_rx, v_rc], p1[v_ry, v_rx, v_rc, v_ff])
                        T.writes(conv2d_nhwc[v_nn, v_yy, v_xx, v_ff])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_nhwc[v_nn, v_yy, v_xx, v_ff] = T.float32(0)
                        conv2d_nhwc[v_nn, v_yy, v_xx, v_ff] = conv2d_nhwc[v_nn, v_yy, v_xx, v_ff] + p0[v_nn, v_yy + v_ry, v_xx + v_rx, v_rc] * p1[v_ry, v_rx, v_rc, v_ff]
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(128)):
                    with T.block("T_relu"):
                        v_ax0, v_ax1 = T.axis.remap("SS", [ax0, ax1])
                        v_ax2 = T.axis.spatial(T.int64(2), xx_0 + ax2)
                        v_ax3 = T.axis.spatial(T.int64(1024), ff_0 * T.int64(128) + ax3)
                        T.reads(p5[v_ax0, v_ax1, v_ax2, v_ax3], conv2d_nhwc[v_ax0, v_ax1, v_ax2, v_ax3], p2[v_ax0, T.int64(0), T.int64(0), v_ax3], p3[v_ax0, T.int64(0), T.int64(0), v_ax3], p4[v_ax0, T.int64(0), T.int64(0), v_ax3])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(p5[v_ax0, v_ax1, v_ax2, v_ax3] + ((conv2d_nhwc[v_ax0, v_ax1, v_ax2, v_ax3] + p2[v_ax0, T.int64(0), T.int64(0), v_ax3]) * p3[v_ax0, T.int64(0), T.int64(0), v_ax3] + p4[v_ax0, T.int64(0), T.int64(0), v_ax3]), T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nhwc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_multiply", func_name="main")
b4 = sch.get_block(name="T_add_1", func_name="main")
b5 = sch.get_block(name="T_add_2", func_name="main")
b6 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b5)
sch.compute_inline(block=b4)
sch.compute_inline(block=b3)
sch.compute_inline(block=b2)
sch.compute_inline(block=b0)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l7, l8, l9, l10, l11, l12, l13 = sch.get_loops(block=b1)
v14, v15, v16, v17 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l18, l19, l20, l21 = sch.split(loop=l7, factors=[v14, v15, v16, v17], preserve_unit_iters=True, disable_predication=False)
v22, v23, v24, v25 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 1, 1, 2])
l26, l27, l28, l29 = sch.split(loop=l8, factors=[v22, v23, v24, v25], preserve_unit_iters=True, disable_predication=False)
v30, v31, v32, v33 = sch.sample_perfect_tile(loop=l9, n=4, max_innermost_factor=64, decision=[2, 1, 1, 1])
l34, l35, l36, l37 = sch.split(loop=l9, factors=[v30, v31, v32, v33], preserve_unit_iters=True, disable_predication=False)
v38, v39, v40, v41 = sch.sample_perfect_tile(loop=l10, n=4, max_innermost_factor=64, decision=[8, 4, 8, 4])
l42, l43, l44, l45 = sch.split(loop=l10, factors=[v38, v39, v40, v41], preserve_unit_iters=True, disable_predication=False)
v46, v47 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 1])
l48, l49 = sch.split(loop=l11, factors=[v46, v47], preserve_unit_iters=True, disable_predication=False)
v50, v51 = sch.sample_perfect_tile(loop=l12, n=2, max_innermost_factor=64, decision=[1, 1])
l52, l53 = sch.split(loop=l12, factors=[v50, v51], preserve_unit_iters=True, disable_predication=False)
v54, v55 = sch.sample_perfect_tile(loop=l13, n=2, max_innermost_factor=64, decision=[8, 32])
l56, l57 = sch.split(loop=l13, factors=[v54, v55], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l18, l26, l34, l42, l19, l27, l35, l43, l48, l52, l56, l20, l28, l36, l44, l49, l53, l57, l21, l29, l37, l45)
b58, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b58, loop=l42, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.parallel", ann_val=96)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.vectorize", ann_val=64)
v59 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.unroll_explicit", ann_val=v59)
2024-04-30 19:30:22 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-30 19:30:22 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-30 19:30:23 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x86e3708)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xe822308)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x2156fb38)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x21804158)]: 0 failure(s)
2024-04-30 19:30:23 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-30 19:30:24 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x86e3708)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xe822308)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x2156fb38)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x21804158)]: 0 failure(s)
2024-04-30 19:30:26 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x86e3708)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xe822308)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x2156fb38)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x21804158)]: 0 failure(s)
2024-04-30 19:30:27 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x86e3708)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xe822308)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x2156fb38)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x21804158)]: 0 failure(s)
2024-04-30 19:30:28 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x86e3708)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xe822308)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x2156fb38)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x21804158)]: 0 failure(s)
2024-04-30 19:30:29 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9998  0.9987  0.9985  0.9982  0.9971  0.9971  0.9971  0.9968  0.9967  0.9958  0.9946  0.9945  0.9938  0.9928  0.9923  0.9916
[17 : 32]:	0.9913  0.9903  0.9901  0.9901  0.9897  0.9896  0.9891  0.9890  0.9890  0.9884  0.9878  0.9873  0.9873  0.9868  0.9853  0.9851
[33 : 48]:	0.9846  0.9828  0.9825  0.9822  0.9816  0.9814  0.9812  0.9811  0.9810  0.9807  0.9799  0.9781  0.9776  0.9769  0.9764  0.9760
[49 : 64]:	0.9758  0.9754  0.9733  0.9727  0.9708  0.9707  0.9694  0.9688  0.9683  0.9679  0.9679  0.9678  0.9675  0.9669  0.9654  0.9649
2024-04-30 19:30:29 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-30 19:30:29 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-30 19:36:37 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_multiply_add_add_nn_relu_5] Trial #1: GFLOPs: 22.4108. Time: 94.4915 us. Best GFLOPs: 22.4108
2024-04-30 19:36:37 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_multiply_add_add_nn_relu_5] Trial #2: GFLOPs: 9.2219. Time: 229.6319 us. Best GFLOPs: 22.4108
2024-04-30 19:36:37 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_multiply_add_add_nn_relu_5] Trial #3: GFLOPs: 60.5188. Time: 34.9913 us. Best GFLOPs: 60.5188
2024-04-30 19:36:37 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_multiply_add_add_nn_relu_5] Trial #4: GFLOPs: 109.0022. Time: 19.4274 us. Best GFLOPs: 109.0022
2024-04-30 19:36:37 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_multiply_add_add_nn_relu_5] Trial #5: GFLOPs: 99.9003. Time: 21.1974 us. Best GFLOPs: 109.0022
2024-04-30 19:36:37 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_multiply_add_add_nn_relu_5] Trial #6: GFLOPs: 25.9228. Time: 81.6900 us. Best GFLOPs: 109.0022
2024-04-30 19:36:37 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_multiply_add_add_nn_relu_5] Trial #7: GFLOPs: 7.2149. Time: 293.5076 us. Best GFLOPs: 109.0022
2024-04-30 19:36:37 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_multiply_add_add_nn_relu_5] Trial #8: GFLOPs: 98.7682. Time: 21.4404 us. Best GFLOPs: 109.0022
2024-04-30 19:36:37 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_multiply_add_add_nn_relu_5] Trial #9: GFLOPs: 56.7283. Time: 37.3294 us. Best GFLOPs: 109.0022
2024-04-30 19:36:37 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_multiply_add_add_nn_relu_5] Trial #10: GFLOPs: 38.1960. Time: 55.4412 us. Best GFLOPs: 109.0022
2024-04-30 19:36:37 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_multiply_add_add_nn_relu_5] Trial #11: GFLOPs: 46.1012. Time: 45.9345 us. Best GFLOPs: 109.0022
2024-04-30 19:36:37 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_multiply_add_add_nn_relu_5] Trial #12: GFLOPs: 40.0191. Time: 52.9155 us. Best GFLOPs: 109.0022
2024-04-30 19:36:37 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_multiply_add_add_nn_relu_5] Trial #13: GFLOPs: 100.3284. Time: 21.1070 us. Best GFLOPs: 109.0022
2024-04-30 19:36:37 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_multiply_add_add_nn_relu_5] Trial #14: GFLOPs: 25.5546. Time: 82.8668 us. Best GFLOPs: 109.0022
2024-04-30 19:36:37 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_multiply_add_add_nn_relu_5] Trial #15: GFLOPs: 55.5782. Time: 38.1018 us. Best GFLOPs: 109.0022
2024-04-30 19:36:37 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_multiply_add_add_nn_relu_5] Trial #16: GFLOPs: 65.8768. Time: 32.1453 us. Best GFLOPs: 109.0022
2024-04-30 19:36:37 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_multiply_add_add_nn_relu_5] Trial #17: GFLOPs: 135.0424. Time: 15.6812 us. Best GFLOPs: 135.0424
2024-04-30 19:36:37 [INFO] [task_scheduler.cc:121] [Task #23: fused_nn_conv2d_add_multiply_add_add_nn_relu_5] Trial #18: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(2), T.int64(2), T.int64(256)), "float32"), p1: T.Buffer((T.int64(1), T.int64(1), T.int64(256), T.int64(1024)), "float32"), p2: T.Buffer((T.int64(1), T.int64(1), T.int64(1), T.int64(1024)), "float32"), p3: T.Buffer((T.int64(1), T.int64(1), T.int64(1), T.int64(1024)), "float32"), p4: T.Buffer((T.int64(1), T.int64(1), T.int64(1), T.int64(1024)), "float32"), p5: T.Buffer((T.int64(1), T.int64(2), T.int64(2), T.int64(1024)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(2), T.int64(2), T.int64(1024)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_nhwc = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(2), T.int64(1024)))
        p1_global = T.alloc_buffer((T.int64(2), T.int64(64), T.int64(16), T.int64(2), T.int64(16), T.int64(4)))
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(256), T.int64(1024)):
            with T.block("p1_global"):
                v0, v1, v2, v3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(p1[v0, v1, v2, v3])
                T.writes(p1_global[v3 // T.int64(512), v3 % T.int64(512) // T.int64(8), v2 // T.int64(16), v3 % T.int64(8) // T.int64(4), v2 % T.int64(16), v3 % T.int64(4)])
                T.block_attr({"meta_schedule.layout_rewrite_preproc": T.bool(True)})
                p1_global[v3 // T.int64(512), v3 % T.int64(512) // T.int64(8), v2 // T.int64(16), v3 % T.int64(8) // T.int64(4), v2 % T.int64(16), v3 % T.int64(4)] = p1[v0, v1, v2, v3]
        for nn_0_yy_0_xx_0_ff_0_fused in T.parallel(T.int64(2), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for nn_1, yy_1, xx_1, ff_1 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(64)):
                for nn_2_init, yy_2_init, xx_2_init, ff_2_init, nn_3_init, yy_3_init, xx_3_init in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(1), T.int64(2), T.int64(1)):
                    for ff_3_fused_init in T.vectorized(T.int64(4)):
                        with T.block("conv2d_nhwc_init"):
                            v_nn = T.axis.spatial(T.int64(1), nn_1 + nn_2_init + nn_3_init)
                            v_yy = T.axis.spatial(T.int64(2), yy_1 * T.int64(2) + yy_2_init * T.int64(2) + yy_3_init)
                            v_xx = T.axis.spatial(T.int64(2), xx_1 * T.int64(2) + xx_2_init + xx_3_init)
                            v_ff = T.axis.spatial(T.int64(1024), nn_0_yy_0_xx_0_ff_0_fused * T.int64(512) + ff_1 * T.int64(8) + ff_2_init * T.int64(4) + ff_3_fused_init)
                            T.reads()
                            T.writes(conv2d_nhwc[v_nn, v_yy, v_xx, v_ff])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_nhwc[v_nn, v_yy, v_xx, v_ff] = T.float32(0)
                for ry_0, rx_0, rc_0, nn_2, yy_2, xx_2, ff_2, ry_1, rx_1, rc_1, nn_3, yy_3, xx_3 in T.grid(T.int64(1), T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(1), T.int64(1), T.int64(16), T.int64(1), T.int64(2), T.int64(1)):
                    for ff_3_fused in T.vectorized(T.int64(4)):
                        with T.block("conv2d_nhwc_update"):
                            v_nn = T.axis.spatial(T.int64(1), nn_1 + nn_2 + nn_3)
                            v_yy = T.axis.spatial(T.int64(2), yy_1 * T.int64(2) + yy_2 * T.int64(2) + yy_3)
                            v_xx = T.axis.spatial(T.int64(2), xx_1 * T.int64(2) + xx_2 + xx_3)
                            v_ff = T.axis.spatial(T.int64(1024), nn_0_yy_0_xx_0_ff_0_fused * T.int64(512) + ff_1 * T.int64(8) + ff_2 * T.int64(4) + ff_3_fused)
                            v_ry = T.axis.reduce(T.int64(1), ry_0 + ry_1)
                            v_rx = T.axis.reduce(T.int64(1), rx_0 + rx_1)
                            v_rc = T.axis.reduce(T.int64(256), rc_0 * T.int64(16) + rc_1)
                            T.reads(conv2d_nhwc[v_nn, v_yy, v_xx, v_ff], p0[v_nn, v_yy + v_ry, v_xx + v_rx, v_rc], p1_global[v_ff // T.int64(512), v_ff % T.int64(512) // T.int64(8), v_rc // T.int64(16), v_ff % T.int64(8) // T.int64(4), v_rc % T.int64(16), v_ff % T.int64(4)])
                            T.writes(conv2d_nhwc[v_nn, v_yy, v_xx, v_ff])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_nhwc[v_nn, v_yy, v_xx, v_ff] = conv2d_nhwc[v_nn, v_yy, v_xx, v_ff] + p0[v_nn, v_yy + v_ry, v_xx + v_rx, v_rc] * p1_global[v_ff // T.int64(512), v_ff % T.int64(512) // T.int64(8), v_rc // T.int64(16), v_ff % T.int64(8) // T.int64(4), v_rc % T.int64(16), v_ff % T.int64(4)]
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(2), T.int64(512)):
                with T.block("T_relu"):
                    v_ax0, v_ax1, v_ax2 = T.axis.remap("SSS", [ax0, ax1, ax2])
                    v_ax3 = T.axis.spatial(T.int64(1024), nn_0_yy_0_xx_0_ff_0_fused * T.int64(512) + ax3)
                    T.reads(p5[v_ax0, v_ax1, v_ax2, v_ax3], conv2d_nhwc[v_ax0, v_ax1, v_ax2, v_ax3], p2[v_ax0, T.int64(0), T.int64(0), v_ax3], p3[v_ax0, T.int64(0), T.int64(0), v_ax3], p4[v_ax0, T.int64(0), T.int64(0), v_ax3])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(p5[v_ax0, v_ax1, v_ax2, v_ax3] + ((conv2d_nhwc[v_ax0, v_ax1, v_ax2, v_ax3] + p2[v_ax0, T.int64(0), T.int64(0), v_ax3]) * p3[v_ax0, T.int64(0), T.int64(0), v_ax3] + p4[v_ax0, T.int64(0), T.int64(0), v_ax3]), T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nhwc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_multiply", func_name="main")
b4 = sch.get_block(name="T_add_1", func_name="main")
b5 = sch.get_block(name="T_add_2", func_name="main")
b6 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b5)
sch.compute_inline(block=b4)
sch.compute_inline(block=b3)
sch.compute_inline(block=b2)
sch.compute_inline(block=b0)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l7, l8, l9, l10, l11, l12, l13 = sch.get_loops(block=b1)
v14, v15, v16, v17 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l18, l19, l20, l21 = sch.split(loop=l7, factors=[v14, v15, v16, v17], preserve_unit_iters=True, disable_predication=False)
v22, v23, v24, v25 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 1, 1, 2])
l26, l27, l28, l29 = sch.split(loop=l8, factors=[v22, v23, v24, v25], preserve_unit_iters=True, disable_predication=False)
v30, v31, v32, v33 = sch.sample_perfect_tile(loop=l9, n=4, max_innermost_factor=64, decision=[1, 1, 2, 1])
l34, l35, l36, l37 = sch.split(loop=l9, factors=[v30, v31, v32, v33], preserve_unit_iters=True, disable_predication=False)
v38, v39, v40, v41 = sch.sample_perfect_tile(loop=l10, n=4, max_innermost_factor=64, decision=[2, 64, 2, 4])
l42, l43, l44, l45 = sch.split(loop=l10, factors=[v38, v39, v40, v41], preserve_unit_iters=True, disable_predication=False)
v46, v47 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 1])
l48, l49 = sch.split(loop=l11, factors=[v46, v47], preserve_unit_iters=True, disable_predication=False)
v50, v51 = sch.sample_perfect_tile(loop=l12, n=2, max_innermost_factor=64, decision=[1, 1])
l52, l53 = sch.split(loop=l12, factors=[v50, v51], preserve_unit_iters=True, disable_predication=False)
v54, v55 = sch.sample_perfect_tile(loop=l13, n=2, max_innermost_factor=64, decision=[16, 16])
l56, l57 = sch.split(loop=l13, factors=[v54, v55], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l18, l26, l34, l42, l19, l27, l35, l43, l48, l52, l56, l20, l28, l36, l44, l49, l53, l57, l21, l29, l37, l45)
b58, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b58, loop=l42, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.parallel", ann_val=96)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.vectorize", ann_val=64)
v59 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.unroll_explicit", ann_val=v59)
sch.enter_postproc()
b60 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b60, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b60, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b60, ann_key="meta_schedule.unroll_explicit")
b61, b62 = sch.get_child_blocks(b60)
l63, l64, l65, l66, l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b61)
l85 = sch.fuse(l63, l64, l65, l66, preserve_unit_iters=True)
sch.parallel(loop=l85)
l86 = sch.fuse(l84, preserve_unit_iters=True)
sch.vectorize(loop=l86)
sch.annotate(block_or_loop=l85, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l85, ann_key="pragma_unroll_explicit", ann_val=1)
l87, l88, l89, l90, l91 = sch.get_loops(block=b62)
b92 = sch.get_block(name="conv2d_nhwc", func_name="main")
l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103, l104, l105, l106, l107, l108, l109, l110, l111 = sch.get_loops(block=b92)
b112 = sch.decompose_reduction(block=b92, loop=l98)
b113 = sch.get_block(name="conv2d_nhwc_update", func_name="main")
b114 = sch.cache_read(block=b113, read_buffer_index=2, storage_scope="global")
sch.annotate(block_or_loop=b114, ann_key="meta_schedule.layout_rewrite_preproc", ann_val=1)
sch.transform_layout(block=b113, buffer=("read", 2), index_map=tvm.tir.IndexMap.from_func(lambda i0, i1, i2, i3: (T.Cast("int64", i3) // T.int64(512), T.Cast("int64", i3) % T.int64(512) // T.int64(8), T.Cast("int64", i2) // T.int64(16), T.Cast("int64", i3) % T.int64(8) // T.int64(4), T.Cast("int64", i2) % T.int64(16), T.Cast("int64", i3) % T.int64(4),), inverse_index_map=lambda i0, i1, i2, i3, i4, i5: (T.int64(0), T.int64(0), T.Cast("int64", i2) * T.int64(16) + T.Cast("int64", i4), T.Cast("int64", i0) * T.int64(512) + T.Cast("int64", i1) * T.int64(8) + T.Cast("int64", i3) * T.int64(4) + T.Cast("int64", i5),)), pad_value=None, assume_injective_transform=False)
2024-04-30 19:36:37 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_multiply_add_add_nn_relu_5] Trial #19: GFLOPs: 133.7614. Time: 15.8314 us. Best GFLOPs: 135.0424
2024-04-30 19:36:37 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_multiply_add_add_nn_relu_5] Trial #20: GFLOPs: 13.1310. Time: 161.2696 us. Best GFLOPs: 135.0424
2024-04-30 19:36:37 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_multiply_add_add_nn_relu_5] Trial #21: GFLOPs: 62.9108. Time: 33.6609 us. Best GFLOPs: 135.0424
2024-04-30 19:36:37 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_multiply_add_add_nn_relu_5] Trial #22: GFLOPs: 25.3322. Time: 83.5945 us. Best GFLOPs: 135.0424
2024-04-30 19:36:37 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_multiply_add_add_nn_relu_5] Trial #23: GFLOPs: 23.7726. Time: 89.0789 us. Best GFLOPs: 135.0424
2024-04-30 19:36:37 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_multiply_add_add_nn_relu_5] Trial #24: GFLOPs: 10.7463. Time: 197.0572 us. Best GFLOPs: 135.0424
2024-04-30 19:36:37 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_multiply_add_add_nn_relu_5] Trial #25: GFLOPs: 26.8727. Time: 78.8023 us. Best GFLOPs: 135.0424
2024-04-30 19:36:37 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_multiply_add_add_nn_relu_5] Trial #26: GFLOPs: 26.4978. Time: 79.9171 us. Best GFLOPs: 135.0424
2024-04-30 19:36:37 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_multiply_add_add_nn_relu_5] Trial #27: GFLOPs: 68.7116. Time: 30.8192 us. Best GFLOPs: 135.0424
2024-04-30 19:36:37 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_multiply_add_add_nn_relu_5] Trial #28: GFLOPs: 5.7721. Time: 366.8754 us. Best GFLOPs: 135.0424
2024-04-30 19:36:37 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_multiply_add_add_nn_relu_5] Trial #29: GFLOPs: 40.4053. Time: 52.4098 us. Best GFLOPs: 135.0424
2024-04-30 19:36:37 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_multiply_add_add_nn_relu_5] Trial #30: GFLOPs: 23.0594. Time: 91.8336 us. Best GFLOPs: 135.0424
2024-04-30 19:36:37 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_multiply_add_add_nn_relu_5] Trial #31: GFLOPs: 42.0258. Time: 50.3888 us. Best GFLOPs: 135.0424
2024-04-30 19:36:37 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_multiply_add_add_nn_relu_5] Trial #32: GFLOPs: 25.8130. Time: 82.0373 us. Best GFLOPs: 135.0424
2024-04-30 19:36:37 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_multiply_add_add_nn_relu_5] Trial #33: GFLOPs: 15.8790. Time: 133.3607 us. Best GFLOPs: 135.0424
2024-04-30 19:36:37 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_multiply_add_add_nn_relu_5] Trial #34: GFLOPs: 103.3795. Time: 20.4841 us. Best GFLOPs: 135.0424
2024-04-30 19:36:37 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_multiply_add_add_nn_relu_5] Trial #35: GFLOPs: 18.2355. Time: 116.1269 us. Best GFLOPs: 135.0424
2024-04-30 19:36:37 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_multiply_add_add_nn_relu_5] Trial #36: GFLOPs: 11.6717. Time: 181.4338 us. Best GFLOPs: 135.0424
2024-04-30 19:36:37 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_multiply_add_add_nn_relu_5] Trial #37: GFLOPs: 10.0251. Time: 211.2324 us. Best GFLOPs: 135.0424
2024-04-30 19:36:37 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_multiply_add_add_nn_relu_5] Trial #38: GFLOPs: 26.8005. Time: 79.0145 us. Best GFLOPs: 135.0424
2024-04-30 19:36:37 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_multiply_add_add_nn_relu_5] Trial #39: GFLOPs: 80.5696. Time: 26.2833 us. Best GFLOPs: 135.0424
2024-04-30 19:36:37 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_multiply_add_add_nn_relu_5] Trial #40: GFLOPs: 37.4760. Time: 56.5064 us. Best GFLOPs: 135.0424
2024-04-30 19:36:37 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_multiply_add_add_nn_relu_5] Trial #41: GFLOPs: 64.0142. Time: 33.0807 us. Best GFLOPs: 135.0424
2024-04-30 19:36:37 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_multiply_add_add_nn_relu_5] Trial #42: GFLOPs: 59.7467. Time: 35.4435 us. Best GFLOPs: 135.0424
2024-04-30 19:36:37 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_multiply_add_add_nn_relu_5] Trial #43: GFLOPs: 26.1372. Time: 81.0200 us. Best GFLOPs: 135.0424
2024-04-30 19:36:37 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_multiply_add_add_nn_relu_5] Trial #44: GFLOPs: 17.4762. Time: 121.1721 us. Best GFLOPs: 135.0424
2024-04-30 19:36:37 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_multiply_add_add_nn_relu_5] Trial #45: GFLOPs: 12.2588. Time: 172.7440 us. Best GFLOPs: 135.0424
2024-04-30 19:36:37 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_multiply_add_add_nn_relu_5] Trial #46: GFLOPs: 22.1830. Time: 95.4621 us. Best GFLOPs: 135.0424
2024-04-30 19:36:37 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_multiply_add_add_nn_relu_5] Trial #47: GFLOPs: 76.1628. Time: 27.8040 us. Best GFLOPs: 135.0424
2024-04-30 19:36:37 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_multiply_add_add_nn_relu_5] Trial #48: GFLOPs: 34.7104. Time: 61.0085 us. Best GFLOPs: 135.0424
2024-04-30 19:36:37 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_multiply_add_add_nn_relu_5] Trial #49: GFLOPs: 68.7170. Time: 30.8167 us. Best GFLOPs: 135.0424
2024-04-30 19:36:37 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_multiply_add_add_nn_relu_5] Trial #50: GFLOPs: 25.9813. Time: 81.5062 us. Best GFLOPs: 135.0424
2024-04-30 19:36:37 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_multiply_add_add_nn_relu_5] Trial #51: GFLOPs: 10.0409. Time: 210.9009 us. Best GFLOPs: 135.0424
2024-04-30 19:36:37 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_multiply_add_add_nn_relu_5] Trial #52: GFLOPs: 48.4017. Time: 43.7511 us. Best GFLOPs: 135.0424
2024-04-30 19:36:37 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_multiply_add_add_nn_relu_5] Trial #53: GFLOPs: 50.9807. Time: 41.5379 us. Best GFLOPs: 135.0424
2024-04-30 19:36:37 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_multiply_add_add_nn_relu_5] Trial #54: GFLOPs: 33.5506. Time: 63.1176 us. Best GFLOPs: 135.0424
2024-04-30 19:36:37 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_multiply_add_add_nn_relu_5] Trial #55: GFLOPs: 100.0224. Time: 21.1716 us. Best GFLOPs: 135.0424
2024-04-30 19:36:37 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_multiply_add_add_nn_relu_5] Trial #56: GFLOPs: 46.9004. Time: 45.1517 us. Best GFLOPs: 135.0424
2024-04-30 19:36:37 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_multiply_add_add_nn_relu_5] Trial #57: GFLOPs: 27.0723. Time: 78.2213 us. Best GFLOPs: 135.0424
2024-04-30 19:36:37 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_multiply_add_add_nn_relu_5] Trial #58: GFLOPs: 70.7377. Time: 29.9364 us. Best GFLOPs: 135.0424
2024-04-30 19:36:37 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_multiply_add_add_nn_relu_5] Trial #59: GFLOPs: 13.0017. Time: 162.8739 us. Best GFLOPs: 135.0424
2024-04-30 19:36:37 [INFO] [task_scheduler.cc:121] [Task #23: fused_nn_conv2d_add_multiply_add_add_nn_relu_5] Trial #60: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(2), T.int64(2), T.int64(256)), "float32"), p1: T.Buffer((T.int64(1), T.int64(1), T.int64(256), T.int64(1024)), "float32"), p2: T.Buffer((T.int64(1), T.int64(1), T.int64(1), T.int64(1024)), "float32"), p3: T.Buffer((T.int64(1), T.int64(1), T.int64(1), T.int64(1024)), "float32"), p4: T.Buffer((T.int64(1), T.int64(1), T.int64(1), T.int64(1024)), "float32"), p5: T.Buffer((T.int64(1), T.int64(2), T.int64(2), T.int64(1024)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(2), T.int64(2), T.int64(1024)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_nhwc = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(2), T.int64(1024)))
        p1_global = T.alloc_buffer((T.int64(4), T.int64(32), T.int64(256), T.int64(8)))
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(256), T.int64(1024)):
            with T.block("p1_global"):
                v0, v1, v2, v3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(p1[v0, v1, v2, v3])
                T.writes(p1_global[v3 // T.int64(256), v2 // T.int64(8), v3 % T.int64(256), v2 % T.int64(8)])
                T.block_attr({"meta_schedule.layout_rewrite_preproc": T.bool(True)})
                p1_global[v3 // T.int64(256), v2 // T.int64(8), v3 % T.int64(256), v2 % T.int64(8)] = p1[v0, v1, v2, v3]
        for nn_0_yy_0_xx_0_ff_0_fused in T.parallel(T.int64(4), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for nn_1, yy_1, xx_1, ff_1 in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(1)):
                for nn_2_init, yy_2_init, xx_2_init, ff_2_init, nn_3_init, yy_3_init, xx_3_init, ff_3_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(256), T.int64(1), T.int64(1), T.int64(2), T.int64(1)):
                    with T.block("conv2d_nhwc_init"):
                        v_nn = T.axis.spatial(T.int64(1), nn_1 + nn_2_init + nn_3_init)
                        v_yy = T.axis.spatial(T.int64(2), yy_1 + yy_2_init + yy_3_init)
                        v_xx = T.axis.spatial(T.int64(2), xx_1 * T.int64(2) + xx_2_init * T.int64(2) + xx_3_init)
                        v_ff = T.axis.spatial(T.int64(1024), nn_0_yy_0_xx_0_ff_0_fused * T.int64(256) + ff_1 * T.int64(256) + ff_2_init + ff_3_init)
                        T.reads()
                        T.writes(conv2d_nhwc[v_nn, v_yy, v_xx, v_ff])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_nhwc[v_nn, v_yy, v_xx, v_ff] = T.float32(0)
                for ry_0, rx_0, rc_0, nn_2, yy_2, xx_2, ff_2, ry_1, rx_1, rc_1, nn_3, yy_3, xx_3, ff_3 in T.grid(T.int64(1), T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(1), T.int64(256), T.int64(1), T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(2), T.int64(1)):
                    with T.block("conv2d_nhwc_update"):
                        v_nn = T.axis.spatial(T.int64(1), nn_1 + nn_2 + nn_3)
                        v_yy = T.axis.spatial(T.int64(2), yy_1 + yy_2 + yy_3)
                        v_xx = T.axis.spatial(T.int64(2), xx_1 * T.int64(2) + xx_2 * T.int64(2) + xx_3)
                        v_ff = T.axis.spatial(T.int64(1024), nn_0_yy_0_xx_0_ff_0_fused * T.int64(256) + ff_1 * T.int64(256) + ff_2 + ff_3)
                        v_ry = T.axis.reduce(T.int64(1), ry_0 + ry_1)
                        v_rx = T.axis.reduce(T.int64(1), rx_0 + rx_1)
                        v_rc = T.axis.reduce(T.int64(256), rc_0 * T.int64(8) + rc_1)
                        T.reads(conv2d_nhwc[v_nn, v_yy, v_xx, v_ff], p0[v_nn, v_yy + v_ry, v_xx + v_rx, v_rc], p1_global[v_ff // T.int64(256), v_rc // T.int64(8), v_ff % T.int64(256), v_rc % T.int64(8)])
                        T.writes(conv2d_nhwc[v_nn, v_yy, v_xx, v_ff])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_nhwc[v_nn, v_yy, v_xx, v_ff] = conv2d_nhwc[v_nn, v_yy, v_xx, v_ff] + p0[v_nn, v_yy + v_ry, v_xx + v_rx, v_rc] * p1_global[v_ff // T.int64(256), v_rc // T.int64(8), v_ff % T.int64(256), v_rc % T.int64(8)]
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(2), T.int64(256)):
                with T.block("T_relu"):
                    v_ax0, v_ax1, v_ax2 = T.axis.remap("SSS", [ax0, ax1, ax2])
                    v_ax3 = T.axis.spatial(T.int64(1024), nn_0_yy_0_xx_0_ff_0_fused * T.int64(256) + ax3)
                    T.reads(p5[v_ax0, v_ax1, v_ax2, v_ax3], conv2d_nhwc[v_ax0, v_ax1, v_ax2, v_ax3], p2[v_ax0, T.int64(0), T.int64(0), v_ax3], p3[v_ax0, T.int64(0), T.int64(0), v_ax3], p4[v_ax0, T.int64(0), T.int64(0), v_ax3])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(p5[v_ax0, v_ax1, v_ax2, v_ax3] + ((conv2d_nhwc[v_ax0, v_ax1, v_ax2, v_ax3] + p2[v_ax0, T.int64(0), T.int64(0), v_ax3]) * p3[v_ax0, T.int64(0), T.int64(0), v_ax3] + p4[v_ax0, T.int64(0), T.int64(0), v_ax3]), T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nhwc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_multiply", func_name="main")
b4 = sch.get_block(name="T_add_1", func_name="main")
b5 = sch.get_block(name="T_add_2", func_name="main")
b6 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b5)
sch.compute_inline(block=b4)
sch.compute_inline(block=b3)
sch.compute_inline(block=b2)
sch.compute_inline(block=b0)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l7, l8, l9, l10, l11, l12, l13 = sch.get_loops(block=b1)
v14, v15, v16, v17 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l18, l19, l20, l21 = sch.split(loop=l7, factors=[v14, v15, v16, v17], preserve_unit_iters=True, disable_predication=False)
v22, v23, v24, v25 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 2, 1, 1])
l26, l27, l28, l29 = sch.split(loop=l8, factors=[v22, v23, v24, v25], preserve_unit_iters=True, disable_predication=False)
v30, v31, v32, v33 = sch.sample_perfect_tile(loop=l9, n=4, max_innermost_factor=64, decision=[1, 1, 1, 2])
l34, l35, l36, l37 = sch.split(loop=l9, factors=[v30, v31, v32, v33], preserve_unit_iters=True, disable_predication=False)
v38, v39, v40, v41 = sch.sample_perfect_tile(loop=l10, n=4, max_innermost_factor=64, decision=[4, 1, 256, 1])
l42, l43, l44, l45 = sch.split(loop=l10, factors=[v38, v39, v40, v41], preserve_unit_iters=True, disable_predication=False)
v46, v47 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 1])
l48, l49 = sch.split(loop=l11, factors=[v46, v47], preserve_unit_iters=True, disable_predication=False)
v50, v51 = sch.sample_perfect_tile(loop=l12, n=2, max_innermost_factor=64, decision=[1, 1])
l52, l53 = sch.split(loop=l12, factors=[v50, v51], preserve_unit_iters=True, disable_predication=False)
v54, v55 = sch.sample_perfect_tile(loop=l13, n=2, max_innermost_factor=64, decision=[32, 8])
l56, l57 = sch.split(loop=l13, factors=[v54, v55], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l18, l26, l34, l42, l19, l27, l35, l43, l48, l52, l56, l20, l28, l36, l44, l49, l53, l57, l21, l29, l37, l45)
b58, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b58, loop=l42, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.parallel", ann_val=96)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.vectorize", ann_val=64)
v59 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.unroll_explicit", ann_val=v59)
sch.enter_postproc()
b60 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b60, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b60, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b60, ann_key="meta_schedule.unroll_explicit")
b61, b62 = sch.get_child_blocks(b60)
l63, l64, l65, l66, l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b61)
l85 = sch.fuse(l63, l64, l65, l66, preserve_unit_iters=True)
sch.parallel(loop=l85)
sch.annotate(block_or_loop=l85, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l85, ann_key="pragma_unroll_explicit", ann_val=1)
l86, l87, l88, l89, l90 = sch.get_loops(block=b62)
b91 = sch.get_block(name="conv2d_nhwc", func_name="main")
l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103, l104, l105, l106, l107, l108, l109, l110 = sch.get_loops(block=b91)
b111 = sch.decompose_reduction(block=b91, loop=l97)
b112 = sch.get_block(name="conv2d_nhwc_update", func_name="main")
b113 = sch.cache_read(block=b112, read_buffer_index=2, storage_scope="global")
sch.annotate(block_or_loop=b113, ann_key="meta_schedule.layout_rewrite_preproc", ann_val=1)
sch.transform_layout(block=b112, buffer=("read", 2), index_map=tvm.tir.IndexMap.from_func(lambda i0, i1, i2, i3: (T.Cast("int64", i3) // T.int64(256), T.Cast("int64", i2) // T.int64(8), T.Cast("int64", i3) % T.int64(256), T.Cast("int64", i2) % T.int64(8),), inverse_index_map=lambda i0, i1, i2, i3: (T.int64(0), T.int64(0), T.Cast("int64", i1) * T.int64(8) + T.Cast("int64", i3), T.Cast("int64", i0) * T.int64(256) + T.Cast("int64", i2),)), pad_value=None, assume_injective_transform=False)
2024-04-30 19:36:37 [INFO] [task_scheduler.cc:121] [Task #23: fused_nn_conv2d_add_multiply_add_add_nn_relu_5] Trial #61: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(2), T.int64(2), T.int64(256)), "float32"), p1: T.Buffer((T.int64(1), T.int64(1), T.int64(256), T.int64(1024)), "float32"), p2: T.Buffer((T.int64(1), T.int64(1), T.int64(1), T.int64(1024)), "float32"), p3: T.Buffer((T.int64(1), T.int64(1), T.int64(1), T.int64(1024)), "float32"), p4: T.Buffer((T.int64(1), T.int64(1), T.int64(1), T.int64(1024)), "float32"), p5: T.Buffer((T.int64(1), T.int64(2), T.int64(2), T.int64(1024)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(2), T.int64(2), T.int64(1024)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_nhwc = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(2), T.int64(1024)))
        p1_global = T.alloc_buffer((T.int64(2), T.int64(8), T.int64(4), T.int64(64), T.int64(64)))
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(256), T.int64(1024)):
            with T.block("p1_global"):
                v0, v1, v2, v3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(p1[v0, v1, v2, v3])
                T.writes(p1_global[v3 // T.int64(512), v3 % T.int64(512) // T.int64(64), v2 // T.int64(64), v3 % T.int64(64), v2 % T.int64(64)])
                T.block_attr({"meta_schedule.layout_rewrite_preproc": T.bool(True)})
                p1_global[v3 // T.int64(512), v3 % T.int64(512) // T.int64(64), v2 // T.int64(64), v3 % T.int64(64), v2 % T.int64(64)] = p1[v0, v1, v2, v3]
        for nn_0_yy_0_xx_0_ff_0_fused in T.parallel(T.int64(2), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for nn_1, yy_1, xx_1, ff_1 in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(8)):
                for nn_2_init, yy_2_init, xx_2_init, ff_2_init, nn_3_init, yy_3_init, xx_3_init, ff_3_init in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(64), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                    with T.block("conv2d_nhwc_init"):
                        v_nn = T.axis.spatial(T.int64(1), nn_1 + nn_2_init + nn_3_init)
                        v_yy = T.axis.spatial(T.int64(2), yy_1 + yy_2_init + yy_3_init)
                        v_xx = T.axis.spatial(T.int64(2), xx_1 * T.int64(2) + xx_2_init + xx_3_init)
                        v_ff = T.axis.spatial(T.int64(1024), nn_0_yy_0_xx_0_ff_0_fused * T.int64(512) + ff_1 * T.int64(64) + ff_2_init + ff_3_init)
                        T.reads()
                        T.writes(conv2d_nhwc[v_nn, v_yy, v_xx, v_ff])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_nhwc[v_nn, v_yy, v_xx, v_ff] = T.float32(0)
                for ry_0, rx_0, rc_0, nn_2, yy_2, xx_2, ff_2, ry_1, rx_1, rc_1, nn_3, yy_3, xx_3, ff_3 in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(2), T.int64(64), T.int64(1), T.int64(1), T.int64(64), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                    with T.block("conv2d_nhwc_update"):
                        v_nn = T.axis.spatial(T.int64(1), nn_1 + nn_2 + nn_3)
                        v_yy = T.axis.spatial(T.int64(2), yy_1 + yy_2 + yy_3)
                        v_xx = T.axis.spatial(T.int64(2), xx_1 * T.int64(2) + xx_2 + xx_3)
                        v_ff = T.axis.spatial(T.int64(1024), nn_0_yy_0_xx_0_ff_0_fused * T.int64(512) + ff_1 * T.int64(64) + ff_2 + ff_3)
                        v_ry = T.axis.reduce(T.int64(1), ry_0 + ry_1)
                        v_rx = T.axis.reduce(T.int64(1), rx_0 + rx_1)
                        v_rc = T.axis.reduce(T.int64(256), rc_0 * T.int64(64) + rc_1)
                        T.reads(conv2d_nhwc[v_nn, v_yy, v_xx, v_ff], p0[v_nn, v_yy + v_ry, v_xx + v_rx, v_rc], p1_global[v_ff // T.int64(512), v_ff % T.int64(512) // T.int64(64), v_rc // T.int64(64), v_ff % T.int64(64), v_rc % T.int64(64)])
                        T.writes(conv2d_nhwc[v_nn, v_yy, v_xx, v_ff])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_nhwc[v_nn, v_yy, v_xx, v_ff] = conv2d_nhwc[v_nn, v_yy, v_xx, v_ff] + p0[v_nn, v_yy + v_ry, v_xx + v_rx, v_rc] * p1_global[v_ff // T.int64(512), v_ff % T.int64(512) // T.int64(64), v_rc // T.int64(64), v_ff % T.int64(64), v_rc % T.int64(64)]
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(2), T.int64(512)):
                with T.block("T_relu"):
                    v_ax0, v_ax1, v_ax2 = T.axis.remap("SSS", [ax0, ax1, ax2])
                    v_ax3 = T.axis.spatial(T.int64(1024), nn_0_yy_0_xx_0_ff_0_fused * T.int64(512) + ax3)
                    T.reads(p5[v_ax0, v_ax1, v_ax2, v_ax3], conv2d_nhwc[v_ax0, v_ax1, v_ax2, v_ax3], p2[v_ax0, T.int64(0), T.int64(0), v_ax3], p3[v_ax0, T.int64(0), T.int64(0), v_ax3], p4[v_ax0, T.int64(0), T.int64(0), v_ax3])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(p5[v_ax0, v_ax1, v_ax2, v_ax3] + ((conv2d_nhwc[v_ax0, v_ax1, v_ax2, v_ax3] + p2[v_ax0, T.int64(0), T.int64(0), v_ax3]) * p3[v_ax0, T.int64(0), T.int64(0), v_ax3] + p4[v_ax0, T.int64(0), T.int64(0), v_ax3]), T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nhwc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_multiply", func_name="main")
b4 = sch.get_block(name="T_add_1", func_name="main")
b5 = sch.get_block(name="T_add_2", func_name="main")
b6 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b5)
sch.compute_inline(block=b4)
sch.compute_inline(block=b3)
sch.compute_inline(block=b2)
sch.compute_inline(block=b0)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l7, l8, l9, l10, l11, l12, l13 = sch.get_loops(block=b1)
v14, v15, v16, v17 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l18, l19, l20, l21 = sch.split(loop=l7, factors=[v14, v15, v16, v17], preserve_unit_iters=True, disable_predication=False)
v22, v23, v24, v25 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 2, 1, 1])
l26, l27, l28, l29 = sch.split(loop=l8, factors=[v22, v23, v24, v25], preserve_unit_iters=True, disable_predication=False)
v30, v31, v32, v33 = sch.sample_perfect_tile(loop=l9, n=4, max_innermost_factor=64, decision=[1, 1, 2, 1])
l34, l35, l36, l37 = sch.split(loop=l9, factors=[v30, v31, v32, v33], preserve_unit_iters=True, disable_predication=False)
v38, v39, v40, v41 = sch.sample_perfect_tile(loop=l10, n=4, max_innermost_factor=64, decision=[2, 8, 64, 1])
l42, l43, l44, l45 = sch.split(loop=l10, factors=[v38, v39, v40, v41], preserve_unit_iters=True, disable_predication=False)
v46, v47 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 1])
l48, l49 = sch.split(loop=l11, factors=[v46, v47], preserve_unit_iters=True, disable_predication=False)
v50, v51 = sch.sample_perfect_tile(loop=l12, n=2, max_innermost_factor=64, decision=[1, 1])
l52, l53 = sch.split(loop=l12, factors=[v50, v51], preserve_unit_iters=True, disable_predication=False)
v54, v55 = sch.sample_perfect_tile(loop=l13, n=2, max_innermost_factor=64, decision=[4, 64])
l56, l57 = sch.split(loop=l13, factors=[v54, v55], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l18, l26, l34, l42, l19, l27, l35, l43, l48, l52, l56, l20, l28, l36, l44, l49, l53, l57, l21, l29, l37, l45)
b58, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b58, loop=l42, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.parallel", ann_val=96)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.vectorize", ann_val=64)
v59 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.unroll_explicit", ann_val=v59)
sch.enter_postproc()
b60 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b60, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b60, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b60, ann_key="meta_schedule.unroll_explicit")
b61, b62 = sch.get_child_blocks(b60)
l63, l64, l65, l66, l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b61)
l85 = sch.fuse(l63, l64, l65, l66, preserve_unit_iters=True)
sch.parallel(loop=l85)
sch.annotate(block_or_loop=l85, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l85, ann_key="pragma_unroll_explicit", ann_val=1)
l86, l87, l88, l89, l90 = sch.get_loops(block=b62)
b91 = sch.get_block(name="conv2d_nhwc", func_name="main")
l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103, l104, l105, l106, l107, l108, l109, l110 = sch.get_loops(block=b91)
b111 = sch.decompose_reduction(block=b91, loop=l97)
b112 = sch.get_block(name="conv2d_nhwc_update", func_name="main")
b113 = sch.cache_read(block=b112, read_buffer_index=2, storage_scope="global")
sch.annotate(block_or_loop=b113, ann_key="meta_schedule.layout_rewrite_preproc", ann_val=1)
sch.transform_layout(block=b112, buffer=("read", 2), index_map=tvm.tir.IndexMap.from_func(lambda i0, i1, i2, i3: (T.Cast("int64", i3) // T.int64(512), T.Cast("int64", i3) % T.int64(512) // T.int64(64), T.Cast("int64", i2) // T.int64(64), T.Cast("int64", i3) % T.int64(64), T.Cast("int64", i2) % T.int64(64),), inverse_index_map=lambda i0, i1, i2, i3, i4: (T.int64(0), T.int64(0), T.Cast("int64", i2) * T.int64(64) + T.Cast("int64", i4), T.Cast("int64", i0) * T.int64(512) + T.Cast("int64", i1) * T.int64(64) + T.Cast("int64", i3),)), pad_value=None, assume_injective_transform=False)
2024-04-30 19:36:37 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_multiply_add_add_nn_relu_5] Trial #62: GFLOPs: 36.9008. Time: 57.3872 us. Best GFLOPs: 135.0424
2024-04-30 19:36:37 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_multiply_add_add_nn_relu_5] Trial #63: GFLOPs: 58.0844. Time: 36.4579 us. Best GFLOPs: 135.0424
2024-04-30 19:36:37 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_multiply_add_add_nn_relu_5] Trial #64: GFLOPs: 15.6039. Time: 135.7118 us. Best GFLOPs: 135.0424
2024-04-30 20:00:49 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-30 20:00:50 [INFO] [evolutionary_search.cc:715] Picked top 61 candidate(s) from database
2024-04-30 20:00:51 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x86e3708)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xe822308)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x2156fb38)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x21804158)]: 0 failure(s)
2024-04-30 20:00:51 [INFO] [evolutionary_search.cc:723] Sampled 451 candidate(s)
2024-04-30 20:00:55 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x86e3708)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xe822308)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x2156fb38)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x21804158)]: 0 failure(s)
2024-04-30 20:00:58 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x86e3708)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xe822308)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x2156fb38)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x21804158)]: 0 failure(s)
2024-04-30 20:01:02 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x86e3708)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xe822308)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x2156fb38)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x21804158)]: 0 failure(s)
2024-04-30 20:01:06 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x86e3708)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xe822308)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x2156fb38)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x21804158)]: 0 failure(s)
2024-04-30 20:01:09 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.0233  0.9977  0.9880  0.9868  0.9868  0.9868  0.9813  0.9743  0.9735  0.9705  0.9705  0.9698  0.9698  0.9600  0.9600  0.9600
[17 : 32]:	0.9491  0.9491  0.9400  0.9394  0.9361  0.9360  0.9200  0.9191  0.9136  0.9122  0.9003  0.8969  0.8957  0.8956  0.8826  0.8800
[33 : 48]:	0.8728  0.8700  0.8679  0.8645  0.8641  0.8577  0.8541  0.8541  0.8531  0.8531  0.8528  0.8528  0.8528  0.8528  0.8528  0.8472
[49 : 64]:	0.8472  0.8463  0.8444  0.8444  0.8444  0.8408  0.8371  0.8357  0.8347  0.8340  0.8340  0.8340  0.8333  0.8305  0.8297  0.8286
2024-04-30 20:01:09 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-30 20:01:09 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-30 20:01:42 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_multiply_add_add_nn_relu_5] Trial #65: GFLOPs: 75.0746. Time: 28.2070 us. Best GFLOPs: 135.0424
2024-04-30 20:01:42 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_multiply_add_add_nn_relu_5] Trial #66: GFLOPs: 81.0806. Time: 26.1176 us. Best GFLOPs: 135.0424
2024-04-30 20:01:42 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_multiply_add_add_nn_relu_5] Trial #67: GFLOPs: 93.1094. Time: 22.7435 us. Best GFLOPs: 135.0424
2024-04-30 20:01:42 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_multiply_add_add_nn_relu_5] Trial #68: GFLOPs: 86.8796. Time: 24.3743 us. Best GFLOPs: 135.0424
2024-04-30 20:01:42 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_multiply_add_add_nn_relu_5] Trial #69: GFLOPs: 95.5781. Time: 22.1560 us. Best GFLOPs: 135.0424
2024-04-30 20:01:42 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_multiply_add_add_nn_relu_5] Trial #70: GFLOPs: 94.4099. Time: 22.4302 us. Best GFLOPs: 135.0424
2024-04-30 20:01:42 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_multiply_add_add_nn_relu_5] Trial #71: GFLOPs: 87.8187. Time: 24.1137 us. Best GFLOPs: 135.0424
2024-04-30 20:01:42 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_multiply_add_add_nn_relu_5] Trial #72: GFLOPs: 93.8157. Time: 22.5723 us. Best GFLOPs: 135.0424
2024-04-30 20:01:42 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_multiply_add_add_nn_relu_5] Trial #73: GFLOPs: 64.7801. Time: 32.6895 us. Best GFLOPs: 135.0424
2024-04-30 20:01:42 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_multiply_add_add_nn_relu_5] Trial #74: GFLOPs: 61.9081. Time: 34.2061 us. Best GFLOPs: 135.0424
2024-04-30 20:01:42 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_multiply_add_add_nn_relu_5] Trial #75: GFLOPs: 66.0425. Time: 32.0647 us. Best GFLOPs: 135.0424
2024-04-30 20:01:42 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_multiply_add_add_nn_relu_5] Trial #76: GFLOPs: 65.0008. Time: 32.5785 us. Best GFLOPs: 135.0424
2024-04-30 20:01:42 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_multiply_add_add_nn_relu_5] Trial #77: GFLOPs: 71.4772. Time: 29.6267 us. Best GFLOPs: 135.0424
2024-04-30 20:01:42 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_multiply_add_add_nn_relu_5] Trial #78: GFLOPs: 90.6241. Time: 23.3672 us. Best GFLOPs: 135.0424
2024-04-30 20:01:42 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_multiply_add_add_nn_relu_5] Trial #79: GFLOPs: 88.6360. Time: 23.8913 us. Best GFLOPs: 135.0424
2024-04-30 20:01:42 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_multiply_add_add_nn_relu_5] Trial #80: GFLOPs: 88.2382. Time: 23.9990 us. Best GFLOPs: 135.0424
2024-04-30 20:01:42 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_multiply_add_add_nn_relu_5] Trial #81: GFLOPs: 95.3302. Time: 22.2136 us. Best GFLOPs: 135.0424
2024-04-30 20:01:42 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_multiply_add_add_nn_relu_5] Trial #82: GFLOPs: 95.6574. Time: 22.1377 us. Best GFLOPs: 135.0424
2024-04-30 20:01:42 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_multiply_add_add_nn_relu_5] Trial #83: GFLOPs: 79.4163. Time: 26.6649 us. Best GFLOPs: 135.0424
2024-04-30 20:01:42 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_multiply_add_add_nn_relu_5] Trial #84: GFLOPs: 83.2122. Time: 25.4486 us. Best GFLOPs: 135.0424
2024-04-30 20:01:42 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_multiply_add_add_nn_relu_5] Trial #85: GFLOPs: 91.7390. Time: 23.0832 us. Best GFLOPs: 135.0424
2024-04-30 20:01:42 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_multiply_add_add_nn_relu_5] Trial #86: GFLOPs: 76.4071. Time: 27.7151 us. Best GFLOPs: 135.0424
2024-04-30 20:01:42 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_multiply_add_add_nn_relu_5] Trial #87: GFLOPs: 93.0104. Time: 22.7677 us. Best GFLOPs: 135.0424
2024-04-30 20:01:42 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_multiply_add_add_nn_relu_5] Trial #88: GFLOPs: 90.8442. Time: 23.3106 us. Best GFLOPs: 135.0424
2024-04-30 20:01:42 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_multiply_add_add_nn_relu_5] Trial #89: GFLOPs: 90.1450. Time: 23.4914 us. Best GFLOPs: 135.0424
2024-04-30 20:01:42 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_multiply_add_add_nn_relu_5] Trial #90: GFLOPs: 95.7225. Time: 22.1226 us. Best GFLOPs: 135.0424
2024-04-30 20:01:42 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_multiply_add_add_nn_relu_5] Trial #91: GFLOPs: 61.5659. Time: 34.3962 us. Best GFLOPs: 135.0424
2024-04-30 20:01:42 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_multiply_add_add_nn_relu_5] Trial #92: GFLOPs: 93.5495. Time: 22.6365 us. Best GFLOPs: 135.0424
2024-04-30 20:01:42 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_multiply_add_add_nn_relu_5] Trial #93: GFLOPs: 67.3549. Time: 31.4399 us. Best GFLOPs: 135.0424
2024-04-30 20:01:42 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_multiply_add_add_nn_relu_5] Trial #94: GFLOPs: 55.4292. Time: 38.2043 us. Best GFLOPs: 135.0424
2024-04-30 20:01:42 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_multiply_add_add_nn_relu_5] Trial #95: GFLOPs: 81.1040. Time: 26.1101 us. Best GFLOPs: 135.0424
2024-04-30 20:01:42 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_multiply_add_add_nn_relu_5] Trial #96: GFLOPs: 74.6398. Time: 28.3713 us. Best GFLOPs: 135.0424
2024-04-30 20:01:42 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_multiply_add_add_nn_relu_5] Trial #97: GFLOPs: 93.0970. Time: 22.7465 us. Best GFLOPs: 135.0424
2024-04-30 20:01:42 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_multiply_add_add_nn_relu_5] Trial #98: GFLOPs: 96.9962. Time: 21.8321 us. Best GFLOPs: 135.0424
2024-04-30 20:01:42 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_multiply_add_add_nn_relu_5] Trial #99: GFLOPs: 94.1955. Time: 22.4813 us. Best GFLOPs: 135.0424
2024-04-30 20:01:42 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_multiply_add_add_nn_relu_5] Trial #100: GFLOPs: 80.4587. Time: 26.3195 us. Best GFLOPs: 135.0424
2024-04-30 20:01:42 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_multiply_add_add_nn_relu_5] Trial #101: GFLOPs: 79.5597. Time: 26.6169 us. Best GFLOPs: 135.0424
2024-04-30 20:01:42 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_multiply_add_add_nn_relu_5] Trial #102: GFLOPs: 60.3348. Time: 35.0980 us. Best GFLOPs: 135.0424
2024-04-30 20:01:42 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_multiply_add_add_nn_relu_5] Trial #103: GFLOPs: 63.2351. Time: 33.4883 us. Best GFLOPs: 135.0424
2024-04-30 20:01:42 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_multiply_add_add_nn_relu_5] Trial #104: GFLOPs: 61.8803. Time: 34.2214 us. Best GFLOPs: 135.0424
2024-04-30 20:01:42 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_multiply_add_add_nn_relu_5] Trial #105: GFLOPs: 65.0586. Time: 32.5496 us. Best GFLOPs: 135.0424
2024-04-30 20:01:42 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_multiply_add_add_nn_relu_5] Trial #106: GFLOPs: 62.9184. Time: 33.6568 us. Best GFLOPs: 135.0424
2024-04-30 20:01:42 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_multiply_add_add_nn_relu_5] Trial #107: GFLOPs: 65.0994. Time: 32.5292 us. Best GFLOPs: 135.0424
2024-04-30 20:01:42 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_multiply_add_add_nn_relu_5] Trial #108: GFLOPs: 66.2153. Time: 31.9810 us. Best GFLOPs: 135.0424
2024-04-30 20:01:42 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_multiply_add_add_nn_relu_5] Trial #109: GFLOPs: 82.5780. Time: 25.6440 us. Best GFLOPs: 135.0424
2024-04-30 20:01:42 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_multiply_add_add_nn_relu_5] Trial #110: GFLOPs: 60.7733. Time: 34.8448 us. Best GFLOPs: 135.0424
2024-04-30 20:01:42 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_multiply_add_add_nn_relu_5] Trial #111: GFLOPs: 67.7706. Time: 31.2471 us. Best GFLOPs: 135.0424
2024-04-30 20:01:42 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_multiply_add_add_nn_relu_5] Trial #112: GFLOPs: 75.9930. Time: 27.8661 us. Best GFLOPs: 135.0424
2024-04-30 20:01:42 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_multiply_add_add_nn_relu_5] Trial #113: GFLOPs: 76.3947. Time: 27.7196 us. Best GFLOPs: 135.0424
2024-04-30 20:01:42 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_multiply_add_add_nn_relu_5] Trial #114: GFLOPs: 71.4906. Time: 29.6211 us. Best GFLOPs: 135.0424
2024-04-30 20:01:42 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_multiply_add_add_nn_relu_5] Trial #115: GFLOPs: 68.4986. Time: 30.9150 us. Best GFLOPs: 135.0424
2024-04-30 20:01:42 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_multiply_add_add_nn_relu_5] Trial #116: GFLOPs: 57.2355. Time: 36.9986 us. Best GFLOPs: 135.0424
2024-04-30 20:01:42 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_multiply_add_add_nn_relu_5] Trial #117: GFLOPs: 64.6567. Time: 32.7519 us. Best GFLOPs: 135.0424
2024-04-30 20:01:42 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_multiply_add_add_nn_relu_5] Trial #118: GFLOPs: 55.4775. Time: 38.1710 us. Best GFLOPs: 135.0424
2024-04-30 20:01:42 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_multiply_add_add_nn_relu_5] Trial #119: GFLOPs: 68.7368. Time: 30.8078 us. Best GFLOPs: 135.0424
2024-04-30 20:01:42 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_multiply_add_add_nn_relu_5] Trial #120: GFLOPs: 64.8931. Time: 32.6326 us. Best GFLOPs: 135.0424
2024-04-30 20:01:42 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_multiply_add_add_nn_relu_5] Trial #121: GFLOPs: 70.3901. Time: 30.0842 us. Best GFLOPs: 135.0424
2024-04-30 20:01:42 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_multiply_add_add_nn_relu_5] Trial #122: GFLOPs: 66.3916. Time: 31.8961 us. Best GFLOPs: 135.0424
2024-04-30 20:01:42 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_multiply_add_add_nn_relu_5] Trial #123: GFLOPs: 59.7452. Time: 35.4444 us. Best GFLOPs: 135.0424
2024-04-30 20:01:42 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_multiply_add_add_nn_relu_5] Trial #124: GFLOPs: 58.8830. Time: 35.9634 us. Best GFLOPs: 135.0424
2024-04-30 20:01:42 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_multiply_add_add_nn_relu_5] Trial #125: GFLOPs: 84.7417. Time: 24.9893 us. Best GFLOPs: 135.0424
2024-04-30 20:01:42 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_multiply_add_add_nn_relu_5] Trial #126: GFLOPs: 19.8092. Time: 106.9015 us. Best GFLOPs: 135.0424
2024-04-30 20:01:42 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_multiply_add_add_nn_relu_5] Trial #127: GFLOPs: 27.5247. Time: 76.9358 us. Best GFLOPs: 135.0424
2024-04-30 20:01:42 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_multiply_add_add_nn_relu_5] Trial #128: GFLOPs: 31.0524. Time: 68.1954 us. Best GFLOPs: 135.0424
2024-04-30 20:11:16 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-30 20:11:17 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-30 20:11:18 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x86e3708)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xe822308)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x2156fb38)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x21804158)]: 0 failure(s)
2024-04-30 20:11:18 [INFO] [evolutionary_search.cc:723] Sampled 410 candidate(s)
2024-04-30 20:11:20 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x86e3708)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xe822308)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x2156fb38)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x21804158)]: 0 failure(s)
2024-04-30 20:11:23 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x86e3708)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xe822308)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x2156fb38)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x21804158)]: 0 failure(s)
2024-04-30 20:11:26 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x86e3708)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xe822308)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x2156fb38)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x21804158)]: 0 failure(s)
2024-04-30 20:11:29 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x86e3708)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xe822308)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x2156fb38)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x21804158)]: 0 failure(s)
2024-04-30 20:11:31 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.8001  0.7861  0.7828  0.7673  0.7518  0.7513  0.7508  0.7482  0.7400  0.7353  0.7301  0.7294  0.7284  0.7242  0.7183  0.7160
[17 : 32]:	0.7160  0.7133  0.7118  0.7118  0.7101  0.7091  0.7091  0.7091  0.7080  0.7067  0.7052  0.7042  0.7040  0.7039  0.7039  0.7011
[33 : 48]:	0.7000  0.6989  0.6989  0.6972  0.6972  0.6967  0.6966  0.6933  0.6933  0.6926  0.6907  0.6904  0.6889  0.6889  0.6881  0.6881
[49 : 64]:	0.6881  0.6854  0.6841  0.6805  0.6786  0.6786  0.6777  0.6777  0.6761  0.6744  0.6741  0.6735  0.6730  0.6729  0.6695  0.6689
2024-04-30 20:11:31 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-30 20:11:31 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-30 20:11:48 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_multiply_add_add_nn_relu_5] Trial #129: GFLOPs: 68.8411. Time: 30.7612 us. Best GFLOPs: 135.0424
2024-04-30 20:11:48 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_multiply_add_add_nn_relu_5] Trial #130: GFLOPs: 144.9286. Time: 14.6116 us. Best GFLOPs: 144.9286
2024-04-30 20:11:48 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_multiply_add_add_nn_relu_5] Trial #131: GFLOPs: 139.6041. Time: 15.1688 us. Best GFLOPs: 144.9286
2024-04-30 20:11:48 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_multiply_add_add_nn_relu_5] Trial #132: GFLOPs: 104.8674. Time: 20.1934 us. Best GFLOPs: 144.9286
2024-04-30 20:11:48 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_multiply_add_add_nn_relu_5] Trial #133: GFLOPs: 108.0586. Time: 19.5971 us. Best GFLOPs: 144.9286
2024-04-30 20:11:48 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_multiply_add_add_nn_relu_5] Trial #134: GFLOPs: 109.5887. Time: 19.3235 us. Best GFLOPs: 144.9286
2024-04-30 20:11:48 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_multiply_add_add_nn_relu_5] Trial #135: GFLOPs: 45.0448. Time: 47.0116 us. Best GFLOPs: 144.9286
2024-04-30 20:11:48 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_multiply_add_add_nn_relu_5] Trial #136: GFLOPs: 133.4525. Time: 15.8681 us. Best GFLOPs: 144.9286
2024-04-30 20:11:48 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_multiply_add_add_nn_relu_5] Trial #137: GFLOPs: 107.4141. Time: 19.7147 us. Best GFLOPs: 144.9286
2024-04-30 20:11:48 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_multiply_add_add_nn_relu_5] Trial #138: GFLOPs: 113.0499. Time: 18.7318 us. Best GFLOPs: 144.9286
2024-04-30 20:11:48 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_multiply_add_add_nn_relu_5] Trial #139: GFLOPs: 104.4897. Time: 20.2664 us. Best GFLOPs: 144.9286
2024-04-30 20:11:48 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_multiply_add_add_nn_relu_5] Trial #140: GFLOPs: 106.4074. Time: 19.9012 us. Best GFLOPs: 144.9286
2024-04-30 20:11:48 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_multiply_add_add_nn_relu_5] Trial #141: GFLOPs: 99.0005. Time: 21.3901 us. Best GFLOPs: 144.9286
2024-04-30 20:11:48 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_multiply_add_add_nn_relu_5] Trial #142: GFLOPs: 151.4104. Time: 13.9860 us. Best GFLOPs: 151.4104
2024-04-30 20:11:48 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_multiply_add_add_nn_relu_5] Trial #143: GFLOPs: 112.2164. Time: 18.8710 us. Best GFLOPs: 151.4104
2024-04-30 20:11:48 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_multiply_add_add_nn_relu_5] Trial #144: GFLOPs: 104.8958. Time: 20.1880 us. Best GFLOPs: 151.4104
2024-04-30 20:11:48 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_multiply_add_add_nn_relu_5] Trial #145: GFLOPs: 113.5426. Time: 18.6506 us. Best GFLOPs: 151.4104
2024-04-30 20:11:48 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_multiply_add_add_nn_relu_5] Trial #146: GFLOPs: 114.4461. Time: 18.5033 us. Best GFLOPs: 151.4104
2024-04-30 20:11:48 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_multiply_add_add_nn_relu_5] Trial #147: GFLOPs: 154.2834. Time: 13.7256 us. Best GFLOPs: 154.2834
2024-04-30 20:11:48 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_multiply_add_add_nn_relu_5] Trial #148: GFLOPs: 136.8637. Time: 15.4726 us. Best GFLOPs: 154.2834
2024-04-30 20:11:48 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_multiply_add_add_nn_relu_5] Trial #149: GFLOPs: 135.5333. Time: 15.6244 us. Best GFLOPs: 154.2834
2024-04-30 20:11:48 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_multiply_add_add_nn_relu_5] Trial #150: GFLOPs: 147.1351. Time: 14.3924 us. Best GFLOPs: 154.2834
2024-04-30 20:11:48 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_multiply_add_add_nn_relu_5] Trial #151: GFLOPs: 141.9665. Time: 14.9164 us. Best GFLOPs: 154.2834
2024-04-30 20:11:48 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_multiply_add_add_nn_relu_5] Trial #152: GFLOPs: 143.8966. Time: 14.7163 us. Best GFLOPs: 154.2834
2024-04-30 20:11:48 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_multiply_add_add_nn_relu_5] Trial #153: GFLOPs: 100.1199. Time: 21.1510 us. Best GFLOPs: 154.2834
2024-04-30 20:11:48 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_multiply_add_add_nn_relu_5] Trial #154: GFLOPs: 103.1157. Time: 20.5365 us. Best GFLOPs: 154.2834
2024-04-30 20:11:48 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_multiply_add_add_nn_relu_5] Trial #155: GFLOPs: 85.8066. Time: 24.6791 us. Best GFLOPs: 154.2834
2024-04-30 20:11:48 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_multiply_add_add_nn_relu_5] Trial #156: GFLOPs: 136.0340. Time: 15.5669 us. Best GFLOPs: 154.2834
2024-04-30 20:11:48 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_multiply_add_add_nn_relu_5] Trial #157: GFLOPs: 94.5515. Time: 22.3966 us. Best GFLOPs: 154.2834
2024-04-30 20:11:48 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_multiply_add_add_nn_relu_5] Trial #158: GFLOPs: 89.9020. Time: 23.5549 us. Best GFLOPs: 154.2834
2024-04-30 20:11:48 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_multiply_add_add_nn_relu_5] Trial #159: GFLOPs: 114.9829. Time: 18.4169 us. Best GFLOPs: 154.2834
2024-04-30 20:11:48 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_multiply_add_add_nn_relu_5] Trial #160: GFLOPs: 83.5198. Time: 25.3548 us. Best GFLOPs: 154.2834
2024-04-30 20:11:48 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_multiply_add_add_nn_relu_5] Trial #161: GFLOPs: 117.3667. Time: 18.0429 us. Best GFLOPs: 154.2834
2024-04-30 20:11:48 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_multiply_add_add_nn_relu_5] Trial #162: GFLOPs: 78.4930. Time: 26.9786 us. Best GFLOPs: 154.2834
2024-04-30 20:11:48 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_multiply_add_add_nn_relu_5] Trial #163: GFLOPs: 79.2062. Time: 26.7357 us. Best GFLOPs: 154.2834
2024-04-30 20:11:48 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_multiply_add_add_nn_relu_5] Trial #164: GFLOPs: 110.2386. Time: 19.2095 us. Best GFLOPs: 154.2834
2024-04-30 20:11:48 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_multiply_add_add_nn_relu_5] Trial #165: GFLOPs: 107.7911. Time: 19.6457 us. Best GFLOPs: 154.2834
2024-04-30 20:11:48 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_multiply_add_add_nn_relu_5] Trial #166: GFLOPs: 135.5183. Time: 15.6262 us. Best GFLOPs: 154.2834
2024-04-30 20:11:48 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_multiply_add_add_nn_relu_5] Trial #167: GFLOPs: 142.3027. Time: 14.8812 us. Best GFLOPs: 154.2834
2024-04-30 20:11:48 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_multiply_add_add_nn_relu_5] Trial #168: GFLOPs: 140.0522. Time: 15.1203 us. Best GFLOPs: 154.2834
2024-04-30 20:11:48 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_multiply_add_add_nn_relu_5] Trial #169: GFLOPs: 134.3447. Time: 15.7627 us. Best GFLOPs: 154.2834
2024-04-30 20:11:48 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_multiply_add_add_nn_relu_5] Trial #170: GFLOPs: 102.5995. Time: 20.6398 us. Best GFLOPs: 154.2834
2024-04-30 20:11:48 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_multiply_add_add_nn_relu_5] Trial #171: GFLOPs: 128.8353. Time: 16.4367 us. Best GFLOPs: 154.2834
2024-04-30 20:11:48 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_multiply_add_add_nn_relu_5] Trial #172: GFLOPs: 134.0096. Time: 15.8021 us. Best GFLOPs: 154.2834
2024-04-30 20:11:48 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_multiply_add_add_nn_relu_5] Trial #173: GFLOPs: 86.5584. Time: 24.4648 us. Best GFLOPs: 154.2834
2024-04-30 20:11:48 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_multiply_add_add_nn_relu_5] Trial #174: GFLOPs: 135.6771. Time: 15.6079 us. Best GFLOPs: 154.2834
2024-04-30 20:11:48 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_multiply_add_add_nn_relu_5] Trial #175: GFLOPs: 120.2961. Time: 17.6035 us. Best GFLOPs: 154.2834
2024-04-30 20:11:48 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_multiply_add_add_nn_relu_5] Trial #176: GFLOPs: 117.7808. Time: 17.9794 us. Best GFLOPs: 154.2834
2024-04-30 20:11:48 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_multiply_add_add_nn_relu_5] Trial #177: GFLOPs: 111.3824. Time: 19.0123 us. Best GFLOPs: 154.2834
2024-04-30 20:11:48 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_multiply_add_add_nn_relu_5] Trial #178: GFLOPs: 152.9539. Time: 13.8449 us. Best GFLOPs: 154.2834
2024-04-30 20:11:48 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_multiply_add_add_nn_relu_5] Trial #179: GFLOPs: 109.2646. Time: 19.3808 us. Best GFLOPs: 154.2834
2024-04-30 20:11:48 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_multiply_add_add_nn_relu_5] Trial #180: GFLOPs: 146.8595. Time: 14.4194 us. Best GFLOPs: 154.2834
2024-04-30 20:11:48 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_multiply_add_add_nn_relu_5] Trial #181: GFLOPs: 102.7465. Time: 20.6102 us. Best GFLOPs: 154.2834
2024-04-30 20:11:48 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_multiply_add_add_nn_relu_5] Trial #182: GFLOPs: 116.7915. Time: 18.1317 us. Best GFLOPs: 154.2834
2024-04-30 20:11:48 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_multiply_add_add_nn_relu_5] Trial #183: GFLOPs: 107.4470. Time: 19.7086 us. Best GFLOPs: 154.2834
2024-04-30 20:11:48 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_multiply_add_add_nn_relu_5] Trial #184: GFLOPs: 108.5890. Time: 19.5014 us. Best GFLOPs: 154.2834
2024-04-30 20:11:48 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_multiply_add_add_nn_relu_5] Trial #185: GFLOPs: 115.4895. Time: 18.3362 us. Best GFLOPs: 154.2834
2024-04-30 20:11:48 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_multiply_add_add_nn_relu_5] Trial #186: GFLOPs: 143.2091. Time: 14.7870 us. Best GFLOPs: 154.2834
2024-04-30 20:11:48 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_multiply_add_add_nn_relu_5] Trial #187: GFLOPs: 147.7545. Time: 14.3321 us. Best GFLOPs: 154.2834
2024-04-30 20:11:48 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_multiply_add_add_nn_relu_5] Trial #188: GFLOPs: 141.2340. Time: 14.9938 us. Best GFLOPs: 154.2834
2024-04-30 20:11:48 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_multiply_add_add_nn_relu_5] Trial #189: GFLOPs: 117.8201. Time: 17.9734 us. Best GFLOPs: 154.2834
2024-04-30 20:11:48 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_multiply_add_add_nn_relu_5] Trial #190: GFLOPs: 38.7539. Time: 54.6430 us. Best GFLOPs: 154.2834
2024-04-30 20:11:48 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_multiply_add_add_nn_relu_5] Trial #191: GFLOPs: 9.0832. Time: 233.1365 us. Best GFLOPs: 154.2834
2024-04-30 20:11:48 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_multiply_add_add_nn_relu_5] Trial #192: GFLOPs: 49.9667. Time: 42.3808 us. Best GFLOPs: 154.2834
