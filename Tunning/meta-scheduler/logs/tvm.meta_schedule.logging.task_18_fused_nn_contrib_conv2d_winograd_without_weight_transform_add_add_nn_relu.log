2024-04-30 19:06:06 [INFO] [task_scheduler.cc:160] Initializing Task #18: "fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu"
2024-04-30 19:06:06 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(4), T.int64(4), T.int64(128)), "float32"), p1: T.Buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(128)), "float32"), p2: T.Buffer((T.int64(1), T.int64(1), T.int64(1), T.int64(128)), "float32"), p3: T.Buffer((T.int64(1), T.int64(1), T.int64(1), T.int64(128)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(4), T.int64(4), T.int64(128)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(6), T.int64(6), T.int64(128)))
        input_tile = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(1), T.int64(128)))
        B = T.alloc_buffer((T.int64(6), T.int64(6)))
        data_pack = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(1), T.int64(128)))
        bgemm = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(1), T.int64(128)))
        A = T.alloc_buffer((T.int64(6), T.int64(4)))
        inverse = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(1), T.int64(128)))
        conv2d_winograd = T.alloc_buffer((T.int64(1), T.int64(4), T.int64(4), T.int64(128)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(4), T.int64(4), T.int64(128)))
        T_add_1 = T.alloc_buffer((T.int64(1), T.int64(4), T.int64(4), T.int64(128)))
        for i0, i1, i2, i3 in T.grid(T.int64(1), T.int64(6), T.int64(6), T.int64(128)):
            with T.block("data_pad"):
                v_i0, v_i1, v_i2, v_i3 = T.axis.remap("SSSS", [i0, i1, i2, i3])
                T.reads(p0[v_i0, v_i1 - T.int64(1), v_i2 - T.int64(1), v_i3])
                T.writes(data_pad[v_i0, v_i1, v_i2, v_i3])
                T.block_attr({"schedule_rule": "None"})
                data_pad[v_i0, v_i1, v_i2, v_i3] = T.if_then_else(T.int64(1) <= v_i1 and v_i1 < T.int64(5) and T.int64(1) <= v_i2 and v_i2 < T.int64(5), p0[v_i0, v_i1 - T.int64(1), v_i2 - T.int64(1), v_i3], T.float32(0))
        for eps, nu, p, ci in T.grid(T.int64(6), T.int64(6), T.int64(1), T.int64(128)):
            with T.block("input_tile"):
                v_eps, v_nu, v_p, v_ci = T.axis.remap("SSSS", [eps, nu, p, ci])
                T.reads(data_pad[v_p, v_eps, v_nu, v_ci])
                T.writes(input_tile[v_eps, v_nu, v_p, v_ci])
                T.block_attr({"schedule_rule": "None"})
                input_tile[v_eps, v_nu, v_p, v_ci] = data_pad[v_p, v_eps, v_nu, v_ci]
        for i, j in T.grid(T.int64(6), T.int64(6)):
            with T.block("B"):
                v_i, v_j = T.axis.remap("SS", [i, j])
                T.reads()
                T.writes(B[v_i, v_j])
                T.block_attr({"schedule_rule": "None"})
                B[v_i, v_j] = T.Select(v_i % T.int64(6) == T.int64(5) and v_j % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(5) and v_j % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(5) and v_j % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(5) and v_j % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(5) and v_j % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(5) and v_j % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(4) and v_j % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_i % T.int64(6) == T.int64(4) and v_j % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(4) and v_j % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(4) and v_j % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(4) and v_j % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(4) and v_j % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(3) and v_j % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_i % T.int64(6) == T.int64(3) and v_j % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_i % T.int64(6) == T.int64(3) and v_j % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_i % T.int64(6) == T.int64(3) and v_j % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_i % T.int64(6) == T.int64(3) and v_j % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_i % T.int64(6) == T.int64(3) and v_j % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_i % T.int64(6) == T.int64(2) and v_j % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_i % T.int64(6) == T.int64(2) and v_j % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_i % T.int64(6) == T.int64(2) and v_j % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_i % T.int64(6) == T.int64(2) and v_j % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_i % T.int64(6) == T.int64(2) and v_j % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_i % T.int64(6) == T.int64(2) and v_j % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_i % T.int64(6) == T.int64(1) and v_j % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(1) and v_j % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_i % T.int64(6) == T.int64(1) and v_j % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_i % T.int64(6) == T.int64(1) and v_j % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_i % T.int64(6) == T.int64(1) and v_j % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(1) and v_j % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_i % T.int64(6) == T.int64(0) and v_j % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(0) and v_j % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(0) and v_j % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(0) and v_j % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(0) and v_j % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(0) and v_j % T.int64(6) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))))))))))))))
        for eps, nu, p, ci, r_a, r_b in T.grid(T.int64(6), T.int64(6), T.int64(1), T.int64(128), T.int64(6), T.int64(6)):
            with T.block("data_pack"):
                v_eps, v_nu, v_p, v_ci, v_r_a, v_r_b = T.axis.remap("SSSSRR", [eps, nu, p, ci, r_a, r_b])
                T.reads(input_tile[v_r_a, v_r_b, v_p, v_ci], B[T.min(v_r_a, v_r_b):T.min(v_r_a, v_r_b) + (T.max(v_r_a, v_r_b) + T.int64(1) - T.min(v_r_a, v_r_b)), T.min(v_eps, v_nu):T.min(v_eps, v_nu) + (T.max(v_eps, v_nu) + T.int64(1) - T.min(v_eps, v_nu))])
                T.writes(data_pack[v_eps, v_nu, v_p, v_ci])
                T.block_attr({"schedule_rule": "conv2d_nhwc_winograd_data_pack"})
                with T.init():
                    data_pack[v_eps, v_nu, v_p, v_ci] = T.float32(0)
                data_pack[v_eps, v_nu, v_p, v_ci] = data_pack[v_eps, v_nu, v_p, v_ci] + input_tile[v_r_a, v_r_b, v_p, v_ci] * B[v_r_a, v_eps] * B[v_r_b, v_nu]
        for eps, nu, p, co, ci in T.grid(T.int64(6), T.int64(6), T.int64(1), T.int64(128), T.int64(128)):
            with T.block("bgemm"):
                v_eps, v_nu, v_p, v_co, v_ci = T.axis.remap("SSSSR", [eps, nu, p, co, ci])
                T.reads(data_pack[v_eps, v_nu, v_p, v_ci], p1[v_eps, v_nu, v_co, v_ci])
                T.writes(bgemm[v_eps, v_nu, v_p, v_co])
                T.block_attr({"meta_schedule.write_cache_level": [2]})
                with T.init():
                    bgemm[v_eps, v_nu, v_p, v_co] = T.float32(0)
                bgemm[v_eps, v_nu, v_p, v_co] = bgemm[v_eps, v_nu, v_p, v_co] + data_pack[v_eps, v_nu, v_p, v_ci] * p1[v_eps, v_nu, v_co, v_ci]
        for i, j in T.grid(T.int64(6), T.int64(4)):
            with T.block("A"):
                v_i, v_j = T.axis.remap("SS", [i, j])
                T.reads()
                T.writes(A[v_i, v_j])
                T.block_attr({"schedule_rule": "None"})
                A[v_i, v_j] = T.Select(v_i % T.int64(6) == T.int64(5) and v_j % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(5) and v_j % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(5) and v_j % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(5) and v_j % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(4) and v_j % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_i % T.int64(6) == T.int64(4) and v_j % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_i % T.int64(6) == T.int64(4) and v_j % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_i % T.int64(6) == T.int64(4) and v_j % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(3) and v_j % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_i % T.int64(6) == T.int64(3) and v_j % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_i % T.int64(6) == T.int64(3) and v_j % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_i % T.int64(6) == T.int64(3) and v_j % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(2) and v_j % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(2) and v_j % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(2) and v_j % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(2) and v_j % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(1) and v_j % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_i % T.int64(6) == T.int64(1) and v_j % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(1) and v_j % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_i % T.int64(6) == T.int64(1) and v_j % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(0) and v_j % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(0) and v_j % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(0) and v_j % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(0) and v_j % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))
        for vh, vw, p, co, r_a, r_b in T.grid(T.int64(4), T.int64(4), T.int64(1), T.int64(128), T.int64(6), T.int64(6)):
            with T.block("inverse"):
                v_vh, v_vw, v_p, v_co, v_r_a, v_r_b = T.axis.remap("SSSSRR", [vh, vw, p, co, r_a, r_b])
                T.reads(bgemm[v_r_a, v_r_b, v_p, v_co], A[T.min(v_r_a, v_r_b):T.min(v_r_a, v_r_b) + (T.max(v_r_a, v_r_b) + T.int64(1) - T.min(v_r_a, v_r_b)), T.min(v_vh, v_vw):T.min(v_vh, v_vw) + (T.max(v_vh, v_vw) + T.int64(1) - T.min(v_vh, v_vw))])
                T.writes(inverse[v_vh, v_vw, v_p, v_co])
                T.block_attr({"schedule_rule": "conv2d_nhwc_winograd_inverse"})
                with T.init():
                    inverse[v_vh, v_vw, v_p, v_co] = T.float32(0)
                inverse[v_vh, v_vw, v_p, v_co] = inverse[v_vh, v_vw, v_p, v_co] + bgemm[v_r_a, v_r_b, v_p, v_co] * A[v_r_a, v_vh] * A[v_r_b, v_vw]
        for n, h, w, co in T.grid(T.int64(1), T.int64(4), T.int64(4), T.int64(128)):
            with T.block("conv2d_winograd"):
                v_n, v_h, v_w, v_co = T.axis.remap("SSSS", [n, h, w, co])
                T.reads(inverse[v_h % T.int64(4), v_w % T.int64(4), v_h // T.int64(4) + v_w // T.int64(4) + v_n, v_co])
                T.writes(conv2d_winograd[v_n, v_h, v_w, v_co])
                conv2d_winograd[v_n, v_h, v_w, v_co] = inverse[v_h % T.int64(4), v_w % T.int64(4), v_h // T.int64(4) + v_w // T.int64(4) + v_n, v_co]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(4), T.int64(4), T.int64(128)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(conv2d_winograd[v_ax0, v_ax1, v_ax2, v_ax3], p2[v_ax0, T.int64(0), T.int64(0), v_ax3])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3] = conv2d_winograd[v_ax0, v_ax1, v_ax2, v_ax3] + p2[v_ax0, T.int64(0), T.int64(0), v_ax3]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(4), T.int64(4), T.int64(128)):
            with T.block("T_add_1"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3], p3[v_ax0, T.int64(0), T.int64(0), v_ax3])
                T.writes(T_add_1[v_ax0, v_ax1, v_ax2, v_ax3])
                T_add_1[v_ax0, v_ax1, v_ax2, v_ax3] = T_add[v_ax0, v_ax1, v_ax2, v_ax3] + p3[v_ax0, T.int64(0), T.int64(0), v_ax3]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(4), T.int64(4), T.int64(128)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(T_add_1[v_ax0, v_ax1, v_ax2, v_ax3])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(T_add_1[v_ax0, v_ax1, v_ax2, v_ax3], T.float32(0))
2024-04-30 19:06:06 [INFO] [task_scheduler.cc:164] Total 1 design space(s) generated
2024-04-30 19:06:06 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(4), T.int64(4), T.int64(128)), "float32"), p1: T.Buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(128)), "float32"), p2: T.Buffer((T.int64(1), T.int64(1), T.int64(1), T.int64(128)), "float32"), p3: T.Buffer((T.int64(1), T.int64(1), T.int64(1), T.int64(128)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(4), T.int64(4), T.int64(128)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 96, "meta_schedule.unroll_explicit": 16, "meta_schedule.vectorize": 64})
            data_pad = T.alloc_buffer((T.int64(1), T.int64(6), T.int64(6), T.int64(128)))
            input_tile = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(1), T.int64(128)))
            data_pack = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(1), T.int64(128)))
            bgemm = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(1), T.int64(128)))
            inverse = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(1), T.int64(128)))
            conv2d_winograd = T.alloc_buffer((T.int64(1), T.int64(4), T.int64(4), T.int64(128)))
            bgemm_global = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(1), T.int64(128)))
            for p_0, ci_0, p_1, ci_1 in T.grid(T.int64(1), T.int64(8), T.int64(1), T.int64(16)):
                for ax0, ax1 in T.grid(T.int64(6), T.int64(6)):
                    for ax0_1, ax1_1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("data_pad"):
                            v_i0 = T.axis.spatial(T.int64(1), ax0_1)
                            v_i1 = T.axis.spatial(T.int64(6), ax0 + ax1_1)
                            v_i2 = T.axis.spatial(T.int64(6), ax1 + ax2)
                            v_i3 = T.axis.spatial(T.int64(128), ci_0 * T.int64(16) + ci_1 + ax3)
                            T.reads(p0[v_i0, v_i1 - T.int64(1), v_i2 - T.int64(1), v_i3])
                            T.writes(data_pad[v_i0, v_i1, v_i2, v_i3])
                            T.block_attr({"schedule_rule": "None"})
                            data_pad[v_i0, v_i1, v_i2, v_i3] = T.if_then_else(T.int64(1) <= v_i1 and v_i1 < T.int64(5) and T.int64(1) <= v_i2 and v_i2 < T.int64(5), p0[v_i0, v_i1 - T.int64(1), v_i2 - T.int64(1), v_i3], T.float32(0))
                    for ax2, ax3 in T.grid(T.int64(1), T.int64(1)):
                        with T.block("input_tile"):
                            v_eps, v_nu, v_p = T.axis.remap("SSS", [ax0, ax1, ax2])
                            v_ci = T.axis.spatial(T.int64(128), ci_0 * T.int64(16) + ci_1 + ax3)
                            T.reads(data_pad[v_p, v_eps, v_nu, v_ci])
                            T.writes(input_tile[v_eps, v_nu, v_p, v_ci])
                            T.block_attr({"schedule_rule": "None"})
                            input_tile[v_eps, v_nu, v_p, v_ci] = data_pad[v_p, v_eps, v_nu, v_ci]
                for eps in T.unroll(T.int64(6)):
                    for nu in T.unroll(T.int64(6)):
                        for r_a in T.unroll(T.int64(6)):
                            for r_b in T.unroll(T.int64(6)):
                                with T.block("data_pack"):
                                    v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                    v_p = T.axis.spatial(T.int64(1), p_0 + p_1)
                                    v_ci = T.axis.spatial(T.int64(128), ci_0 * T.int64(16) + ci_1)
                                    v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                    T.reads(input_tile[v_r_a, v_r_b, v_p, v_ci])
                                    T.writes(data_pack[v_eps, v_nu, v_p, v_ci])
                                    T.block_attr({"schedule_rule": "conv2d_nhwc_winograd_data_pack"})
                                    with T.init():
                                        data_pack[v_eps, v_nu, v_p, v_ci] = T.float32(0)
                                    data_pack[v_eps, v_nu, v_p, v_ci] = data_pack[v_eps, v_nu, v_p, v_ci] + input_tile[v_r_a, v_r_b, v_p, v_ci] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))))))))))))))
            for eps_0, nu_0, p_0, co_0, eps_1, nu_1, p_1, co_1 in T.grid(T.int64(3), T.int64(3), T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(2)):
                for ci_0, eps_2, nu_2, p_2, co_2, ci_1, eps_3, nu_3, p_3, co_3 in T.grid(T.int64(32), T.int64(1), T.int64(2), T.int64(1), T.int64(2), T.int64(4), T.int64(2), T.int64(1), T.int64(1), T.int64(2)):
                    with T.block("bgemm"):
                        v_eps = T.axis.spatial(T.int64(6), eps_0 * T.int64(2) + eps_1 * T.int64(2) + eps_2 * T.int64(2) + eps_3)
                        v_nu = T.axis.spatial(T.int64(6), nu_0 * T.int64(2) + nu_1 * T.int64(2) + nu_2 + nu_3)
                        v_p = T.axis.spatial(T.int64(1), p_0 + p_1 + p_2 + p_3)
                        v_co = T.axis.spatial(T.int64(128), co_0 * T.int64(8) + co_1 * T.int64(4) + co_2 * T.int64(2) + co_3)
                        v_ci = T.axis.reduce(T.int64(128), ci_0 * T.int64(4) + ci_1)
                        T.reads(data_pack[v_eps, v_nu, v_p, v_ci], p1[v_eps, v_nu, v_co, v_ci])
                        T.writes(bgemm_global[v_eps, v_nu, v_p, v_co])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS", "meta_schedule.write_cache_level": [2]})
                        with T.init():
                            bgemm_global[v_eps, v_nu, v_p, v_co] = T.float32(0)
                        bgemm_global[v_eps, v_nu, v_p, v_co] = bgemm_global[v_eps, v_nu, v_p, v_co] + data_pack[v_eps, v_nu, v_p, v_ci] * p1[v_eps, v_nu, v_co, v_ci]
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(2), T.int64(2), T.int64(1), T.int64(4)):
                    with T.block("bgemm_global"):
                        v0 = T.axis.spatial(T.int64(6), eps_0 * T.int64(2) + ax0)
                        v1 = T.axis.spatial(T.int64(6), nu_0 * T.int64(2) + ax1)
                        v2 = T.axis.spatial(T.int64(1), ax2)
                        v3 = T.axis.spatial(T.int64(128), co_0 * T.int64(8) + co_1 * T.int64(4) + ax3)
                        T.reads(bgemm_global[v0, v1, v2, v3])
                        T.writes(bgemm[v0, v1, v2, v3])
                        bgemm[v0, v1, v2, v3] = bgemm_global[v0, v1, v2, v3]
            for p_0, co_0, p_1, co_1 in T.grid(T.int64(1), T.int64(4), T.int64(1), T.int64(32)):
                for vh in T.unroll(T.int64(4)):
                    for vw in T.unroll(T.int64(4)):
                        for r_a in T.unroll(T.int64(6)):
                            for r_b in T.unroll(T.int64(6)):
                                with T.block("inverse"):
                                    v_vh, v_vw = T.axis.remap("SS", [vh, vw])
                                    v_p = T.axis.spatial(T.int64(1), p_0 + p_1)
                                    v_co = T.axis.spatial(T.int64(128), co_0 * T.int64(32) + co_1)
                                    v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                    T.reads(bgemm[v_r_a, v_r_b, v_p, v_co])
                                    T.writes(inverse[v_vh, v_vw, v_p, v_co])
                                    T.block_attr({"schedule_rule": "conv2d_nhwc_winograd_inverse"})
                                    with T.init():
                                        inverse[v_vh, v_vw, v_p, v_co] = T.float32(0)
                                    inverse[v_vh, v_vw, v_p, v_co] = inverse[v_vh, v_vw, v_p, v_co] + bgemm[v_r_a, v_r_b, v_p, v_co] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(4), T.int64(4), T.int64(128)):
                for ax0_1, ax1_1, ax2_1, ax3_1 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                    with T.block("conv2d_winograd"):
                        v_n = T.axis.spatial(T.int64(1), ax0_1)
                        v_h = T.axis.spatial(T.int64(4), ax1 + ax1_1)
                        v_w = T.axis.spatial(T.int64(4), ax2 + ax2_1)
                        v_co = T.axis.spatial(T.int64(128), ax3 + ax3_1)
                        T.reads(inverse[v_h % T.int64(4), v_w % T.int64(4), v_h // T.int64(4) + v_w // T.int64(4) + v_n, v_co])
                        T.writes(conv2d_winograd[v_n, v_h, v_w, v_co])
                        conv2d_winograd[v_n, v_h, v_w, v_co] = inverse[v_h % T.int64(4), v_w % T.int64(4), v_h // T.int64(4) + v_w // T.int64(4) + v_n, v_co]
                with T.block("T_relu"):
                    v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                    T.reads(conv2d_winograd[v_ax0, v_ax1, v_ax2, v_ax3], p2[v_ax0, T.int64(0), T.int64(0), v_ax3], p3[v_ax0, T.int64(0), T.int64(0), v_ax3])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(conv2d_winograd[v_ax0, v_ax1, v_ax2, v_ax3] + p2[v_ax0, T.int64(0), T.int64(0), v_ax3] + p3[v_ax0, T.int64(0), T.int64(0), v_ax3], T.float32(0))
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="T_add", func_name="main")
b5 = sch.get_block(name="T_add_1", func_name="main")
b6 = sch.get_block(name="root", func_name="main")
b7, b8 = sch.get_producers(block=b2)
sch.compute_inline(block=b8)
l9, l10, l11, l12, l13, l14 = sch.get_loops(block=b2)
v15, v16 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 1])
l17, l18 = sch.split(loop=l11, factors=[v15, v16], preserve_unit_iters=True, disable_predication=False)
v19, v20 = sch.sample_perfect_tile(loop=l12, n=2, max_innermost_factor=64, decision=[4, 32])
l21, l22 = sch.split(loop=l12, factors=[v19, v20], preserve_unit_iters=True, disable_predication=False)
sch.unroll(loop=l9)
sch.unroll(loop=l10)
sch.unroll(loop=l13)
sch.unroll(loop=l14)
sch.reorder(l17, l21, l18, l22, l9, l10, l13, l14)
b23, b24 = sch.get_producers(block=b0)
sch.compute_inline(block=b24)
b25, = sch.get_producers(block=b23)
l26, l27, l28, l29, l30, l31 = sch.get_loops(block=b0)
v32, v33 = sch.sample_perfect_tile(loop=l28, n=2, max_innermost_factor=64, decision=[1, 1])
l34, l35 = sch.split(loop=l28, factors=[v32, v33], preserve_unit_iters=True, disable_predication=False)
v36, v37 = sch.sample_perfect_tile(loop=l29, n=2, max_innermost_factor=64, decision=[8, 16])
l38, l39 = sch.split(loop=l29, factors=[v36, v37], preserve_unit_iters=True, disable_predication=False)
sch.unroll(loop=l26)
sch.unroll(loop=l27)
sch.unroll(loop=l30)
sch.unroll(loop=l31)
sch.reorder(l34, l38, l35, l39, l26, l27, l30, l31)
l40 = sch.sample_compute_location(block=b23, decision=3)
sch.compute_at(block=b23, loop=l40, preserve_unit_loops=True, index=-1)
l41 = sch.sample_compute_location(block=b25, decision=5)
sch.compute_at(block=b25, loop=l41, preserve_unit_loops=True, index=-1)
sch.compute_inline(block=b5)
sch.compute_inline(block=b4)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l42, l43, l44, l45, l46 = sch.get_loops(block=b1)
v47, v48, v49, v50 = sch.sample_perfect_tile(loop=l42, n=4, max_innermost_factor=64, decision=[3, 1, 1, 2])
l51, l52, l53, l54 = sch.split(loop=l42, factors=[v47, v48, v49, v50], preserve_unit_iters=True, disable_predication=False)
v55, v56, v57, v58 = sch.sample_perfect_tile(loop=l43, n=4, max_innermost_factor=64, decision=[3, 1, 2, 1])
l59, l60, l61, l62 = sch.split(loop=l43, factors=[v55, v56, v57, v58], preserve_unit_iters=True, disable_predication=False)
v63, v64, v65, v66 = sch.sample_perfect_tile(loop=l44, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l67, l68, l69, l70 = sch.split(loop=l44, factors=[v63, v64, v65, v66], preserve_unit_iters=True, disable_predication=False)
v71, v72, v73, v74 = sch.sample_perfect_tile(loop=l45, n=4, max_innermost_factor=64, decision=[16, 2, 2, 2])
l75, l76, l77, l78 = sch.split(loop=l45, factors=[v71, v72, v73, v74], preserve_unit_iters=True, disable_predication=False)
v79, v80 = sch.sample_perfect_tile(loop=l46, n=2, max_innermost_factor=64, decision=[32, 4])
l81, l82 = sch.split(loop=l46, factors=[v79, v80], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l51, l59, l67, l75, l52, l60, l68, l76, l81, l53, l61, l69, l77, l82, l54, l62, l70, l78)
b83 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="global")
sch.reverse_compute_at(block=b83, loop=l76, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.parallel", ann_val=96)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.vectorize", ann_val=64)
v84 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.unroll_explicit", ann_val=v84)
l85 = sch.sample_compute_location(block=b3, decision=3)
sch.compute_at(block=b3, loop=l85, preserve_unit_loops=True, index=-1)
2024-04-30 19:13:54 [INFO] [task_scheduler.cc:160] Initializing Task #18: "fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu"
2024-04-30 19:13:54 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(4), T.int64(4), T.int64(128)), "float32"), p1: T.Buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(128)), "float32"), p2: T.Buffer((T.int64(1), T.int64(1), T.int64(1), T.int64(128)), "float32"), p3: T.Buffer((T.int64(1), T.int64(1), T.int64(1), T.int64(128)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(4), T.int64(4), T.int64(128)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(6), T.int64(6), T.int64(128)))
        input_tile = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(1), T.int64(128)))
        B = T.alloc_buffer((T.int64(6), T.int64(6)))
        data_pack = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(1), T.int64(128)))
        bgemm = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(1), T.int64(128)))
        A = T.alloc_buffer((T.int64(6), T.int64(4)))
        inverse = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(1), T.int64(128)))
        conv2d_winograd = T.alloc_buffer((T.int64(1), T.int64(4), T.int64(4), T.int64(128)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(4), T.int64(4), T.int64(128)))
        T_add_1 = T.alloc_buffer((T.int64(1), T.int64(4), T.int64(4), T.int64(128)))
        for i0, i1, i2, i3 in T.grid(T.int64(1), T.int64(6), T.int64(6), T.int64(128)):
            with T.block("data_pad"):
                v_i0, v_i1, v_i2, v_i3 = T.axis.remap("SSSS", [i0, i1, i2, i3])
                T.reads(p0[v_i0, v_i1 - T.int64(1), v_i2 - T.int64(1), v_i3])
                T.writes(data_pad[v_i0, v_i1, v_i2, v_i3])
                T.block_attr({"schedule_rule": "None"})
                data_pad[v_i0, v_i1, v_i2, v_i3] = T.if_then_else(T.int64(1) <= v_i1 and v_i1 < T.int64(5) and T.int64(1) <= v_i2 and v_i2 < T.int64(5), p0[v_i0, v_i1 - T.int64(1), v_i2 - T.int64(1), v_i3], T.float32(0))
        for eps, nu, p, ci in T.grid(T.int64(6), T.int64(6), T.int64(1), T.int64(128)):
            with T.block("input_tile"):
                v_eps, v_nu, v_p, v_ci = T.axis.remap("SSSS", [eps, nu, p, ci])
                T.reads(data_pad[v_p, v_eps, v_nu, v_ci])
                T.writes(input_tile[v_eps, v_nu, v_p, v_ci])
                T.block_attr({"schedule_rule": "None"})
                input_tile[v_eps, v_nu, v_p, v_ci] = data_pad[v_p, v_eps, v_nu, v_ci]
        for i, j in T.grid(T.int64(6), T.int64(6)):
            with T.block("B"):
                v_i, v_j = T.axis.remap("SS", [i, j])
                T.reads()
                T.writes(B[v_i, v_j])
                T.block_attr({"schedule_rule": "None"})
                B[v_i, v_j] = T.Select(v_i % T.int64(6) == T.int64(5) and v_j % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(5) and v_j % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(5) and v_j % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(5) and v_j % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(5) and v_j % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(5) and v_j % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(4) and v_j % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_i % T.int64(6) == T.int64(4) and v_j % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(4) and v_j % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(4) and v_j % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(4) and v_j % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(4) and v_j % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(3) and v_j % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_i % T.int64(6) == T.int64(3) and v_j % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_i % T.int64(6) == T.int64(3) and v_j % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_i % T.int64(6) == T.int64(3) and v_j % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_i % T.int64(6) == T.int64(3) and v_j % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_i % T.int64(6) == T.int64(3) and v_j % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_i % T.int64(6) == T.int64(2) and v_j % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_i % T.int64(6) == T.int64(2) and v_j % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_i % T.int64(6) == T.int64(2) and v_j % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_i % T.int64(6) == T.int64(2) and v_j % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_i % T.int64(6) == T.int64(2) and v_j % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_i % T.int64(6) == T.int64(2) and v_j % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_i % T.int64(6) == T.int64(1) and v_j % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(1) and v_j % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_i % T.int64(6) == T.int64(1) and v_j % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_i % T.int64(6) == T.int64(1) and v_j % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_i % T.int64(6) == T.int64(1) and v_j % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(1) and v_j % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_i % T.int64(6) == T.int64(0) and v_j % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(0) and v_j % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(0) and v_j % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(0) and v_j % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(0) and v_j % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(0) and v_j % T.int64(6) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))))))))))))))
        for eps, nu, p, ci, r_a, r_b in T.grid(T.int64(6), T.int64(6), T.int64(1), T.int64(128), T.int64(6), T.int64(6)):
            with T.block("data_pack"):
                v_eps, v_nu, v_p, v_ci, v_r_a, v_r_b = T.axis.remap("SSSSRR", [eps, nu, p, ci, r_a, r_b])
                T.reads(input_tile[v_r_a, v_r_b, v_p, v_ci], B[T.min(v_r_a, v_r_b):T.min(v_r_a, v_r_b) + (T.max(v_r_a, v_r_b) + T.int64(1) - T.min(v_r_a, v_r_b)), T.min(v_eps, v_nu):T.min(v_eps, v_nu) + (T.max(v_eps, v_nu) + T.int64(1) - T.min(v_eps, v_nu))])
                T.writes(data_pack[v_eps, v_nu, v_p, v_ci])
                T.block_attr({"schedule_rule": "conv2d_nhwc_winograd_data_pack"})
                with T.init():
                    data_pack[v_eps, v_nu, v_p, v_ci] = T.float32(0)
                data_pack[v_eps, v_nu, v_p, v_ci] = data_pack[v_eps, v_nu, v_p, v_ci] + input_tile[v_r_a, v_r_b, v_p, v_ci] * B[v_r_a, v_eps] * B[v_r_b, v_nu]
        for eps, nu, p, co, ci in T.grid(T.int64(6), T.int64(6), T.int64(1), T.int64(128), T.int64(128)):
            with T.block("bgemm"):
                v_eps, v_nu, v_p, v_co, v_ci = T.axis.remap("SSSSR", [eps, nu, p, co, ci])
                T.reads(data_pack[v_eps, v_nu, v_p, v_ci], p1[v_eps, v_nu, v_co, v_ci])
                T.writes(bgemm[v_eps, v_nu, v_p, v_co])
                T.block_attr({"meta_schedule.write_cache_level": [2]})
                with T.init():
                    bgemm[v_eps, v_nu, v_p, v_co] = T.float32(0)
                bgemm[v_eps, v_nu, v_p, v_co] = bgemm[v_eps, v_nu, v_p, v_co] + data_pack[v_eps, v_nu, v_p, v_ci] * p1[v_eps, v_nu, v_co, v_ci]
        for i, j in T.grid(T.int64(6), T.int64(4)):
            with T.block("A"):
                v_i, v_j = T.axis.remap("SS", [i, j])
                T.reads()
                T.writes(A[v_i, v_j])
                T.block_attr({"schedule_rule": "None"})
                A[v_i, v_j] = T.Select(v_i % T.int64(6) == T.int64(5) and v_j % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(5) and v_j % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(5) and v_j % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(5) and v_j % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(4) and v_j % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_i % T.int64(6) == T.int64(4) and v_j % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_i % T.int64(6) == T.int64(4) and v_j % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_i % T.int64(6) == T.int64(4) and v_j % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(3) and v_j % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_i % T.int64(6) == T.int64(3) and v_j % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_i % T.int64(6) == T.int64(3) and v_j % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_i % T.int64(6) == T.int64(3) and v_j % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(2) and v_j % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(2) and v_j % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(2) and v_j % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(2) and v_j % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(1) and v_j % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_i % T.int64(6) == T.int64(1) and v_j % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(1) and v_j % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_i % T.int64(6) == T.int64(1) and v_j % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(0) and v_j % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(0) and v_j % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(0) and v_j % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(0) and v_j % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))
        for vh, vw, p, co, r_a, r_b in T.grid(T.int64(4), T.int64(4), T.int64(1), T.int64(128), T.int64(6), T.int64(6)):
            with T.block("inverse"):
                v_vh, v_vw, v_p, v_co, v_r_a, v_r_b = T.axis.remap("SSSSRR", [vh, vw, p, co, r_a, r_b])
                T.reads(bgemm[v_r_a, v_r_b, v_p, v_co], A[T.min(v_r_a, v_r_b):T.min(v_r_a, v_r_b) + (T.max(v_r_a, v_r_b) + T.int64(1) - T.min(v_r_a, v_r_b)), T.min(v_vh, v_vw):T.min(v_vh, v_vw) + (T.max(v_vh, v_vw) + T.int64(1) - T.min(v_vh, v_vw))])
                T.writes(inverse[v_vh, v_vw, v_p, v_co])
                T.block_attr({"schedule_rule": "conv2d_nhwc_winograd_inverse"})
                with T.init():
                    inverse[v_vh, v_vw, v_p, v_co] = T.float32(0)
                inverse[v_vh, v_vw, v_p, v_co] = inverse[v_vh, v_vw, v_p, v_co] + bgemm[v_r_a, v_r_b, v_p, v_co] * A[v_r_a, v_vh] * A[v_r_b, v_vw]
        for n, h, w, co in T.grid(T.int64(1), T.int64(4), T.int64(4), T.int64(128)):
            with T.block("conv2d_winograd"):
                v_n, v_h, v_w, v_co = T.axis.remap("SSSS", [n, h, w, co])
                T.reads(inverse[v_h % T.int64(4), v_w % T.int64(4), v_h // T.int64(4) + v_w // T.int64(4) + v_n, v_co])
                T.writes(conv2d_winograd[v_n, v_h, v_w, v_co])
                conv2d_winograd[v_n, v_h, v_w, v_co] = inverse[v_h % T.int64(4), v_w % T.int64(4), v_h // T.int64(4) + v_w // T.int64(4) + v_n, v_co]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(4), T.int64(4), T.int64(128)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(conv2d_winograd[v_ax0, v_ax1, v_ax2, v_ax3], p2[v_ax0, T.int64(0), T.int64(0), v_ax3])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3] = conv2d_winograd[v_ax0, v_ax1, v_ax2, v_ax3] + p2[v_ax0, T.int64(0), T.int64(0), v_ax3]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(4), T.int64(4), T.int64(128)):
            with T.block("T_add_1"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3], p3[v_ax0, T.int64(0), T.int64(0), v_ax3])
                T.writes(T_add_1[v_ax0, v_ax1, v_ax2, v_ax3])
                T_add_1[v_ax0, v_ax1, v_ax2, v_ax3] = T_add[v_ax0, v_ax1, v_ax2, v_ax3] + p3[v_ax0, T.int64(0), T.int64(0), v_ax3]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(4), T.int64(4), T.int64(128)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(T_add_1[v_ax0, v_ax1, v_ax2, v_ax3])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(T_add_1[v_ax0, v_ax1, v_ax2, v_ax3], T.float32(0))
2024-04-30 19:13:54 [INFO] [task_scheduler.cc:164] Total 1 design space(s) generated
2024-04-30 19:13:54 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(4), T.int64(4), T.int64(128)), "float32"), p1: T.Buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(128)), "float32"), p2: T.Buffer((T.int64(1), T.int64(1), T.int64(1), T.int64(128)), "float32"), p3: T.Buffer((T.int64(1), T.int64(1), T.int64(1), T.int64(128)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(4), T.int64(4), T.int64(128)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 96, "meta_schedule.unroll_explicit": 64, "meta_schedule.vectorize": 64})
            data_pad = T.alloc_buffer((T.int64(1), T.int64(6), T.int64(6), T.int64(128)))
            input_tile = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(1), T.int64(128)))
            data_pack = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(1), T.int64(128)))
            bgemm = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(1), T.int64(128)))
            inverse = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(1), T.int64(128)))
            bgemm_global = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(1), T.int64(128)))
            for eps in range(T.int64(6)):
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(6), T.int64(128)):
                    with T.block("data_pad"):
                        v_i0 = T.axis.spatial(T.int64(1), ax0)
                        v_i1 = T.axis.spatial(T.int64(6), eps + ax1)
                        v_i2, v_i3 = T.axis.remap("SS", [ax2, ax3])
                        T.reads(p0[v_i0, v_i1 - T.int64(1), v_i2 - T.int64(1), v_i3])
                        T.writes(data_pad[v_i0, v_i1, v_i2, v_i3])
                        T.block_attr({"schedule_rule": "None"})
                        data_pad[v_i0, v_i1, v_i2, v_i3] = T.if_then_else(T.int64(1) <= v_i1 and v_i1 < T.int64(5) and T.int64(1) <= v_i2 and v_i2 < T.int64(5), p0[v_i0, v_i1 - T.int64(1), v_i2 - T.int64(1), v_i3], T.float32(0))
                for nu, p, ci in T.grid(T.int64(6), T.int64(1), T.int64(128)):
                    with T.block("input_tile"):
                        v_eps, v_nu, v_p, v_ci = T.axis.remap("SSSS", [eps, nu, p, ci])
                        T.reads(data_pad[v_p, v_eps, v_nu, v_ci])
                        T.writes(input_tile[v_eps, v_nu, v_p, v_ci])
                        T.block_attr({"schedule_rule": "None"})
                        input_tile[v_eps, v_nu, v_p, v_ci] = data_pad[v_p, v_eps, v_nu, v_ci]
            for p_0, ci_0, p_1, ci_1 in T.grid(T.int64(1), T.int64(16), T.int64(1), T.int64(8)):
                for eps in T.unroll(T.int64(6)):
                    for nu in T.unroll(T.int64(6)):
                        for r_a in T.unroll(T.int64(6)):
                            for r_b in T.unroll(T.int64(6)):
                                with T.block("data_pack"):
                                    v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                    v_p = T.axis.spatial(T.int64(1), p_0 + p_1)
                                    v_ci = T.axis.spatial(T.int64(128), ci_0 * T.int64(8) + ci_1)
                                    v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                    T.reads(input_tile[v_r_a, v_r_b, v_p, v_ci])
                                    T.writes(data_pack[v_eps, v_nu, v_p, v_ci])
                                    T.block_attr({"schedule_rule": "conv2d_nhwc_winograd_data_pack"})
                                    with T.init():
                                        data_pack[v_eps, v_nu, v_p, v_ci] = T.float32(0)
                                    data_pack[v_eps, v_nu, v_p, v_ci] = data_pack[v_eps, v_nu, v_p, v_ci] + input_tile[v_r_a, v_r_b, v_p, v_ci] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))))))))))))))
            for eps_0, nu_0, p_0, co_0, eps_1, nu_1, p_1, co_1 in T.grid(T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(16)):
                for ci_0, eps_2, nu_2, p_2, co_2, ci_1, eps_3, nu_3, p_3, co_3 in T.grid(T.int64(64), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(2), T.int64(3), T.int64(2), T.int64(1), T.int64(1)):
                    with T.block("bgemm"):
                        v_eps = T.axis.spatial(T.int64(6), eps_0 * T.int64(6) + eps_1 * T.int64(3) + eps_2 * T.int64(3) + eps_3)
                        v_nu = T.axis.spatial(T.int64(6), nu_0 * T.int64(2) + nu_1 * T.int64(2) + nu_2 * T.int64(2) + nu_3)
                        v_p = T.axis.spatial(T.int64(1), p_0 + p_1 + p_2 + p_3)
                        v_co = T.axis.spatial(T.int64(128), co_0 * T.int64(128) + co_1 * T.int64(8) + co_2 + co_3)
                        v_ci = T.axis.reduce(T.int64(128), ci_0 * T.int64(2) + ci_1)
                        T.reads(data_pack[v_eps, v_nu, v_p, v_ci], p1[v_eps, v_nu, v_co, v_ci])
                        T.writes(bgemm_global[v_eps, v_nu, v_p, v_co])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS", "meta_schedule.write_cache_level": [2]})
                        with T.init():
                            bgemm_global[v_eps, v_nu, v_p, v_co] = T.float32(0)
                        bgemm_global[v_eps, v_nu, v_p, v_co] = bgemm_global[v_eps, v_nu, v_p, v_co] + data_pack[v_eps, v_nu, v_p, v_ci] * p1[v_eps, v_nu, v_co, v_ci]
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(3), T.int64(2), T.int64(1), T.int64(8)):
                    with T.block("bgemm_global"):
                        v0 = T.axis.spatial(T.int64(6), eps_1 * T.int64(3) + ax0)
                        v1 = T.axis.spatial(T.int64(6), nu_0 * T.int64(2) + ax1)
                        v2 = T.axis.spatial(T.int64(1), ax2)
                        v3 = T.axis.spatial(T.int64(128), co_1 * T.int64(8) + ax3)
                        T.reads(bgemm_global[v0, v1, v2, v3])
                        T.writes(bgemm[v0, v1, v2, v3])
                        bgemm[v0, v1, v2, v3] = bgemm_global[v0, v1, v2, v3]
            for p_0, co_0, p_1, co_1 in T.grid(T.int64(1), T.int64(4), T.int64(1), T.int64(32)):
                for vh in T.unroll(T.int64(4)):
                    for vw in T.unroll(T.int64(4)):
                        for r_a in T.unroll(T.int64(6)):
                            for r_b in T.unroll(T.int64(6)):
                                with T.block("inverse"):
                                    v_vh, v_vw = T.axis.remap("SS", [vh, vw])
                                    v_p = T.axis.spatial(T.int64(1), p_0 + p_1)
                                    v_co = T.axis.spatial(T.int64(128), co_0 * T.int64(32) + co_1)
                                    v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                    T.reads(bgemm[v_r_a, v_r_b, v_p, v_co])
                                    T.writes(inverse[v_vh, v_vw, v_p, v_co])
                                    T.block_attr({"schedule_rule": "conv2d_nhwc_winograd_inverse"})
                                    with T.init():
                                        inverse[v_vh, v_vw, v_p, v_co] = T.float32(0)
                                    inverse[v_vh, v_vw, v_p, v_co] = inverse[v_vh, v_vw, v_p, v_co] + bgemm[v_r_a, v_r_b, v_p, v_co] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(4), T.int64(4), T.int64(128)):
                with T.block("T_relu"):
                    v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                    T.reads(inverse[v_ax1 % T.int64(4), v_ax2 % T.int64(4), v_ax1 // T.int64(4) + v_ax2 // T.int64(4) + v_ax0, v_ax3], p2[v_ax0, T.int64(0), T.int64(0), v_ax3], p3[v_ax0, T.int64(0), T.int64(0), v_ax3])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(inverse[v_ax1 % T.int64(4), v_ax2 % T.int64(4), v_ax1 // T.int64(4) + v_ax2 // T.int64(4) + v_ax0, v_ax3] + p2[v_ax0, T.int64(0), T.int64(0), v_ax3] + p3[v_ax0, T.int64(0), T.int64(0), v_ax3], T.float32(0))
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="T_add", func_name="main")
b5 = sch.get_block(name="T_add_1", func_name="main")
b6 = sch.get_block(name="root", func_name="main")
b7, b8 = sch.get_producers(block=b2)
sch.compute_inline(block=b8)
l9, l10, l11, l12, l13, l14 = sch.get_loops(block=b2)
v15, v16 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 1])
l17, l18 = sch.split(loop=l11, factors=[v15, v16], preserve_unit_iters=True, disable_predication=False)
v19, v20 = sch.sample_perfect_tile(loop=l12, n=2, max_innermost_factor=64, decision=[4, 32])
l21, l22 = sch.split(loop=l12, factors=[v19, v20], preserve_unit_iters=True, disable_predication=False)
sch.unroll(loop=l9)
sch.unroll(loop=l10)
sch.unroll(loop=l13)
sch.unroll(loop=l14)
sch.reorder(l17, l21, l18, l22, l9, l10, l13, l14)
b23, b24 = sch.get_producers(block=b0)
sch.compute_inline(block=b24)
b25, = sch.get_producers(block=b23)
l26, l27, l28, l29, l30, l31 = sch.get_loops(block=b0)
v32, v33 = sch.sample_perfect_tile(loop=l28, n=2, max_innermost_factor=64, decision=[1, 1])
l34, l35 = sch.split(loop=l28, factors=[v32, v33], preserve_unit_iters=True, disable_predication=False)
v36, v37 = sch.sample_perfect_tile(loop=l29, n=2, max_innermost_factor=64, decision=[16, 8])
l38, l39 = sch.split(loop=l29, factors=[v36, v37], preserve_unit_iters=True, disable_predication=False)
sch.unroll(loop=l26)
sch.unroll(loop=l27)
sch.unroll(loop=l30)
sch.unroll(loop=l31)
sch.reorder(l34, l38, l35, l39, l26, l27, l30, l31)
l40 = sch.sample_compute_location(block=b23, decision=-1)
sch.compute_at(block=b23, loop=l40, preserve_unit_loops=True, index=-1)
l41 = sch.sample_compute_location(block=b25, decision=0)
sch.compute_at(block=b25, loop=l41, preserve_unit_loops=True, index=-1)
sch.compute_inline(block=b5)
sch.compute_inline(block=b4)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l42, l43, l44, l45, l46 = sch.get_loops(block=b1)
v47, v48, v49, v50 = sch.sample_perfect_tile(loop=l42, n=4, max_innermost_factor=64, decision=[1, 2, 1, 3])
l51, l52, l53, l54 = sch.split(loop=l42, factors=[v47, v48, v49, v50], preserve_unit_iters=True, disable_predication=False)
v55, v56, v57, v58 = sch.sample_perfect_tile(loop=l43, n=4, max_innermost_factor=64, decision=[3, 1, 1, 2])
l59, l60, l61, l62 = sch.split(loop=l43, factors=[v55, v56, v57, v58], preserve_unit_iters=True, disable_predication=False)
v63, v64, v65, v66 = sch.sample_perfect_tile(loop=l44, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l67, l68, l69, l70 = sch.split(loop=l44, factors=[v63, v64, v65, v66], preserve_unit_iters=True, disable_predication=False)
v71, v72, v73, v74 = sch.sample_perfect_tile(loop=l45, n=4, max_innermost_factor=64, decision=[1, 16, 8, 1])
l75, l76, l77, l78 = sch.split(loop=l45, factors=[v71, v72, v73, v74], preserve_unit_iters=True, disable_predication=False)
v79, v80 = sch.sample_perfect_tile(loop=l46, n=2, max_innermost_factor=64, decision=[64, 2])
l81, l82 = sch.split(loop=l46, factors=[v79, v80], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l51, l59, l67, l75, l52, l60, l68, l76, l81, l53, l61, l69, l77, l82, l54, l62, l70, l78)
b83 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="global")
sch.reverse_compute_at(block=b83, loop=l76, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.parallel", ann_val=96)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.vectorize", ann_val=64)
v84 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.unroll_explicit", ann_val=v84)
l85 = sch.sample_compute_location(block=b3, decision=-2)
sch.compute_at(block=b3, loop=l85, preserve_unit_loops=True, index=-1)
2024-04-30 19:23:54 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-30 19:23:54 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-30 19:23:59 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x21e17768)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x1bc803a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x963a4d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x21475998)]: 0 failure(s)
2024-04-30 19:23:59 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-30 19:24:05 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x21e17768)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x1bc803a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x963a4d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x21475998)]: 0 failure(s)
2024-04-30 19:24:10 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x21e17768)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x1bc803a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x963a4d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x21475998)]: 0 failure(s)
2024-04-30 19:24:16 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x21e17768)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x1bc803a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x963a4d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x21475998)]: 0 failure(s)
2024-04-30 19:24:21 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x21e17768)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x1bc803a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x963a4d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x21475998)]: 0 failure(s)
2024-04-30 19:24:22 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9999  0.9994  0.9993  0.9993  0.9992  0.9988  0.9980  0.9973  0.9973  0.9969  0.9964  0.9962  0.9960  0.9960  0.9945  0.9939
[17 : 32]:	0.9934  0.9934  0.9916  0.9916  0.9909  0.9906  0.9905  0.9890  0.9888  0.9887  0.9885  0.9885  0.9881  0.9878  0.9878  0.9872
[33 : 48]:	0.9871  0.9870  0.9869  0.9865  0.9861  0.9860  0.9849  0.9845  0.9842  0.9842  0.9837  0.9833  0.9828  0.9825  0.9821  0.9819
[49 : 64]:	0.9816  0.9812  0.9811  0.9809  0.9804  0.9800  0.9799  0.9783  0.9779  0.9777  0.9776  0.9773  0.9763  0.9760  0.9740  0.9738
2024-04-30 19:24:23 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-30 19:24:23 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-30 19:36:33 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #1: GFLOPs: 14.5966. Time: 130.4850 us. Best GFLOPs: 14.5966
2024-04-30 19:36:33 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #2: GFLOPs: 11.5122. Time: 165.4460 us. Best GFLOPs: 14.5966
2024-04-30 19:36:33 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #3: GFLOPs: 26.0990. Time: 72.9776 us. Best GFLOPs: 26.0990
2024-04-30 19:36:33 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #4: GFLOPs: 29.8994. Time: 63.7017 us. Best GFLOPs: 29.8994
2024-04-30 19:36:33 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #5: GFLOPs: 28.6952. Time: 66.3748 us. Best GFLOPs: 29.8994
2024-04-30 19:36:33 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #6: GFLOPs: 26.9969. Time: 70.5504 us. Best GFLOPs: 29.8994
2024-04-30 19:36:33 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #7: GFLOPs: 38.6029. Time: 49.3393 us. Best GFLOPs: 38.6029
2024-04-30 19:36:33 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #8: GFLOPs: 33.7039. Time: 56.5110 us. Best GFLOPs: 38.6029
2024-04-30 19:36:33 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #9: GFLOPs: 24.6238. Time: 77.3494 us. Best GFLOPs: 38.6029
2024-04-30 19:36:33 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #10: GFLOPs: 13.7554. Time: 138.4652 us. Best GFLOPs: 38.6029
2024-04-30 19:36:33 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #11: GFLOPs: 23.5239. Time: 80.9663 us. Best GFLOPs: 38.6029
2024-04-30 19:36:33 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #12: GFLOPs: 11.8682. Time: 160.4829 us. Best GFLOPs: 38.6029
2024-04-30 19:36:33 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #13: GFLOPs: 17.1808. Time: 110.8588 us. Best GFLOPs: 38.6029
2024-04-30 19:36:33 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #14: GFLOPs: 18.0040. Time: 105.7896 us. Best GFLOPs: 38.6029
2024-04-30 19:36:33 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #15: GFLOPs: 11.1312. Time: 171.1081 us. Best GFLOPs: 38.6029
2024-04-30 19:36:33 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #16: GFLOPs: 16.1804. Time: 117.7128 us. Best GFLOPs: 38.6029
2024-04-30 19:36:33 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #17: GFLOPs: 29.2310. Time: 65.1581 us. Best GFLOPs: 38.6029
2024-04-30 19:36:33 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #18: GFLOPs: 14.3976. Time: 132.2888 us. Best GFLOPs: 38.6029
2024-04-30 19:36:33 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #19: GFLOPs: 17.9100. Time: 106.3449 us. Best GFLOPs: 38.6029
2024-04-30 19:36:33 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #20: GFLOPs: 31.3773. Time: 60.7011 us. Best GFLOPs: 38.6029
2024-04-30 19:36:33 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #21: GFLOPs: 17.0916. Time: 111.4371 us. Best GFLOPs: 38.6029
2024-04-30 19:36:33 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #22: GFLOPs: 23.8383. Time: 79.8982 us. Best GFLOPs: 38.6029
2024-04-30 19:36:33 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #23: GFLOPs: 14.7449. Time: 129.1732 us. Best GFLOPs: 38.6029
2024-04-30 19:36:33 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #24: GFLOPs: 23.2437. Time: 81.9421 us. Best GFLOPs: 38.6029
2024-04-30 19:36:33 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #25: GFLOPs: 26.1947. Time: 72.7109 us. Best GFLOPs: 38.6029
2024-04-30 19:36:33 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #26: GFLOPs: 21.3816. Time: 89.0786 us. Best GFLOPs: 38.6029
2024-04-30 19:36:33 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #27: GFLOPs: 30.9380. Time: 61.5631 us. Best GFLOPs: 38.6029
2024-04-30 19:36:33 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #28: GFLOPs: 32.0473. Time: 59.4322 us. Best GFLOPs: 38.6029
2024-04-30 19:36:33 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #29: GFLOPs: 28.9540. Time: 65.7816 us. Best GFLOPs: 38.6029
2024-04-30 19:36:33 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #30: GFLOPs: 33.0483. Time: 57.6320 us. Best GFLOPs: 38.6029
2024-04-30 19:36:33 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #31: GFLOPs: 28.2305. Time: 67.4674 us. Best GFLOPs: 38.6029
2024-04-30 19:36:33 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #32: GFLOPs: 29.2275. Time: 65.1660 us. Best GFLOPs: 38.6029
2024-04-30 19:36:33 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #33: GFLOPs: 22.1562. Time: 85.9640 us. Best GFLOPs: 38.6029
2024-04-30 19:36:33 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #34: GFLOPs: 39.7833. Time: 47.8754 us. Best GFLOPs: 39.7833
2024-04-30 19:36:33 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #35: GFLOPs: 31.7659. Time: 59.9586 us. Best GFLOPs: 39.7833
2024-04-30 19:36:33 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #36: GFLOPs: 18.9874. Time: 100.3109 us. Best GFLOPs: 39.7833
2024-04-30 19:36:33 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #37: GFLOPs: 12.8614. Time: 148.0892 us. Best GFLOPs: 39.7833
2024-04-30 19:36:33 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #38: GFLOPs: 29.6656. Time: 64.2037 us. Best GFLOPs: 39.7833
2024-04-30 19:36:33 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #39: GFLOPs: 19.4568. Time: 97.8908 us. Best GFLOPs: 39.7833
2024-04-30 19:36:33 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #40: GFLOPs: 22.3014. Time: 85.4047 us. Best GFLOPs: 39.7833
2024-04-30 19:36:33 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #41: GFLOPs: 32.2801. Time: 59.0035 us. Best GFLOPs: 39.7833
2024-04-30 19:36:33 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #42: GFLOPs: 29.2451. Time: 65.1269 us. Best GFLOPs: 39.7833
2024-04-30 19:36:33 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #43: GFLOPs: 30.7009. Time: 62.0385 us. Best GFLOPs: 39.7833
2024-04-30 19:36:33 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #44: GFLOPs: 24.7791. Time: 76.8648 us. Best GFLOPs: 39.7833
2024-04-30 19:36:33 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #45: GFLOPs: 20.5324. Time: 92.7627 us. Best GFLOPs: 39.7833
2024-04-30 19:36:33 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #46: GFLOPs: 29.9888. Time: 63.5116 us. Best GFLOPs: 39.7833
2024-04-30 19:36:33 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #47: GFLOPs: 15.5838. Time: 122.2193 us. Best GFLOPs: 39.7833
2024-04-30 19:36:33 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #48: GFLOPs: 32.6291. Time: 58.3725 us. Best GFLOPs: 39.7833
2024-04-30 19:36:33 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #49: GFLOPs: 28.7427. Time: 66.2651 us. Best GFLOPs: 39.7833
2024-04-30 19:36:33 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #50: GFLOPs: 15.7354. Time: 121.0418 us. Best GFLOPs: 39.7833
2024-04-30 19:36:33 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #51: GFLOPs: 21.2039. Time: 89.8251 us. Best GFLOPs: 39.7833
2024-04-30 19:36:33 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #52: GFLOPs: 18.7929. Time: 101.3487 us. Best GFLOPs: 39.7833
2024-04-30 19:36:33 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #53: GFLOPs: 19.7873. Time: 96.2555 us. Best GFLOPs: 39.7833
2024-04-30 19:36:33 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #54: GFLOPs: 15.3927. Time: 123.7367 us. Best GFLOPs: 39.7833
2024-04-30 19:36:33 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #55: GFLOPs: 21.5839. Time: 88.2437 us. Best GFLOPs: 39.7833
2024-04-30 19:36:33 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #56: GFLOPs: 31.6588. Time: 60.1615 us. Best GFLOPs: 39.7833
2024-04-30 19:36:33 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #57: GFLOPs: 13.8533. Time: 137.4867 us. Best GFLOPs: 39.7833
2024-04-30 19:36:33 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #58: GFLOPs: 34.5456. Time: 55.1341 us. Best GFLOPs: 39.7833
2024-04-30 19:36:33 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #59: GFLOPs: 37.1460. Time: 51.2745 us. Best GFLOPs: 39.7833
2024-04-30 19:36:33 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #60: GFLOPs: 17.2437. Time: 110.4545 us. Best GFLOPs: 39.7833
2024-04-30 19:36:33 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #61: GFLOPs: 13.7502. Time: 138.5169 us. Best GFLOPs: 39.7833
2024-04-30 19:36:33 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #62: GFLOPs: 21.1094. Time: 90.2272 us. Best GFLOPs: 39.7833
2024-04-30 19:36:33 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #63: GFLOPs: 39.3919. Time: 48.3510 us. Best GFLOPs: 39.7833
2024-04-30 19:36:33 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #64: GFLOPs: 35.9500. Time: 52.9802 us. Best GFLOPs: 39.7833
2024-04-30 19:48:31 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-30 19:48:32 [INFO] [evolutionary_search.cc:715] Picked top 64 candidate(s) from database
2024-04-30 19:48:39 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x21e17768)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x1bc803a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x963a4d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x21475998)]: 0 failure(s)
2024-04-30 19:48:39 [INFO] [evolutionary_search.cc:723] Sampled 448 candidate(s)
2024-04-30 19:48:52 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x21e17768)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x1bc803a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x963a4d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x21475998)]: 0 failure(s)
2024-04-30 19:49:06 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x21e17768)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x1bc803a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x963a4d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x21475998)]: 0 failure(s)
2024-04-30 19:49:22 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x21e17768)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x1bc803a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x963a4d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x21475998)]: 0 failure(s)
2024-04-30 19:49:37 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x21e17768)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x1bc803a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x963a4d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x21475998)]: 0 failure(s)
2024-04-30 19:49:47 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.0173  1.0167  0.9949  0.9928  0.9852  0.9790  0.9748  0.9729  0.9700  0.9647  0.9638  0.9595  0.9549  0.9549  0.9529  0.9434
[17 : 32]:	0.9430  0.9430  0.9423  0.9416  0.9374  0.9370  0.9370  0.9324  0.9324  0.9294  0.9293  0.9238  0.9224  0.9224  0.9222  0.9209
[33 : 48]:	0.9209  0.9200  0.9192  0.9174  0.9168  0.9164  0.9163  0.9148  0.9146  0.9104  0.9088  0.9079  0.9059  0.9049  0.9044  0.9041
[49 : 64]:	0.9041  0.9039  0.9025  0.9024  0.9021  0.9016  0.9016  0.9007  0.9003  0.9001  0.9001  0.8992  0.8976  0.8962  0.8962  0.8954
2024-04-30 19:49:47 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-30 19:49:47 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-30 19:51:08 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #65: GFLOPs: 29.6351. Time: 64.2697 us. Best GFLOPs: 39.7833
2024-04-30 19:51:08 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #66: GFLOPs: 29.0573. Time: 65.5478 us. Best GFLOPs: 39.7833
2024-04-30 19:51:08 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #67: GFLOPs: 28.7085. Time: 66.3441 us. Best GFLOPs: 39.7833
2024-04-30 19:51:08 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #68: GFLOPs: 19.4976. Time: 97.6857 us. Best GFLOPs: 39.7833
2024-04-30 19:51:08 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #69: GFLOPs: 27.2778. Time: 69.8237 us. Best GFLOPs: 39.7833
2024-04-30 19:51:08 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #70: GFLOPs: 21.2238. Time: 89.7409 us. Best GFLOPs: 39.7833
2024-04-30 19:51:08 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #71: GFLOPs: 28.4378. Time: 66.9756 us. Best GFLOPs: 39.7833
2024-04-30 19:51:08 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #72: GFLOPs: 29.6612. Time: 64.2132 us. Best GFLOPs: 39.7833
2024-04-30 19:51:08 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #73: GFLOPs: 31.4926. Time: 60.4790 us. Best GFLOPs: 39.7833
2024-04-30 19:51:08 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #74: GFLOPs: 27.4697. Time: 69.3361 us. Best GFLOPs: 39.7833
2024-04-30 19:51:08 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #75: GFLOPs: 31.8446. Time: 59.8105 us. Best GFLOPs: 39.7833
2024-04-30 19:51:08 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #76: GFLOPs: 29.2273. Time: 65.1666 us. Best GFLOPs: 39.7833
2024-04-30 19:51:08 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #77: GFLOPs: 20.1874. Time: 94.3481 us. Best GFLOPs: 39.7833
2024-04-30 19:51:08 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #78: GFLOPs: 18.8927. Time: 100.8136 us. Best GFLOPs: 39.7833
2024-04-30 19:51:08 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #79: GFLOPs: 19.6545. Time: 96.9061 us. Best GFLOPs: 39.7833
2024-04-30 19:51:08 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #80: GFLOPs: 29.6381. Time: 64.2632 us. Best GFLOPs: 39.7833
2024-04-30 19:51:08 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #81: GFLOPs: 30.1925. Time: 63.0832 us. Best GFLOPs: 39.7833
2024-04-30 19:51:08 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #82: GFLOPs: 29.0312. Time: 65.6066 us. Best GFLOPs: 39.7833
2024-04-30 19:51:08 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #83: GFLOPs: 26.5868. Time: 71.6385 us. Best GFLOPs: 39.7833
2024-04-30 19:51:08 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #84: GFLOPs: 30.2144. Time: 63.0375 us. Best GFLOPs: 39.7833
2024-04-30 19:51:08 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #85: GFLOPs: 29.4609. Time: 64.6498 us. Best GFLOPs: 39.7833
2024-04-30 19:51:08 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #86: GFLOPs: 27.8575. Time: 68.3708 us. Best GFLOPs: 39.7833
2024-04-30 19:51:08 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #87: GFLOPs: 28.3250. Time: 67.2424 us. Best GFLOPs: 39.7833
2024-04-30 19:51:08 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #88: GFLOPs: 29.4165. Time: 64.7473 us. Best GFLOPs: 39.7833
2024-04-30 19:51:08 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #89: GFLOPs: 30.2081. Time: 63.0507 us. Best GFLOPs: 39.7833
2024-04-30 19:51:08 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #90: GFLOPs: 28.6468. Time: 66.4869 us. Best GFLOPs: 39.7833
2024-04-30 19:51:08 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #91: GFLOPs: 25.9354. Time: 73.4379 us. Best GFLOPs: 39.7833
2024-04-30 19:51:08 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #92: GFLOPs: 29.3011. Time: 65.0024 us. Best GFLOPs: 39.7833
2024-04-30 19:51:08 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #93: GFLOPs: 29.6446. Time: 64.2491 us. Best GFLOPs: 39.7833
2024-04-30 19:51:08 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #94: GFLOPs: 29.6472. Time: 64.2436 us. Best GFLOPs: 39.7833
2024-04-30 19:51:08 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #95: GFLOPs: 30.2883. Time: 62.8837 us. Best GFLOPs: 39.7833
2024-04-30 19:51:08 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #96: GFLOPs: 33.4927. Time: 56.8674 us. Best GFLOPs: 39.7833
2024-04-30 19:51:08 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #97: GFLOPs: 26.4500. Time: 72.0092 us. Best GFLOPs: 39.7833
2024-04-30 19:51:08 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #98: GFLOPs: 24.9788. Time: 76.2503 us. Best GFLOPs: 39.7833
2024-04-30 19:51:08 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #99: GFLOPs: 27.3346. Time: 69.6787 us. Best GFLOPs: 39.7833
2024-04-30 19:51:08 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #100: GFLOPs: 25.3276. Time: 75.2003 us. Best GFLOPs: 39.7833
2024-04-30 19:51:08 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #101: GFLOPs: 30.4063. Time: 62.6396 us. Best GFLOPs: 39.7833
2024-04-30 19:51:08 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #102: GFLOPs: 30.9046. Time: 61.6297 us. Best GFLOPs: 39.7833
2024-04-30 19:51:08 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #103: GFLOPs: 29.9038. Time: 63.6923 us. Best GFLOPs: 39.7833
2024-04-30 19:51:08 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #104: GFLOPs: 28.8785. Time: 65.9536 us. Best GFLOPs: 39.7833
2024-04-30 19:51:08 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #105: GFLOPs: 19.9900. Time: 95.2797 us. Best GFLOPs: 39.7833
2024-04-30 19:51:08 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #106: GFLOPs: 24.6562. Time: 77.2479 us. Best GFLOPs: 39.7833
2024-04-30 19:51:08 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #107: GFLOPs: 29.8702. Time: 63.7639 us. Best GFLOPs: 39.7833
2024-04-30 19:51:08 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #108: GFLOPs: 28.6734. Time: 66.4254 us. Best GFLOPs: 39.7833
2024-04-30 19:51:08 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #109: GFLOPs: 25.3493. Time: 75.1358 us. Best GFLOPs: 39.7833
2024-04-30 19:51:08 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #110: GFLOPs: 25.2497. Time: 75.4321 us. Best GFLOPs: 39.7833
2024-04-30 19:51:08 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #111: GFLOPs: 25.7986. Time: 73.8272 us. Best GFLOPs: 39.7833
2024-04-30 19:51:08 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #112: GFLOPs: 30.6824. Time: 62.0759 us. Best GFLOPs: 39.7833
2024-04-30 19:51:08 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #113: GFLOPs: 31.0113. Time: 61.4177 us. Best GFLOPs: 39.7833
2024-04-30 19:51:08 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #114: GFLOPs: 26.2111. Time: 72.6653 us. Best GFLOPs: 39.7833
2024-04-30 19:51:08 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #115: GFLOPs: 21.4021. Time: 88.9930 us. Best GFLOPs: 39.7833
2024-04-30 19:51:08 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #116: GFLOPs: 28.6870. Time: 66.3938 us. Best GFLOPs: 39.7833
2024-04-30 19:51:08 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #117: GFLOPs: 26.0036. Time: 73.2452 us. Best GFLOPs: 39.7833
2024-04-30 19:51:08 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #118: GFLOPs: 31.3346. Time: 60.7839 us. Best GFLOPs: 39.7833
2024-04-30 19:51:08 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #119: GFLOPs: 28.8238. Time: 66.0786 us. Best GFLOPs: 39.7833
2024-04-30 19:51:08 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #120: GFLOPs: 23.4786. Time: 81.1225 us. Best GFLOPs: 39.7833
2024-04-30 19:51:08 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #121: GFLOPs: 14.5476. Time: 130.9250 us. Best GFLOPs: 39.7833
2024-04-30 19:51:08 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #122: GFLOPs: 24.1211. Time: 78.9617 us. Best GFLOPs: 39.7833
2024-04-30 19:51:08 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #123: GFLOPs: 25.8040. Time: 73.8118 us. Best GFLOPs: 39.7833
2024-04-30 19:51:08 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #124: GFLOPs: 25.8089. Time: 73.7978 us. Best GFLOPs: 39.7833
2024-04-30 19:51:08 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #125: GFLOPs: 28.8628. Time: 65.9895 us. Best GFLOPs: 39.7833
2024-04-30 19:51:08 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #126: GFLOPs: 9.6490. Time: 197.3927 us. Best GFLOPs: 39.7833
2024-04-30 19:51:08 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #127: GFLOPs: 16.0352. Time: 118.7783 us. Best GFLOPs: 39.7833
2024-04-30 19:51:08 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #128: GFLOPs: 17.9896. Time: 105.8744 us. Best GFLOPs: 39.7833
2024-04-30 19:54:52 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-30 19:54:55 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-30 19:55:06 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x21e17768)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x1bc803a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x963a4d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x21475998)]: 0 failure(s)
2024-04-30 19:55:06 [INFO] [evolutionary_search.cc:723] Sampled 410 candidate(s)
2024-04-30 19:55:30 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x21e17768)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x1bc803a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x963a4d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x21475998)]: 0 failure(s)
2024-04-30 19:55:53 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x21e17768)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x1bc803a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x963a4d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x21475998)]: 0 failure(s)
2024-04-30 19:56:19 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x21e17768)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x1bc803a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x963a4d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x21475998)]: 0 failure(s)
2024-04-30 19:56:45 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x21e17768)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x1bc803a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x963a4d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x21475998)]: 0 failure(s)
2024-04-30 19:57:00 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.4295  1.2694  1.2530  1.2517  1.2479  1.2442  1.2320  1.2320  1.2264  1.2263  1.2224  1.2055  1.2047  1.2035  1.2028  1.2008
[17 : 32]:	1.1865  1.1758  1.1758  1.1758  1.1750  1.1741  1.1701  1.1645  1.1640  1.1383  1.1359  1.1234  1.1225  1.1217  1.1077  1.1077
[33 : 48]:	1.0980  1.0955  1.0947  1.0943  1.0764  1.0699  1.0556  1.0556  1.0534  1.0393  1.0393  1.0389  1.0309  1.0270  1.0258  1.0249
[49 : 64]:	1.0244  1.0219  1.0145  1.0127  1.0098  1.0069  0.9948  0.9943  0.9943  0.9879  0.9780  0.9748  0.9658  0.9578  0.9575  0.9569
2024-04-30 19:57:00 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-30 19:57:00 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-30 19:59:07 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #129: GFLOPs: 4.7864. Time: 397.9311 us. Best GFLOPs: 39.7833
2024-04-30 19:59:07 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #130: GFLOPs: 11.0832. Time: 171.8490 us. Best GFLOPs: 39.7833
2024-04-30 19:59:07 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #131: GFLOPs: 11.8170. Time: 161.1784 us. Best GFLOPs: 39.7833
2024-04-30 19:59:07 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #132: GFLOPs: 11.3165. Time: 168.3062 us. Best GFLOPs: 39.7833
2024-04-30 19:59:07 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #133: GFLOPs: 10.8570. Time: 175.4297 us. Best GFLOPs: 39.7833
2024-04-30 19:59:07 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #134: GFLOPs: 14.9669. Time: 127.2571 us. Best GFLOPs: 39.7833
2024-04-30 19:59:07 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #135: GFLOPs: 13.1297. Time: 145.0634 us. Best GFLOPs: 39.7833
2024-04-30 19:59:07 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #136: GFLOPs: 11.0808. Time: 171.8866 us. Best GFLOPs: 39.7833
2024-04-30 19:59:07 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #137: GFLOPs: 10.8654. Time: 175.2941 us. Best GFLOPs: 39.7833
2024-04-30 19:59:07 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #138: GFLOPs: 15.0938. Time: 126.1866 us. Best GFLOPs: 39.7833
2024-04-30 19:59:07 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #139: GFLOPs: 14.3069. Time: 133.1272 us. Best GFLOPs: 39.7833
2024-04-30 19:59:07 [INFO] [task_scheduler.cc:121] [Task #18: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #140: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(4), T.int64(4), T.int64(128)), "float32"), p1: T.Buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(128)), "float32"), p2: T.Buffer((T.int64(1), T.int64(1), T.int64(1), T.int64(128)), "float32"), p3: T.Buffer((T.int64(1), T.int64(1), T.int64(1), T.int64(128)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(4), T.int64(4), T.int64(128)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(6), T.int64(6), T.int64(128)))
        input_tile = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(1), T.int64(128)))
        data_pack = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(1), T.int64(128)))
        bgemm = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(1), T.int64(128)))
        inverse = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(1), T.int64(128)))
        bgemm_global = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(1), T.int64(128)))
        p1_global = T.alloc_buffer((T.int64(3), T.int64(16), T.int64(8), T.int64(2), T.int64(6), T.int64(2), T.int64(16), T.int64(4)))
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(6), T.int64(6), T.int64(128), T.int64(128)):
            with T.block("p1_global"):
                v0, v1, v2, v3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(p1[v0, v1, v2, v3])
                T.writes(p1_global[v0 // T.int64(2), v2 // T.int64(8), v3 // T.int64(16), v0 % T.int64(2), v1, v2 % T.int64(8) // T.int64(4), v3 % T.int64(16), v2 % T.int64(4)])
                T.block_attr({"meta_schedule.layout_rewrite_preproc": T.bool(True)})
                p1_global[v0 // T.int64(2), v2 // T.int64(8), v3 // T.int64(16), v0 % T.int64(2), v1, v2 % T.int64(8) // T.int64(4), v3 % T.int64(16), v2 % T.int64(4)] = p1[v0, v1, v2, v3]
        for p_0_ci_0_fused_fused_fused in T.parallel(T.int64(128), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for p_1, ci_1 in T.grid(T.int64(1), T.int64(1)):
                for eps in T.unroll(T.int64(6)):
                    for ax0 in range(T.int64(6)):
                        for ax0_1, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(6), T.int64(1)):
                            with T.block("data_pad"):
                                v_i0 = T.axis.spatial(T.int64(1), ax0_1)
                                v_i1 = T.axis.spatial(T.int64(6), ax0 + ax1)
                                v_i2 = T.axis.spatial(T.int64(6), ax2)
                                v_i3 = T.axis.spatial(T.int64(128), p_0_ci_0_fused_fused_fused + ax3)
                                T.reads(p0[v_i0, v_i1 - T.int64(1), v_i2 - T.int64(1), v_i3])
                                T.writes(data_pad[v_i0, v_i1, v_i2, v_i3])
                                T.block_attr({"schedule_rule": "None"})
                                data_pad[v_i0, v_i1, v_i2, v_i3] = T.if_then_else(T.int64(1) <= v_i1 and v_i1 < T.int64(5) and T.int64(1) <= v_i2 and v_i2 < T.int64(5), p0[v_i0, v_i1 - T.int64(1), v_i2 - T.int64(1), v_i3], T.float32(0))
                        for ax1, ax2, ax3 in T.grid(T.int64(6), T.int64(1), T.int64(1)):
                            with T.block("input_tile"):
                                v_eps, v_nu, v_p = T.axis.remap("SSS", [ax0, ax1, ax2])
                                v_ci = T.axis.spatial(T.int64(128), p_0_ci_0_fused_fused_fused + ax3)
                                T.reads(data_pad[v_p, v_eps, v_nu, v_ci])
                                T.writes(input_tile[v_eps, v_nu, v_p, v_ci])
                                T.block_attr({"schedule_rule": "None"})
                                input_tile[v_eps, v_nu, v_p, v_ci] = data_pad[v_p, v_eps, v_nu, v_ci]
                    for nu in T.unroll(T.int64(6)):
                        with T.block("data_pack_init"):
                            v_eps, v_nu, v_p = T.axis.remap("SSS", [eps, nu, p_1])
                            v_ci = T.axis.spatial(T.int64(128), p_0_ci_0_fused_fused_fused + ci_1)
                            T.reads()
                            T.writes(data_pack[v_eps, v_nu, v_p, v_ci])
                            T.block_attr({"schedule_rule": "conv2d_nhwc_winograd_data_pack"})
                            data_pack[v_eps, v_nu, v_p, v_ci] = T.float32(0)
                        for r_a in T.unroll(T.int64(6)):
                            for r_b in T.unroll(T.int64(6)):
                                with T.block("data_pack_update"):
                                    v_eps, v_nu, v_p = T.axis.remap("SSS", [eps, nu, p_1])
                                    v_ci = T.axis.spatial(T.int64(128), p_0_ci_0_fused_fused_fused + ci_1)
                                    v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                    T.reads(data_pack[v_eps, v_nu, v_p, v_ci], input_tile[v_r_a, v_r_b, v_p, v_ci])
                                    T.writes(data_pack[v_eps, v_nu, v_p, v_ci])
                                    T.block_attr({"schedule_rule": "conv2d_nhwc_winograd_data_pack"})
                                    data_pack[v_eps, v_nu, v_p, v_ci] = data_pack[v_eps, v_nu, v_p, v_ci] + input_tile[v_r_a, v_r_b, v_p, v_ci] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))))))))))))))
        for eps_0_nu_0_p_0_co_0_eps_1_nu_1_p_1_co_1_fused in T.parallel(T.int64(48), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for eps_2_init, nu_2_init, p_2_init, co_2_init, eps_3_init, nu_3_init, p_3_init in T.grid(T.int64(2), T.int64(6), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1)):
                for co_3_fused_init in T.vectorized(T.int64(4)):
                    with T.block("bgemm_init"):
                        v_eps = T.axis.spatial(T.int64(6), eps_0_nu_0_p_0_co_0_eps_1_nu_1_p_1_co_1_fused // T.int64(16) * T.int64(2) + eps_2_init + eps_3_init)
                        v_nu = T.axis.spatial(T.int64(6), nu_2_init + nu_3_init)
                        v_p = T.axis.spatial(T.int64(1), p_2_init + p_3_init)
                        v_co = T.axis.spatial(T.int64(128), eps_0_nu_0_p_0_co_0_eps_1_nu_1_p_1_co_1_fused % T.int64(16) * T.int64(8) + co_2_init * T.int64(4) + co_3_fused_init)
                        T.reads()
                        T.writes(bgemm_global[v_eps, v_nu, v_p, v_co])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS", "meta_schedule.write_cache_level": [2]})
                        bgemm_global[v_eps, v_nu, v_p, v_co] = T.float32(0)
            for ci_0, eps_2, nu_2, p_2, co_2, ci_1, eps_3, nu_3, p_3 in T.grid(T.int64(8), T.int64(2), T.int64(6), T.int64(1), T.int64(2), T.int64(16), T.int64(1), T.int64(1), T.int64(1)):
                for co_3_fused in T.vectorized(T.int64(4)):
                    with T.block("bgemm_update"):
                        v_eps = T.axis.spatial(T.int64(6), eps_0_nu_0_p_0_co_0_eps_1_nu_1_p_1_co_1_fused // T.int64(16) * T.int64(2) + eps_2 + eps_3)
                        v_nu = T.axis.spatial(T.int64(6), nu_2 + nu_3)
                        v_p = T.axis.spatial(T.int64(1), p_2 + p_3)
                        v_co = T.axis.spatial(T.int64(128), eps_0_nu_0_p_0_co_0_eps_1_nu_1_p_1_co_1_fused % T.int64(16) * T.int64(8) + co_2 * T.int64(4) + co_3_fused)
                        v_ci = T.axis.reduce(T.int64(128), ci_0 * T.int64(16) + ci_1)
                        T.reads(bgemm_global[v_eps, v_nu, v_p, v_co], data_pack[v_eps, v_nu, v_p, v_ci], p1_global[v_eps // T.int64(2), v_co // T.int64(8), v_ci // T.int64(16), v_eps % T.int64(2), v_nu, v_co % T.int64(8) // T.int64(4), v_ci % T.int64(16), v_co % T.int64(4)])
                        T.writes(bgemm_global[v_eps, v_nu, v_p, v_co])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS", "meta_schedule.write_cache_level": [2]})
                        bgemm_global[v_eps, v_nu, v_p, v_co] = bgemm_global[v_eps, v_nu, v_p, v_co] + data_pack[v_eps, v_nu, v_p, v_ci] * p1_global[v_eps // T.int64(2), v_co // T.int64(8), v_ci // T.int64(16), v_eps % T.int64(2), v_nu, v_co % T.int64(8) // T.int64(4), v_ci % T.int64(16), v_co % T.int64(4)]
            for ax0, ax1, ax2 in T.grid(T.int64(2), T.int64(6), T.int64(1)):
                for ax3_fused in T.vectorized(T.int64(8)):
                    with T.block("bgemm_global"):
                        v0 = T.axis.spatial(T.int64(6), eps_0_nu_0_p_0_co_0_eps_1_nu_1_p_1_co_1_fused // T.int64(16) * T.int64(2) + ax0)
                        v1, v2 = T.axis.remap("SS", [ax1, ax2])
                        v3 = T.axis.spatial(T.int64(128), eps_0_nu_0_p_0_co_0_eps_1_nu_1_p_1_co_1_fused % T.int64(16) * T.int64(8) + ax3_fused)
                        T.reads(bgemm_global[v0, v1, v2, v3])
                        T.writes(bgemm[v0, v1, v2, v3])
                        bgemm[v0, v1, v2, v3] = bgemm_global[v0, v1, v2, v3]
        for p_0_co_0_p_1_co_1_fused in T.parallel(T.int64(128), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for vh in T.unroll(T.int64(4)):
                for vw in T.unroll(T.int64(4)):
                    with T.block("inverse_init"):
                        v_vh, v_vw = T.axis.remap("SS", [vh, vw])
                        v_p = T.axis.spatial(T.int64(1), T.int64(0))
                        v_co = T.axis.spatial(T.int64(128), p_0_co_0_p_1_co_1_fused)
                        T.reads()
                        T.writes(inverse[v_vh, v_vw, v_p, v_co])
                        T.block_attr({"schedule_rule": "conv2d_nhwc_winograd_inverse"})
                        inverse[v_vh, v_vw, v_p, v_co] = T.float32(0)
                    for r_a in T.unroll(T.int64(6)):
                        for r_b in T.unroll(T.int64(6)):
                            with T.block("inverse_update"):
                                v_vh, v_vw = T.axis.remap("SS", [vh, vw])
                                v_p = T.axis.spatial(T.int64(1), T.int64(0))
                                v_co, v_r_a, v_r_b = T.axis.remap("SRR", [p_0_co_0_p_1_co_1_fused, r_a, r_b])
                                T.reads(inverse[v_vh, v_vw, v_p, v_co], bgemm[v_r_a, v_r_b, v_p, v_co])
                                T.writes(inverse[v_vh, v_vw, v_p, v_co])
                                T.block_attr({"schedule_rule": "conv2d_nhwc_winograd_inverse"})
                                inverse[v_vh, v_vw, v_p, v_co] = inverse[v_vh, v_vw, v_p, v_co] + bgemm[v_r_a, v_r_b, v_p, v_co] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))
        for ax0_ax1_ax2_ax3_fused_0 in T.parallel(T.int64(32)):
            for ax0_ax1_ax2_ax3_fused_1 in T.vectorized(T.int64(64)):
                with T.block("T_relu"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused_1) // T.int64(512))
                    v_ax2 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused_1) % T.int64(512) // T.int64(128))
                    v_ax3 = T.axis.spatial(T.int64(128), (ax0_ax1_ax2_ax3_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused_1) % T.int64(128))
                    T.reads(inverse[v_ax1 % T.int64(4), v_ax2 % T.int64(4), v_ax1 // T.int64(4) + v_ax2 // T.int64(4) + v_ax0, v_ax3], p2[v_ax0, T.int64(0), T.int64(0), v_ax3], p3[v_ax0, T.int64(0), T.int64(0), v_ax3])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(inverse[v_ax1 % T.int64(4), v_ax2 % T.int64(4), v_ax1 // T.int64(4) + v_ax2 // T.int64(4) + v_ax0, v_ax3] + p2[v_ax0, T.int64(0), T.int64(0), v_ax3] + p3[v_ax0, T.int64(0), T.int64(0), v_ax3], T.float32(0))
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="T_add", func_name="main")
b5 = sch.get_block(name="T_add_1", func_name="main")
b6 = sch.get_block(name="root", func_name="main")
b7, b8 = sch.get_producers(block=b2)
sch.compute_inline(block=b8)
l9, l10, l11, l12, l13, l14 = sch.get_loops(block=b2)
v15, v16 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 1])
l17, l18 = sch.split(loop=l11, factors=[v15, v16], preserve_unit_iters=True, disable_predication=False)
v19, v20 = sch.sample_perfect_tile(loop=l12, n=2, max_innermost_factor=64, decision=[4, 32])
l21, l22 = sch.split(loop=l12, factors=[v19, v20], preserve_unit_iters=True, disable_predication=False)
sch.unroll(loop=l9)
sch.unroll(loop=l10)
sch.unroll(loop=l13)
sch.unroll(loop=l14)
sch.reorder(l17, l21, l18, l22, l9, l10, l13, l14)
b23, b24 = sch.get_producers(block=b0)
sch.compute_inline(block=b24)
b25, = sch.get_producers(block=b23)
l26, l27, l28, l29, l30, l31 = sch.get_loops(block=b0)
v32, v33 = sch.sample_perfect_tile(loop=l28, n=2, max_innermost_factor=64, decision=[1, 1])
l34, l35 = sch.split(loop=l28, factors=[v32, v33], preserve_unit_iters=True, disable_predication=False)
v36, v37 = sch.sample_perfect_tile(loop=l29, n=2, max_innermost_factor=64, decision=[128, 1])
l38, l39 = sch.split(loop=l29, factors=[v36, v37], preserve_unit_iters=True, disable_predication=False)
sch.unroll(loop=l26)
sch.unroll(loop=l27)
sch.unroll(loop=l30)
sch.unroll(loop=l31)
sch.reorder(l34, l38, l35, l39, l26, l27, l30, l31)
l40 = sch.sample_compute_location(block=b23, decision=4)
sch.compute_at(block=b23, loop=l40, preserve_unit_loops=True, index=-1)
l41 = sch.sample_compute_location(block=b25, decision=5)
sch.compute_at(block=b25, loop=l41, preserve_unit_loops=True, index=-1)
sch.compute_inline(block=b5)
sch.compute_inline(block=b4)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l42, l43, l44, l45, l46 = sch.get_loops(block=b1)
v47, v48, v49, v50 = sch.sample_perfect_tile(loop=l42, n=4, max_innermost_factor=64, decision=[3, 1, 2, 1])
l51, l52, l53, l54 = sch.split(loop=l42, factors=[v47, v48, v49, v50], preserve_unit_iters=True, disable_predication=False)
v55, v56, v57, v58 = sch.sample_perfect_tile(loop=l43, n=4, max_innermost_factor=64, decision=[1, 1, 6, 1])
l59, l60, l61, l62 = sch.split(loop=l43, factors=[v55, v56, v57, v58], preserve_unit_iters=True, disable_predication=False)
v63, v64, v65, v66 = sch.sample_perfect_tile(loop=l44, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l67, l68, l69, l70 = sch.split(loop=l44, factors=[v63, v64, v65, v66], preserve_unit_iters=True, disable_predication=False)
v71, v72, v73, v74 = sch.sample_perfect_tile(loop=l45, n=4, max_innermost_factor=64, decision=[2, 8, 2, 4])
l75, l76, l77, l78 = sch.split(loop=l45, factors=[v71, v72, v73, v74], preserve_unit_iters=True, disable_predication=False)
v79, v80 = sch.sample_perfect_tile(loop=l46, n=2, max_innermost_factor=64, decision=[8, 16])
l81, l82 = sch.split(loop=l46, factors=[v79, v80], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l51, l59, l67, l75, l52, l60, l68, l76, l81, l53, l61, l69, l77, l82, l54, l62, l70, l78)
b83 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="global")
sch.reverse_compute_at(block=b83, loop=l76, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.parallel", ann_val=96)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.vectorize", ann_val=64)
v84 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.unroll_explicit", ann_val=v84)
l85 = sch.sample_compute_location(block=b3, decision=-2)
sch.compute_at(block=b3, loop=l85, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b86 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b86, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b86, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b86, ann_key="meta_schedule.unroll_explicit")
b87, b88, b89, b90, b91, b92, b93 = sch.get_child_blocks(b86)
l94, l95, l96, l97, l98, l99, l100, l101, l102, l103 = sch.get_loops(block=b87)
l104 = sch.fuse(l94, l95, preserve_unit_iters=True)
sch.parallel(loop=l104)
l105, l106, l107, l108, l109, l110, l111, l112 = sch.get_loops(block=b88)
l113 = sch.fuse(l105, preserve_unit_iters=True)
sch.parallel(loop=l113)
l114, l115, l116, l117, l118, l119, l120 = sch.get_loops(block=b89)
l121 = sch.fuse(l114, preserve_unit_iters=True)
sch.parallel(loop=l121)
sch.annotate(block_or_loop=l121, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l121, ann_key="pragma_unroll_explicit", ann_val=1)
l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133, l134, l135, l136, l137, l138, l139 = sch.get_loops(block=b90)
l140 = sch.fuse(l122, l123, l124, l125, l126, l127, l128, l129, preserve_unit_iters=True)
sch.parallel(loop=l140)
l141 = sch.fuse(l139, preserve_unit_iters=True)
sch.vectorize(loop=l141)
sch.annotate(block_or_loop=l140, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l140, ann_key="pragma_unroll_explicit", ann_val=1)
l142, l143, l144, l145, l146 = sch.get_loops(block=b91)
l147 = sch.fuse(l146, preserve_unit_iters=True)
sch.vectorize(loop=l147)
l148, l149, l150, l151, l152, l153, l154, l155 = sch.get_loops(block=b92)
l156 = sch.fuse(l148, l149, l150, l151, preserve_unit_iters=True)
sch.parallel(loop=l156)
sch.annotate(block_or_loop=l156, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l156, ann_key="pragma_unroll_explicit", ann_val=1)
l157, l158, l159, l160 = sch.get_loops(block=b93)
l161 = sch.fuse(l157, l158, l159, l160, preserve_unit_iters=True)
l162, l163 = sch.split(loop=l161, factors=[None, 64], preserve_unit_iters=True, disable_predication=False)
sch.parallel(loop=l162)
sch.vectorize(loop=l163)
b164 = sch.get_block(name="data_pack", func_name="main")
l165, l166, l167, l168, l169, l170, l171 = sch.get_loops(block=b164)
b172 = sch.decompose_reduction(block=b164, loop=l170)
b173 = sch.get_block(name="bgemm", func_name="main")
l174, l175, l176, l177, l178, l179, l180, l181, l182, l183, l184 = sch.get_loops(block=b173)
b185 = sch.decompose_reduction(block=b173, loop=l175)
b186 = sch.get_block(name="inverse", func_name="main")
l187, l188, l189, l190, l191 = sch.get_loops(block=b186)
b192 = sch.decompose_reduction(block=b186, loop=l190)
b193 = sch.get_block(name="bgemm_update", func_name="main")
b194 = sch.cache_read(block=b193, read_buffer_index=2, storage_scope="global")
sch.annotate(block_or_loop=b194, ann_key="meta_schedule.layout_rewrite_preproc", ann_val=1)
sch.transform_layout(block=b193, buffer=("read", 2), index_map=tvm.tir.IndexMap.from_func(lambda i0, i1, i2, i3: (T.Cast("int64", i0) // T.int64(2), T.Cast("int64", i2) // T.int64(8), T.Cast("int64", i3) // T.int64(16), T.Cast("int64", i0) % T.int64(2), T.Cast("int64", i1), T.Cast("int64", i2) % T.int64(8) // T.int64(4), T.Cast("int64", i3) % T.int64(16), T.Cast("int64", i2) % T.int64(4),), inverse_index_map=lambda i0, i1, i2, i3, i4, i5, i6, i7: (T.Cast("int64", i0) * T.int64(2) + T.Cast("int64", i3), T.Cast("int64", i4), T.Cast("int64", i1) * T.int64(8) + T.Cast("int64", i5) * T.int64(4) + T.Cast("int64", i7), T.Cast("int64", i2) * T.int64(16) + T.Cast("int64", i6),)), pad_value=None, assume_injective_transform=False)
2024-04-30 19:59:07 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #141: GFLOPs: 13.4544. Time: 141.5622 us. Best GFLOPs: 39.7833
2024-04-30 19:59:07 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #142: GFLOPs: 13.9615. Time: 136.4212 us. Best GFLOPs: 39.7833
2024-04-30 19:59:07 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #143: GFLOPs: 15.9109. Time: 119.7064 us. Best GFLOPs: 39.7833
2024-04-30 19:59:07 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #144: GFLOPs: 12.4883. Time: 152.5136 us. Best GFLOPs: 39.7833
2024-04-30 19:59:07 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #145: GFLOPs: 13.6670. Time: 139.3601 us. Best GFLOPs: 39.7833
2024-04-30 19:59:07 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #146: GFLOPs: 11.5594. Time: 164.7694 us. Best GFLOPs: 39.7833
2024-04-30 19:59:07 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #147: GFLOPs: 16.7470. Time: 113.7301 us. Best GFLOPs: 39.7833
2024-04-30 19:59:07 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #148: GFLOPs: 15.3390. Time: 124.1699 us. Best GFLOPs: 39.7833
2024-04-30 19:59:07 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #149: GFLOPs: 8.7430. Time: 217.8473 us. Best GFLOPs: 39.7833
2024-04-30 19:59:07 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #150: GFLOPs: 10.2985. Time: 184.9429 us. Best GFLOPs: 39.7833
2024-04-30 19:59:07 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #151: GFLOPs: 12.4771. Time: 152.6506 us. Best GFLOPs: 39.7833
2024-04-30 19:59:07 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #152: GFLOPs: 11.2708. Time: 168.9892 us. Best GFLOPs: 39.7833
2024-04-30 19:59:07 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #153: GFLOPs: 9.9580. Time: 191.2675 us. Best GFLOPs: 39.7833
2024-04-30 19:59:07 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #154: GFLOPs: 10.8919. Time: 174.8679 us. Best GFLOPs: 39.7833
2024-04-30 19:59:07 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #155: GFLOPs: 10.3558. Time: 183.9206 us. Best GFLOPs: 39.7833
2024-04-30 19:59:07 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #156: GFLOPs: 8.6594. Time: 219.9505 us. Best GFLOPs: 39.7833
2024-04-30 19:59:07 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #157: GFLOPs: 10.4375. Time: 182.4813 us. Best GFLOPs: 39.7833
2024-04-30 19:59:07 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #158: GFLOPs: 10.2257. Time: 186.2599 us. Best GFLOPs: 39.7833
2024-04-30 19:59:07 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #159: GFLOPs: 10.7529. Time: 177.1285 us. Best GFLOPs: 39.7833
2024-04-30 19:59:07 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #160: GFLOPs: 10.6112. Time: 179.4928 us. Best GFLOPs: 39.7833
2024-04-30 19:59:07 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #161: GFLOPs: 6.2471. Time: 304.8831 us. Best GFLOPs: 39.7833
2024-04-30 19:59:07 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #162: GFLOPs: 10.9601. Time: 173.7790 us. Best GFLOPs: 39.7833
2024-04-30 19:59:07 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #163: GFLOPs: 10.7711. Time: 176.8282 us. Best GFLOPs: 39.7833
2024-04-30 19:59:07 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #164: GFLOPs: 9.6820. Time: 196.7191 us. Best GFLOPs: 39.7833
2024-04-30 19:59:07 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #165: GFLOPs: 7.1491. Time: 266.4175 us. Best GFLOPs: 39.7833
2024-04-30 19:59:07 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #166: GFLOPs: 7.6268. Time: 249.7293 us. Best GFLOPs: 39.7833
2024-04-30 19:59:07 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #167: GFLOPs: 8.3050. Time: 229.3354 us. Best GFLOPs: 39.7833
2024-04-30 19:59:07 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #168: GFLOPs: 5.5380. Time: 343.9212 us. Best GFLOPs: 39.7833
2024-04-30 19:59:07 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #169: GFLOPs: 7.5710. Time: 251.5713 us. Best GFLOPs: 39.7833
2024-04-30 19:59:07 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #170: GFLOPs: 9.1520. Time: 208.1115 us. Best GFLOPs: 39.7833
2024-04-30 19:59:07 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #171: GFLOPs: 9.8469. Time: 193.4246 us. Best GFLOPs: 39.7833
2024-04-30 19:59:07 [INFO] [task_scheduler.cc:121] [Task #18: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #172: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(4), T.int64(4), T.int64(128)), "float32"), p1: T.Buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(128)), "float32"), p2: T.Buffer((T.int64(1), T.int64(1), T.int64(1), T.int64(128)), "float32"), p3: T.Buffer((T.int64(1), T.int64(1), T.int64(1), T.int64(128)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(4), T.int64(4), T.int64(128)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        input_tile = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(1), T.int64(128)))
        data_pack = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(1), T.int64(128)))
        bgemm = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(1), T.int64(128)))
        inverse = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(1), T.int64(128)))
        conv2d_winograd = T.alloc_buffer((T.int64(1), T.int64(4), T.int64(4), T.int64(128)))
        bgemm_global = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(1), T.int64(128)))
        p1_global = T.alloc_buffer((T.int64(3), T.int64(8), T.int64(32), T.int64(2), T.int64(6), T.int64(16), T.int64(4)))
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(6), T.int64(6), T.int64(128), T.int64(128)):
            with T.block("p1_global"):
                v0, v1, v2, v3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(p1[v0, v1, v2, v3])
                T.writes(p1_global[v0 // T.int64(2), v2 // T.int64(16), v3 // T.int64(4), v0 % T.int64(2), v1, v2 % T.int64(16), v3 % T.int64(4)])
                T.block_attr({"meta_schedule.layout_rewrite_preproc": T.bool(True)})
                p1_global[v0 // T.int64(2), v2 // T.int64(16), v3 // T.int64(4), v0 % T.int64(2), v1, v2 % T.int64(16), v3 % T.int64(4)] = p1[v0, v1, v2, v3]
        for p_0_ci_0_fused_fused in T.parallel(T.int64(32), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2 in T.grid(T.int64(6), T.int64(6), T.int64(1)):
                for ax3_fused in T.vectorized(T.int64(4)):
                    with T.block("input_tile"):
                        v_eps, v_nu, v_p = T.axis.remap("SSS", [ax0, ax1, ax2])
                        v_ci = T.axis.spatial(T.int64(128), p_0_ci_0_fused_fused * T.int64(4) + ax3_fused)
                        T.reads(p0[v_p, v_eps - T.int64(1), v_nu - T.int64(1), v_ci])
                        T.writes(input_tile[v_eps, v_nu, v_p, v_ci])
                        T.block_attr({"schedule_rule": "None"})
                        input_tile[v_eps, v_nu, v_p, v_ci] = T.if_then_else(T.int64(1) <= v_eps and v_eps < T.int64(5) and T.int64(1) <= v_nu and v_nu < T.int64(5), p0[v_p, v_eps - T.int64(1), v_nu - T.int64(1), v_ci], T.float32(0))
            for p_1, ci_1 in T.grid(T.int64(1), T.int64(4)):
                for eps in T.unroll(T.int64(6)):
                    for nu in T.unroll(T.int64(6)):
                        with T.block("data_pack_init"):
                            v_eps, v_nu, v_p = T.axis.remap("SSS", [eps, nu, p_1])
                            v_ci = T.axis.spatial(T.int64(128), p_0_ci_0_fused_fused * T.int64(4) + ci_1)
                            T.reads()
                            T.writes(data_pack[v_eps, v_nu, v_p, v_ci])
                            T.block_attr({"schedule_rule": "conv2d_nhwc_winograd_data_pack"})
                            data_pack[v_eps, v_nu, v_p, v_ci] = T.float32(0)
                        for r_a in T.unroll(T.int64(6)):
                            for r_b in T.unroll(T.int64(6)):
                                with T.block("data_pack_update"):
                                    v_eps, v_nu, v_p = T.axis.remap("SSS", [eps, nu, p_1])
                                    v_ci = T.axis.spatial(T.int64(128), p_0_ci_0_fused_fused * T.int64(4) + ci_1)
                                    v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                    T.reads(data_pack[v_eps, v_nu, v_p, v_ci], input_tile[v_r_a, v_r_b, v_p, v_ci])
                                    T.writes(data_pack[v_eps, v_nu, v_p, v_ci])
                                    T.block_attr({"schedule_rule": "conv2d_nhwc_winograd_data_pack"})
                                    data_pack[v_eps, v_nu, v_p, v_ci] = data_pack[v_eps, v_nu, v_p, v_ci] + input_tile[v_r_a, v_r_b, v_p, v_ci] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))))))))))))))
        for eps_0_nu_0_p_0_co_0_eps_1_nu_1_p_1_co_1_fused in T.parallel(T.int64(24), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for eps_2_init, nu_2_init, p_2_init, co_2_init, eps_3_init, nu_3_init, p_3_init, co_3_init in T.grid(T.int64(2), T.int64(6), T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                with T.block("bgemm_init"):
                    v_eps = T.axis.spatial(T.int64(6), eps_0_nu_0_p_0_co_0_eps_1_nu_1_p_1_co_1_fused // T.int64(8) * T.int64(2) + eps_2_init + eps_3_init)
                    v_nu = T.axis.spatial(T.int64(6), nu_2_init + nu_3_init)
                    v_p = T.axis.spatial(T.int64(1), p_2_init + p_3_init)
                    v_co = T.axis.spatial(T.int64(128), eps_0_nu_0_p_0_co_0_eps_1_nu_1_p_1_co_1_fused % T.int64(8) * T.int64(16) + co_2_init + co_3_init)
                    T.reads()
                    T.writes(bgemm_global[v_eps, v_nu, v_p, v_co])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS", "meta_schedule.write_cache_level": [2]})
                    bgemm_global[v_eps, v_nu, v_p, v_co] = T.float32(0)
            for ci_0, eps_2, nu_2, p_2, co_2, ci_1, eps_3, nu_3, p_3, co_3 in T.grid(T.int64(32), T.int64(2), T.int64(6), T.int64(1), T.int64(16), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                with T.block("bgemm_update"):
                    v_eps = T.axis.spatial(T.int64(6), eps_0_nu_0_p_0_co_0_eps_1_nu_1_p_1_co_1_fused // T.int64(8) * T.int64(2) + eps_2 + eps_3)
                    v_nu = T.axis.spatial(T.int64(6), nu_2 + nu_3)
                    v_p = T.axis.spatial(T.int64(1), p_2 + p_3)
                    v_co = T.axis.spatial(T.int64(128), eps_0_nu_0_p_0_co_0_eps_1_nu_1_p_1_co_1_fused % T.int64(8) * T.int64(16) + co_2 + co_3)
                    v_ci = T.axis.reduce(T.int64(128), ci_0 * T.int64(4) + ci_1)
                    T.reads(bgemm_global[v_eps, v_nu, v_p, v_co], data_pack[v_eps, v_nu, v_p, v_ci], p1_global[v_eps // T.int64(2), v_co // T.int64(16), v_ci // T.int64(4), v_eps % T.int64(2), v_nu, v_co % T.int64(16), v_ci % T.int64(4)])
                    T.writes(bgemm_global[v_eps, v_nu, v_p, v_co])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS", "meta_schedule.write_cache_level": [2]})
                    bgemm_global[v_eps, v_nu, v_p, v_co] = bgemm_global[v_eps, v_nu, v_p, v_co] + data_pack[v_eps, v_nu, v_p, v_ci] * p1_global[v_eps // T.int64(2), v_co // T.int64(16), v_ci // T.int64(4), v_eps % T.int64(2), v_nu, v_co % T.int64(16), v_ci % T.int64(4)]
            for ax0, ax1, ax2 in T.grid(T.int64(2), T.int64(6), T.int64(1)):
                for ax3_fused in T.vectorized(T.int64(16)):
                    with T.block("bgemm_global"):
                        v0 = T.axis.spatial(T.int64(6), eps_0_nu_0_p_0_co_0_eps_1_nu_1_p_1_co_1_fused // T.int64(8) * T.int64(2) + ax0)
                        v1, v2 = T.axis.remap("SS", [ax1, ax2])
                        v3 = T.axis.spatial(T.int64(128), eps_0_nu_0_p_0_co_0_eps_1_nu_1_p_1_co_1_fused % T.int64(8) * T.int64(16) + ax3_fused)
                        T.reads(bgemm_global[v0, v1, v2, v3])
                        T.writes(bgemm[v0, v1, v2, v3])
                        bgemm[v0, v1, v2, v3] = bgemm_global[v0, v1, v2, v3]
        for p_0_co_0_p_1_co_1_fused in T.parallel(T.int64(128), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for vh in T.unroll(T.int64(4)):
                for vw in T.unroll(T.int64(4)):
                    with T.block("inverse_init"):
                        v_vh, v_vw = T.axis.remap("SS", [vh, vw])
                        v_p = T.axis.spatial(T.int64(1), T.int64(0))
                        v_co = T.axis.spatial(T.int64(128), p_0_co_0_p_1_co_1_fused)
                        T.reads()
                        T.writes(inverse[v_vh, v_vw, v_p, v_co])
                        T.block_attr({"schedule_rule": "conv2d_nhwc_winograd_inverse"})
                        inverse[v_vh, v_vw, v_p, v_co] = T.float32(0)
                    for r_a in T.unroll(T.int64(6)):
                        for r_b in T.unroll(T.int64(6)):
                            with T.block("inverse_update"):
                                v_vh, v_vw = T.axis.remap("SS", [vh, vw])
                                v_p = T.axis.spatial(T.int64(1), T.int64(0))
                                v_co, v_r_a, v_r_b = T.axis.remap("SRR", [p_0_co_0_p_1_co_1_fused, r_a, r_b])
                                T.reads(inverse[v_vh, v_vw, v_p, v_co], bgemm[v_r_a, v_r_b, v_p, v_co])
                                T.writes(inverse[v_vh, v_vw, v_p, v_co])
                                T.block_attr({"schedule_rule": "conv2d_nhwc_winograd_inverse"})
                                inverse[v_vh, v_vw, v_p, v_co] = inverse[v_vh, v_vw, v_p, v_co] + bgemm[v_r_a, v_r_b, v_p, v_co] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))
        for ax0_ax1_ax2_ax3_fused_fused in T.parallel(T.int64(2048)):
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                with T.block("conv2d_winograd"):
                    v_n = T.axis.spatial(T.int64(1), ax0)
                    v_h = T.axis.spatial(T.int64(4), ax0_ax1_ax2_ax3_fused_fused // T.int64(512) + ax1)
                    v_w = T.axis.spatial(T.int64(4), ax0_ax1_ax2_ax3_fused_fused % T.int64(512) // T.int64(128) + ax2)
                    v_co = T.axis.spatial(T.int64(128), ax0_ax1_ax2_ax3_fused_fused % T.int64(128) + ax3)
                    T.reads(inverse[v_h % T.int64(4), v_w % T.int64(4), v_h // T.int64(4) + v_w // T.int64(4) + v_n, v_co])
                    T.writes(conv2d_winograd[v_n, v_h, v_w, v_co])
                    conv2d_winograd[v_n, v_h, v_w, v_co] = inverse[v_h % T.int64(4), v_w % T.int64(4), v_h // T.int64(4) + v_w // T.int64(4) + v_n, v_co]
            with T.block("T_relu"):
                v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                v_ax1 = T.axis.spatial(T.int64(4), ax0_ax1_ax2_ax3_fused_fused // T.int64(512))
                v_ax2 = T.axis.spatial(T.int64(4), ax0_ax1_ax2_ax3_fused_fused % T.int64(512) // T.int64(128))
                v_ax3 = T.axis.spatial(T.int64(128), ax0_ax1_ax2_ax3_fused_fused % T.int64(128))
                T.reads(conv2d_winograd[v_ax0, v_ax1, v_ax2, v_ax3], p2[v_ax0, T.int64(0), T.int64(0), v_ax3], p3[v_ax0, T.int64(0), T.int64(0), v_ax3])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(conv2d_winograd[v_ax0, v_ax1, v_ax2, v_ax3] + p2[v_ax0, T.int64(0), T.int64(0), v_ax3] + p3[v_ax0, T.int64(0), T.int64(0), v_ax3], T.float32(0))
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="T_add", func_name="main")
b5 = sch.get_block(name="T_add_1", func_name="main")
b6 = sch.get_block(name="root", func_name="main")
b7, b8 = sch.get_producers(block=b2)
sch.compute_inline(block=b8)
l9, l10, l11, l12, l13, l14 = sch.get_loops(block=b2)
v15, v16 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 1])
l17, l18 = sch.split(loop=l11, factors=[v15, v16], preserve_unit_iters=True, disable_predication=False)
v19, v20 = sch.sample_perfect_tile(loop=l12, n=2, max_innermost_factor=64, decision=[16, 8])
l21, l22 = sch.split(loop=l12, factors=[v19, v20], preserve_unit_iters=True, disable_predication=False)
sch.unroll(loop=l9)
sch.unroll(loop=l10)
sch.unroll(loop=l13)
sch.unroll(loop=l14)
sch.reorder(l17, l21, l18, l22, l9, l10, l13, l14)
b23, b24 = sch.get_producers(block=b0)
sch.compute_inline(block=b24)
b25, = sch.get_producers(block=b23)
l26, l27, l28, l29, l30, l31 = sch.get_loops(block=b0)
v32, v33 = sch.sample_perfect_tile(loop=l28, n=2, max_innermost_factor=64, decision=[1, 1])
l34, l35 = sch.split(loop=l28, factors=[v32, v33], preserve_unit_iters=True, disable_predication=False)
v36, v37 = sch.sample_perfect_tile(loop=l29, n=2, max_innermost_factor=64, decision=[32, 4])
l38, l39 = sch.split(loop=l29, factors=[v36, v37], preserve_unit_iters=True, disable_predication=False)
sch.unroll(loop=l26)
sch.unroll(loop=l27)
sch.unroll(loop=l30)
sch.unroll(loop=l31)
sch.reorder(l34, l38, l35, l39, l26, l27, l30, l31)
l40 = sch.sample_compute_location(block=b23, decision=1)
sch.compute_at(block=b23, loop=l40, preserve_unit_loops=True, index=-1)
l41 = sch.sample_compute_location(block=b25, decision=-2)
sch.compute_at(block=b25, loop=l41, preserve_unit_loops=True, index=-1)
sch.compute_inline(block=b5)
sch.compute_inline(block=b4)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l42, l43, l44, l45, l46 = sch.get_loops(block=b1)
v47, v48, v49, v50 = sch.sample_perfect_tile(loop=l42, n=4, max_innermost_factor=64, decision=[1, 3, 2, 1])
l51, l52, l53, l54 = sch.split(loop=l42, factors=[v47, v48, v49, v50], preserve_unit_iters=True, disable_predication=False)
v55, v56, v57, v58 = sch.sample_perfect_tile(loop=l43, n=4, max_innermost_factor=64, decision=[1, 1, 6, 1])
l59, l60, l61, l62 = sch.split(loop=l43, factors=[v55, v56, v57, v58], preserve_unit_iters=True, disable_predication=False)
v63, v64, v65, v66 = sch.sample_perfect_tile(loop=l44, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l67, l68, l69, l70 = sch.split(loop=l44, factors=[v63, v64, v65, v66], preserve_unit_iters=True, disable_predication=False)
v71, v72, v73, v74 = sch.sample_perfect_tile(loop=l45, n=4, max_innermost_factor=64, decision=[1, 8, 16, 1])
l75, l76, l77, l78 = sch.split(loop=l45, factors=[v71, v72, v73, v74], preserve_unit_iters=True, disable_predication=False)
v79, v80 = sch.sample_perfect_tile(loop=l46, n=2, max_innermost_factor=64, decision=[32, 4])
l81, l82 = sch.split(loop=l46, factors=[v79, v80], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l51, l59, l67, l75, l52, l60, l68, l76, l81, l53, l61, l69, l77, l82, l54, l62, l70, l78)
b83 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="global")
sch.reverse_compute_at(block=b83, loop=l76, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.parallel", ann_val=96)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.vectorize", ann_val=64)
v84 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.unroll_explicit", ann_val=v84)
l85 = sch.sample_compute_location(block=b3, decision=3)
sch.compute_at(block=b3, loop=l85, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b86 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b86, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b86, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b86, ann_key="meta_schedule.unroll_explicit")
b87, b88, b89, b90, b91, b92, b93 = sch.get_child_blocks(b86)
l94, l95, l96, l97, l98, l99 = sch.get_loops(block=b87)
l100 = sch.fuse(l94, l95, preserve_unit_iters=True)
sch.parallel(loop=l100)
l101 = sch.fuse(l99, preserve_unit_iters=True)
sch.vectorize(loop=l101)
l102, l103, l104, l105, l106, l107, l108 = sch.get_loops(block=b88)
l109 = sch.fuse(l102, preserve_unit_iters=True)
sch.parallel(loop=l109)
sch.annotate(block_or_loop=l109, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l109, ann_key="pragma_unroll_explicit", ann_val=1)
l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127 = sch.get_loops(block=b89)
l128 = sch.fuse(l110, l111, l112, l113, l114, l115, l116, l117, preserve_unit_iters=True)
sch.parallel(loop=l128)
sch.annotate(block_or_loop=l128, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l128, ann_key="pragma_unroll_explicit", ann_val=1)
l129, l130, l131, l132, l133 = sch.get_loops(block=b90)
l134 = sch.fuse(l133, preserve_unit_iters=True)
sch.vectorize(loop=l134)
l135, l136, l137, l138, l139, l140, l141, l142 = sch.get_loops(block=b91)
l143 = sch.fuse(l135, l136, l137, l138, preserve_unit_iters=True)
sch.parallel(loop=l143)
sch.annotate(block_or_loop=l143, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l143, ann_key="pragma_unroll_explicit", ann_val=1)
l144, l145, l146, l147, l148, l149, l150, l151 = sch.get_loops(block=b92)
l152 = sch.fuse(l144, l145, l146, l147, preserve_unit_iters=True)
sch.parallel(loop=l152)
l153, = sch.get_loops(block=b93)
l154 = sch.fuse(l153, preserve_unit_iters=True)
sch.parallel(loop=l154)
b155 = sch.get_block(name="data_pack", func_name="main")
l156, l157, l158, l159, l160, l161, l162 = sch.get_loops(block=b155)
b163 = sch.decompose_reduction(block=b155, loop=l161)
b164 = sch.get_block(name="bgemm", func_name="main")
l165, l166, l167, l168, l169, l170, l171, l172, l173, l174, l175 = sch.get_loops(block=b164)
b176 = sch.decompose_reduction(block=b164, loop=l166)
b177 = sch.get_block(name="inverse", func_name="main")
l178, l179, l180, l181, l182 = sch.get_loops(block=b177)
b183 = sch.decompose_reduction(block=b177, loop=l181)
b184 = sch.get_block(name="bgemm_update", func_name="main")
b185 = sch.cache_read(block=b184, read_buffer_index=2, storage_scope="global")
sch.annotate(block_or_loop=b185, ann_key="meta_schedule.layout_rewrite_preproc", ann_val=1)
sch.transform_layout(block=b184, buffer=("read", 2), index_map=tvm.tir.IndexMap.from_func(lambda i0, i1, i2, i3: (T.Cast("int64", i0) // T.int64(2), T.Cast("int64", i2) // T.int64(16), T.Cast("int64", i3) // T.int64(4), T.Cast("int64", i0) % T.int64(2), T.Cast("int64", i1), T.Cast("int64", i2) % T.int64(16), T.Cast("int64", i3) % T.int64(4),), inverse_index_map=lambda i0, i1, i2, i3, i4, i5, i6: (T.Cast("int64", i0) * T.int64(2) + T.Cast("int64", i3), T.Cast("int64", i4), T.Cast("int64", i1) * T.int64(16) + T.Cast("int64", i5), T.Cast("int64", i2) * T.int64(4) + T.Cast("int64", i6),)), pad_value=None, assume_injective_transform=False)
2024-04-30 19:59:07 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #173: GFLOPs: 8.2553. Time: 230.7172 us. Best GFLOPs: 39.7833
2024-04-30 19:59:07 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #174: GFLOPs: 7.7915. Time: 244.4505 us. Best GFLOPs: 39.7833
2024-04-30 19:59:07 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #175: GFLOPs: 8.5508. Time: 222.7434 us. Best GFLOPs: 39.7833
2024-04-30 19:59:07 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #176: GFLOPs: 8.2939. Time: 229.6428 us. Best GFLOPs: 39.7833
2024-04-30 19:59:07 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #177: GFLOPs: 6.5794. Time: 289.4868 us. Best GFLOPs: 39.7833
2024-04-30 19:59:07 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #178: GFLOPs: 9.2233. Time: 206.5040 us. Best GFLOPs: 39.7833
2024-04-30 19:59:07 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #179: GFLOPs: 7.5301. Time: 252.9381 us. Best GFLOPs: 39.7833
2024-04-30 19:59:07 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #180: GFLOPs: 8.5043. Time: 223.9611 us. Best GFLOPs: 39.7833
2024-04-30 19:59:07 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #181: GFLOPs: 10.3842. Time: 183.4171 us. Best GFLOPs: 39.7833
2024-04-30 19:59:07 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #182: GFLOPs: 9.1375. Time: 208.4416 us. Best GFLOPs: 39.7833
2024-04-30 19:59:07 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #183: GFLOPs: 7.4375. Time: 256.0852 us. Best GFLOPs: 39.7833
2024-04-30 19:59:07 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #184: GFLOPs: 9.1575. Time: 207.9862 us. Best GFLOPs: 39.7833
2024-04-30 19:59:07 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #185: GFLOPs: 9.2838. Time: 205.1573 us. Best GFLOPs: 39.7833
2024-04-30 19:59:07 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #186: GFLOPs: 7.7017. Time: 247.3019 us. Best GFLOPs: 39.7833
2024-04-30 19:59:07 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #187: GFLOPs: 8.2464. Time: 230.9674 us. Best GFLOPs: 39.7833
2024-04-30 19:59:07 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #188: GFLOPs: 8.5150. Time: 223.6802 us. Best GFLOPs: 39.7833
2024-04-30 19:59:07 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #189: GFLOPs: 8.8393. Time: 215.4751 us. Best GFLOPs: 39.7833
2024-04-30 19:59:07 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #190: GFLOPs: 6.9277. Time: 274.9319 us. Best GFLOPs: 39.7833
2024-04-30 19:59:07 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #191: GFLOPs: 6.8714. Time: 277.1848 us. Best GFLOPs: 39.7833
2024-04-30 19:59:07 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #192: GFLOPs: 4.5490. Time: 418.6973 us. Best GFLOPs: 39.7833
2024-04-30 20:02:27 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-30 20:02:29 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-30 20:02:35 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x21e17768)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x1bc803a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x963a4d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x21475998)]: 0 failure(s)
2024-04-30 20:02:35 [INFO] [evolutionary_search.cc:723] Sampled 410 candidate(s)
2024-04-30 20:02:49 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x21e17768)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x1bc803a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x963a4d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x21475998)]: 0 failure(s)
2024-04-30 20:03:03 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x21e17768)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x1bc803a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x963a4d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x21475998)]: 0 failure(s)
2024-04-30 20:03:19 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x21e17768)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x1bc803a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x963a4d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x21475998)]: 0 failure(s)
2024-04-30 20:03:34 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x21e17768)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x1bc803a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x963a4d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x21475998)]: 0 failure(s)
2024-04-30 20:03:43 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9720  0.9604  0.9409  0.9381  0.9279  0.9191  0.9133  0.9072  0.9072  0.9001  0.8952  0.8884  0.8877  0.8821  0.8800  0.8799
[17 : 32]:	0.8778  0.8770  0.8767  0.8765  0.8713  0.8709  0.8677  0.8677  0.8651  0.8651  0.8637  0.8635  0.8624  0.8597  0.8540  0.8537
[33 : 48]:	0.8439  0.8409  0.8385  0.8378  0.8368  0.8365  0.8364  0.8343  0.8341  0.8341  0.8325  0.8318  0.8318  0.8318  0.8291  0.8271
[49 : 64]:	0.8255  0.8254  0.8254  0.8233  0.8222  0.8222  0.8217  0.8217  0.8214  0.8203  0.8197  0.8193  0.8180  0.8178  0.8161  0.8154
2024-04-30 20:03:43 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-30 20:03:43 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-30 20:04:54 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #193: GFLOPs: 26.3608. Time: 72.2529 us. Best GFLOPs: 39.7833
2024-04-30 20:04:54 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #194: GFLOPs: 25.9208. Time: 73.4793 us. Best GFLOPs: 39.7833
2024-04-30 20:04:54 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #195: GFLOPs: 24.7518. Time: 76.9496 us. Best GFLOPs: 39.7833
2024-04-30 20:04:54 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #196: GFLOPs: 24.1145. Time: 78.9833 us. Best GFLOPs: 39.7833
2024-04-30 20:04:54 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #197: GFLOPs: 23.8325. Time: 79.9179 us. Best GFLOPs: 39.7833
2024-04-30 20:04:54 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #198: GFLOPs: 22.6456. Time: 84.1063 us. Best GFLOPs: 39.7833
2024-04-30 20:04:54 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #199: GFLOPs: 20.9350. Time: 90.9788 us. Best GFLOPs: 39.7833
2024-04-30 20:04:54 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #200: GFLOPs: 23.2534. Time: 81.9079 us. Best GFLOPs: 39.7833
2024-04-30 20:04:54 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #201: GFLOPs: 19.5351. Time: 97.4982 us. Best GFLOPs: 39.7833
2024-04-30 20:04:54 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #202: GFLOPs: 18.9611. Time: 100.4501 us. Best GFLOPs: 39.7833
2024-04-30 20:04:54 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #203: GFLOPs: 14.2713. Time: 133.4591 us. Best GFLOPs: 39.7833
2024-04-30 20:04:54 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #204: GFLOPs: 24.9332. Time: 76.3897 us. Best GFLOPs: 39.7833
2024-04-30 20:04:54 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #205: GFLOPs: 23.0087. Time: 82.7791 us. Best GFLOPs: 39.7833
2024-04-30 20:04:54 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #206: GFLOPs: 16.5784. Time: 114.8868 us. Best GFLOPs: 39.7833
2024-04-30 20:04:54 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #207: GFLOPs: 29.3925. Time: 64.8002 us. Best GFLOPs: 39.7833
2024-04-30 20:04:54 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #208: GFLOPs: 29.6455. Time: 64.2472 us. Best GFLOPs: 39.7833
2024-04-30 20:04:54 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #209: GFLOPs: 27.1947. Time: 70.0372 us. Best GFLOPs: 39.7833
2024-04-30 20:04:54 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #210: GFLOPs: 19.3704. Time: 98.3272 us. Best GFLOPs: 39.7833
2024-04-30 20:04:54 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #211: GFLOPs: 21.6886. Time: 87.8177 us. Best GFLOPs: 39.7833
2024-04-30 20:04:54 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #212: GFLOPs: 21.4517. Time: 88.7873 us. Best GFLOPs: 39.7833
2024-04-30 20:04:54 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #213: GFLOPs: 28.4015. Time: 67.0613 us. Best GFLOPs: 39.7833
2024-04-30 20:04:54 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #214: GFLOPs: 25.7379. Time: 74.0015 us. Best GFLOPs: 39.7833
2024-04-30 20:04:54 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #215: GFLOPs: 31.1842. Time: 61.0771 us. Best GFLOPs: 39.7833
2024-04-30 20:04:54 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #216: GFLOPs: 30.5475. Time: 62.3502 us. Best GFLOPs: 39.7833
2024-04-30 20:04:54 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #217: GFLOPs: 26.0620. Time: 73.0811 us. Best GFLOPs: 39.7833
2024-04-30 20:04:54 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #218: GFLOPs: 24.0858. Time: 79.0774 us. Best GFLOPs: 39.7833
2024-04-30 20:04:54 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #219: GFLOPs: 29.6020. Time: 64.3416 us. Best GFLOPs: 39.7833
2024-04-30 20:04:54 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #220: GFLOPs: 29.2531. Time: 65.1091 us. Best GFLOPs: 39.7833
2024-04-30 20:04:54 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #221: GFLOPs: 23.9362. Time: 79.5714 us. Best GFLOPs: 39.7833
2024-04-30 20:04:54 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #222: GFLOPs: 25.7302. Time: 74.0234 us. Best GFLOPs: 39.7833
2024-04-30 20:04:54 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #223: GFLOPs: 27.1614. Time: 70.1229 us. Best GFLOPs: 39.7833
2024-04-30 20:04:54 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #224: GFLOPs: 29.4195. Time: 64.7406 us. Best GFLOPs: 39.7833
2024-04-30 20:04:54 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #225: GFLOPs: 22.0844. Time: 86.2437 us. Best GFLOPs: 39.7833
2024-04-30 20:04:54 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #226: GFLOPs: 17.1196. Time: 111.2552 us. Best GFLOPs: 39.7833
2024-04-30 20:04:54 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #227: GFLOPs: 25.6829. Time: 74.1599 us. Best GFLOPs: 39.7833
2024-04-30 20:04:54 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #228: GFLOPs: 25.1507. Time: 75.7291 us. Best GFLOPs: 39.7833
2024-04-30 20:04:54 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #229: GFLOPs: 30.4271. Time: 62.5968 us. Best GFLOPs: 39.7833
2024-04-30 20:04:54 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #230: GFLOPs: 31.8882. Time: 59.7286 us. Best GFLOPs: 39.7833
2024-04-30 20:04:54 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #231: GFLOPs: 26.9698. Time: 70.6213 us. Best GFLOPs: 39.7833
2024-04-30 20:04:54 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #232: GFLOPs: 31.2054. Time: 61.0356 us. Best GFLOPs: 39.7833
2024-04-30 20:04:54 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #233: GFLOPs: 30.5222. Time: 62.4017 us. Best GFLOPs: 39.7833
2024-04-30 20:04:54 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #234: GFLOPs: 29.8617. Time: 63.7820 us. Best GFLOPs: 39.7833
2024-04-30 20:04:54 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #235: GFLOPs: 27.7692. Time: 68.5883 us. Best GFLOPs: 39.7833
2024-04-30 20:04:54 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #236: GFLOPs: 28.3910. Time: 67.0860 us. Best GFLOPs: 39.7833
2024-04-30 20:04:54 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #237: GFLOPs: 29.0067. Time: 65.6620 us. Best GFLOPs: 39.7833
2024-04-30 20:04:54 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #238: GFLOPs: 30.2344. Time: 62.9959 us. Best GFLOPs: 39.7833
2024-04-30 20:04:54 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #239: GFLOPs: 20.9079. Time: 91.0968 us. Best GFLOPs: 39.7833
2024-04-30 20:04:54 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #240: GFLOPs: 23.4849. Time: 81.1005 us. Best GFLOPs: 39.7833
2024-04-30 20:04:54 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #241: GFLOPs: 22.0950. Time: 86.2022 us. Best GFLOPs: 39.7833
2024-04-30 20:04:54 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #242: GFLOPs: 22.8637. Time: 83.3041 us. Best GFLOPs: 39.7833
2024-04-30 20:04:54 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #243: GFLOPs: 23.1453. Time: 82.2904 us. Best GFLOPs: 39.7833
2024-04-30 20:04:54 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #244: GFLOPs: 25.3718. Time: 75.0693 us. Best GFLOPs: 39.7833
2024-04-30 20:04:54 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #245: GFLOPs: 26.3873. Time: 72.1801 us. Best GFLOPs: 39.7833
2024-04-30 20:04:54 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #246: GFLOPs: 26.8626. Time: 70.9031 us. Best GFLOPs: 39.7833
2024-04-30 20:04:54 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #247: GFLOPs: 29.6897. Time: 64.1515 us. Best GFLOPs: 39.7833
2024-04-30 20:04:54 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #248: GFLOPs: 28.5083. Time: 66.8101 us. Best GFLOPs: 39.7833
2024-04-30 20:04:54 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #249: GFLOPs: 26.6793. Time: 71.3900 us. Best GFLOPs: 39.7833
2024-04-30 20:04:54 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #250: GFLOPs: 20.1704. Time: 94.4276 us. Best GFLOPs: 39.7833
2024-04-30 20:04:54 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #251: GFLOPs: 23.1919. Time: 82.1251 us. Best GFLOPs: 39.7833
2024-04-30 20:04:54 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #252: GFLOPs: 21.4318. Time: 88.8696 us. Best GFLOPs: 39.7833
2024-04-30 20:04:54 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #253: GFLOPs: 20.8131. Time: 91.5117 us. Best GFLOPs: 39.7833
2024-04-30 20:04:54 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #254: GFLOPs: 13.5806. Time: 140.2476 us. Best GFLOPs: 39.7833
2024-04-30 20:04:54 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #255: GFLOPs: 11.8746. Time: 160.3961 us. Best GFLOPs: 39.7833
2024-04-30 20:04:54 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_add_nn_relu] Trial #256: GFLOPs: 20.2425. Time: 94.0910 us. Best GFLOPs: 39.7833
