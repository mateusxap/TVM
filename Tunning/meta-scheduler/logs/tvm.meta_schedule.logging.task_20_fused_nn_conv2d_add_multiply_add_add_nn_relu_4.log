2024-04-30 19:06:07 [INFO] [task_scheduler.cc:160] Initializing Task #20: "fused_nn_conv2d_add_multiply_add_add_nn_relu_4"
2024-04-30 19:06:07 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(4), T.int64(4), T.int64(512)), "float32"), p1: T.Buffer((T.int64(1), T.int64(1), T.int64(512), T.int64(1024)), "float32"), p2: T.Buffer((T.int64(1), T.int64(1), T.int64(1), T.int64(1024)), "float32"), p3: T.Buffer((T.int64(1), T.int64(1), T.int64(1), T.int64(1024)), "float32"), p4: T.Buffer((T.int64(1), T.int64(1), T.int64(1), T.int64(1024)), "float32"), p5: T.Buffer((T.int64(1), T.int64(2), T.int64(2), T.int64(1024)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(2), T.int64(2), T.int64(1024)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        pad_temp = T.alloc_buffer((T.int64(1), T.int64(4), T.int64(4), T.int64(512)))
        conv2d_nhwc = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(2), T.int64(1024)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(2), T.int64(1024)))
        T_multiply = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(2), T.int64(1024)))
        T_add_1 = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(2), T.int64(1024)))
        T_add_2 = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(2), T.int64(1024)))
        for i0, i1, i2, i3 in T.grid(T.int64(1), T.int64(4), T.int64(4), T.int64(512)):
            with T.block("pad_temp"):
                v_i0, v_i1, v_i2, v_i3 = T.axis.remap("SSSS", [i0, i1, i2, i3])
                T.reads(p0[v_i0, v_i1, v_i2, v_i3])
                T.writes(pad_temp[v_i0, v_i1, v_i2, v_i3])
                pad_temp[v_i0, v_i1, v_i2, v_i3] = p0[v_i0, v_i1, v_i2, v_i3]
        for nn, yy, xx, ff, ry, rx, rc in T.grid(T.int64(1), T.int64(2), T.int64(2), T.int64(1024), T.int64(1), T.int64(1), T.int64(512)):
            with T.block("conv2d_nhwc"):
                v_nn, v_yy, v_xx, v_ff, v_ry, v_rx, v_rc = T.axis.remap("SSSSRRR", [nn, yy, xx, ff, ry, rx, rc])
                T.reads(pad_temp[v_nn, v_yy * T.int64(2) + v_ry, v_xx * T.int64(2) + v_rx, v_rc], p1[v_ry, v_rx, v_rc, v_ff])
                T.writes(conv2d_nhwc[v_nn, v_yy, v_xx, v_ff])
                with T.init():
                    conv2d_nhwc[v_nn, v_yy, v_xx, v_ff] = T.float32(0)
                conv2d_nhwc[v_nn, v_yy, v_xx, v_ff] = conv2d_nhwc[v_nn, v_yy, v_xx, v_ff] + pad_temp[v_nn, v_yy * T.int64(2) + v_ry, v_xx * T.int64(2) + v_rx, v_rc] * p1[v_ry, v_rx, v_rc, v_ff]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(2), T.int64(1024)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(conv2d_nhwc[v_ax0, v_ax1, v_ax2, v_ax3], p2[v_ax0, T.int64(0), T.int64(0), v_ax3])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3] = conv2d_nhwc[v_ax0, v_ax1, v_ax2, v_ax3] + p2[v_ax0, T.int64(0), T.int64(0), v_ax3]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(2), T.int64(1024)):
            with T.block("T_multiply"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3], p3[v_ax0, T.int64(0), T.int64(0), v_ax3])
                T.writes(T_multiply[v_ax0, v_ax1, v_ax2, v_ax3])
                T_multiply[v_ax0, v_ax1, v_ax2, v_ax3] = T_add[v_ax0, v_ax1, v_ax2, v_ax3] * p3[v_ax0, T.int64(0), T.int64(0), v_ax3]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(2), T.int64(1024)):
            with T.block("T_add_1"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(T_multiply[v_ax0, v_ax1, v_ax2, v_ax3], p4[v_ax0, T.int64(0), T.int64(0), v_ax3])
                T.writes(T_add_1[v_ax0, v_ax1, v_ax2, v_ax3])
                T_add_1[v_ax0, v_ax1, v_ax2, v_ax3] = T_multiply[v_ax0, v_ax1, v_ax2, v_ax3] + p4[v_ax0, T.int64(0), T.int64(0), v_ax3]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(2), T.int64(1024)):
            with T.block("T_add_2"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(T_add_1[v_ax0, v_ax1, v_ax2, v_ax3], p5[v_ax0, v_ax1, v_ax2, v_ax3])
                T.writes(T_add_2[v_ax0, v_ax1, v_ax2, v_ax3])
                T_add_2[v_ax0, v_ax1, v_ax2, v_ax3] = T_add_1[v_ax0, v_ax1, v_ax2, v_ax3] + p5[v_ax0, v_ax1, v_ax2, v_ax3]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(2), T.int64(1024)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(T_add_2[v_ax0, v_ax1, v_ax2, v_ax3])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(T_add_2[v_ax0, v_ax1, v_ax2, v_ax3], T.float32(0))
2024-04-30 19:06:07 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-30 19:06:07 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(4), T.int64(4), T.int64(512)), "float32"), p1: T.Buffer((T.int64(1), T.int64(1), T.int64(512), T.int64(1024)), "float32"), p2: T.Buffer((T.int64(1), T.int64(1), T.int64(1), T.int64(1024)), "float32"), p3: T.Buffer((T.int64(1), T.int64(1), T.int64(1), T.int64(1024)), "float32"), p4: T.Buffer((T.int64(1), T.int64(1), T.int64(1), T.int64(1024)), "float32"), p5: T.Buffer((T.int64(1), T.int64(2), T.int64(2), T.int64(1024)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(2), T.int64(2), T.int64(1024)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 96, "meta_schedule.unroll_explicit": 16, "meta_schedule.vectorize": 64})
            conv2d_nhwc = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(2), T.int64(1024)))
            for nn_0, yy_0, xx_0, ff_0, nn_1, yy_1, xx_1, ff_1, ry_0, rx_0, rc_0, nn_2, yy_2, xx_2, ff_2, ry_1, rx_1, rc_1, nn_3, yy_3, xx_3, ff_3 in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(16), T.int64(1), T.int64(2), T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(256), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(2)):
                with T.block("conv2d_nhwc"):
                    v_nn = T.axis.spatial(T.int64(1), nn_0 + nn_1 + nn_2 + nn_3)
                    v_yy = T.axis.spatial(T.int64(2), yy_0 * T.int64(2) + yy_1 + yy_2 + yy_3)
                    v_xx = T.axis.spatial(T.int64(2), xx_0 + xx_1 + xx_2 + xx_3)
                    v_ff = T.axis.spatial(T.int64(1024), ff_0 * T.int64(64) + ff_1 * T.int64(2) + ff_2 * T.int64(2) + ff_3)
                    v_ry = T.axis.reduce(T.int64(1), ry_0 + ry_1)
                    v_rx = T.axis.reduce(T.int64(1), rx_0 + rx_1)
                    v_rc = T.axis.reduce(T.int64(512), rc_0 * T.int64(2) + rc_1)
                    T.reads(p0[v_nn, v_yy * T.int64(2) + v_ry, v_xx * T.int64(2) + v_rx, v_rc], p1[v_ry, v_rx, v_rc, v_ff])
                    T.writes(conv2d_nhwc[v_nn, v_yy, v_xx, v_ff])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    with T.init():
                        conv2d_nhwc[v_nn, v_yy, v_xx, v_ff] = T.float32(0)
                    conv2d_nhwc[v_nn, v_yy, v_xx, v_ff] = conv2d_nhwc[v_nn, v_yy, v_xx, v_ff] + p0[v_nn, v_yy * T.int64(2) + v_ry, v_xx * T.int64(2) + v_rx, v_rc] * p1[v_ry, v_rx, v_rc, v_ff]
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(2), T.int64(1024)):
                with T.block("T_relu"):
                    v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                    T.reads(conv2d_nhwc[v_ax0, v_ax1, v_ax2, v_ax3], p2[v_ax0, T.int64(0), T.int64(0), v_ax3], p3[v_ax0, T.int64(0), T.int64(0), v_ax3], p4[v_ax0, T.int64(0), T.int64(0), v_ax3], p5[v_ax0, v_ax1, v_ax2, v_ax3])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3] = T.max((conv2d_nhwc[v_ax0, v_ax1, v_ax2, v_ax3] + p2[v_ax0, T.int64(0), T.int64(0), v_ax3]) * p3[v_ax0, T.int64(0), T.int64(0), v_ax3] + p4[v_ax0, T.int64(0), T.int64(0), v_ax3] + p5[v_ax0, v_ax1, v_ax2, v_ax3], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nhwc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_multiply", func_name="main")
b4 = sch.get_block(name="T_add_1", func_name="main")
b5 = sch.get_block(name="T_add_2", func_name="main")
b6 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b5)
sch.compute_inline(block=b4)
sch.compute_inline(block=b3)
sch.compute_inline(block=b2)
sch.compute_inline(block=b0)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l7, l8, l9, l10, l11, l12, l13 = sch.get_loops(block=b1)
v14, v15, v16, v17 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l18, l19, l20, l21 = sch.split(loop=l7, factors=[v14, v15, v16, v17], preserve_unit_iters=True, disable_predication=False)
v22, v23, v24, v25 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 2, 1, 1])
l26, l27, l28, l29 = sch.split(loop=l8, factors=[v22, v23, v24, v25], preserve_unit_iters=True, disable_predication=False)
v30, v31, v32, v33 = sch.sample_perfect_tile(loop=l9, n=4, max_innermost_factor=64, decision=[2, 1, 1, 1])
l34, l35, l36, l37 = sch.split(loop=l9, factors=[v30, v31, v32, v33], preserve_unit_iters=True, disable_predication=False)
v38, v39, v40, v41 = sch.sample_perfect_tile(loop=l10, n=4, max_innermost_factor=64, decision=[16, 32, 1, 2])
l42, l43, l44, l45 = sch.split(loop=l10, factors=[v38, v39, v40, v41], preserve_unit_iters=True, disable_predication=False)
v46, v47 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 1])
l48, l49 = sch.split(loop=l11, factors=[v46, v47], preserve_unit_iters=True, disable_predication=False)
v50, v51 = sch.sample_perfect_tile(loop=l12, n=2, max_innermost_factor=64, decision=[1, 1])
l52, l53 = sch.split(loop=l12, factors=[v50, v51], preserve_unit_iters=True, disable_predication=False)
v54, v55 = sch.sample_perfect_tile(loop=l13, n=2, max_innermost_factor=64, decision=[256, 2])
l56, l57 = sch.split(loop=l13, factors=[v54, v55], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l18, l26, l34, l42, l19, l27, l35, l43, l48, l52, l56, l20, l28, l36, l44, l49, l53, l57, l21, l29, l37, l45)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.parallel", ann_val=96)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.vectorize", ann_val=64)
v58 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.unroll_explicit", ann_val=v58)
2024-04-30 19:06:07 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(4), T.int64(4), T.int64(512)), "float32"), p1: T.Buffer((T.int64(1), T.int64(1), T.int64(512), T.int64(1024)), "float32"), p2: T.Buffer((T.int64(1), T.int64(1), T.int64(1), T.int64(1024)), "float32"), p3: T.Buffer((T.int64(1), T.int64(1), T.int64(1), T.int64(1024)), "float32"), p4: T.Buffer((T.int64(1), T.int64(1), T.int64(1), T.int64(1024)), "float32"), p5: T.Buffer((T.int64(1), T.int64(2), T.int64(2), T.int64(1024)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(2), T.int64(2), T.int64(1024)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 96, "meta_schedule.unroll_explicit": 64, "meta_schedule.vectorize": 64})
            conv2d_nhwc = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(2), T.int64(1024)))
            for nn_0, yy_0, xx_0, ff_0, nn_1, yy_1, xx_1, ff_1 in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(16), T.int64(1), T.int64(2), T.int64(1), T.int64(32)):
                for ry_0, rx_0, rc_0, nn_2, yy_2, xx_2, ff_2, ry_1, rx_1, rc_1, nn_3, yy_3, xx_3, ff_3 in T.grid(T.int64(1), T.int64(1), T.int64(256), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(2)):
                    with T.block("conv2d_nhwc"):
                        v_nn = T.axis.spatial(T.int64(1), nn_0 + nn_1 + nn_2 + nn_3)
                        v_yy = T.axis.spatial(T.int64(2), yy_0 * T.int64(2) + yy_1 + yy_2 + yy_3)
                        v_xx = T.axis.spatial(T.int64(2), xx_0 + xx_1 + xx_2 + xx_3)
                        v_ff = T.axis.spatial(T.int64(1024), ff_0 * T.int64(64) + ff_1 * T.int64(2) + ff_2 * T.int64(2) + ff_3)
                        v_ry = T.axis.reduce(T.int64(1), ry_0 + ry_1)
                        v_rx = T.axis.reduce(T.int64(1), rx_0 + rx_1)
                        v_rc = T.axis.reduce(T.int64(512), rc_0 * T.int64(2) + rc_1)
                        T.reads(p0[v_nn, v_yy * T.int64(2) + v_ry, v_xx * T.int64(2) + v_rx, v_rc], p1[v_ry, v_rx, v_rc, v_ff])
                        T.writes(conv2d_nhwc[v_nn, v_yy, v_xx, v_ff])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_nhwc[v_nn, v_yy, v_xx, v_ff] = T.float32(0)
                        conv2d_nhwc[v_nn, v_yy, v_xx, v_ff] = conv2d_nhwc[v_nn, v_yy, v_xx, v_ff] + p0[v_nn, v_yy * T.int64(2) + v_ry, v_xx * T.int64(2) + v_rx, v_rc] * p1[v_ry, v_rx, v_rc, v_ff]
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(2)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(2), yy_1 + ax1)
                        v_ax2 = T.axis.spatial(T.int64(2), xx_0 + ax2)
                        v_ax3 = T.axis.spatial(T.int64(1024), ff_0 * T.int64(64) + ff_1 * T.int64(2) + ax3)
                        T.reads(conv2d_nhwc[v_ax0, v_ax1, v_ax2, v_ax3], p2[v_ax0, T.int64(0), T.int64(0), v_ax3], p3[v_ax0, T.int64(0), T.int64(0), v_ax3], p4[v_ax0, T.int64(0), T.int64(0), v_ax3], p5[v_ax0, v_ax1, v_ax2, v_ax3])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3] = T.max((conv2d_nhwc[v_ax0, v_ax1, v_ax2, v_ax3] + p2[v_ax0, T.int64(0), T.int64(0), v_ax3]) * p3[v_ax0, T.int64(0), T.int64(0), v_ax3] + p4[v_ax0, T.int64(0), T.int64(0), v_ax3] + p5[v_ax0, v_ax1, v_ax2, v_ax3], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nhwc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_multiply", func_name="main")
b4 = sch.get_block(name="T_add_1", func_name="main")
b5 = sch.get_block(name="T_add_2", func_name="main")
b6 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b5)
sch.compute_inline(block=b4)
sch.compute_inline(block=b3)
sch.compute_inline(block=b2)
sch.compute_inline(block=b0)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l7, l8, l9, l10, l11, l12, l13 = sch.get_loops(block=b1)
v14, v15, v16, v17 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l18, l19, l20, l21 = sch.split(loop=l7, factors=[v14, v15, v16, v17], preserve_unit_iters=True, disable_predication=False)
v22, v23, v24, v25 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 2, 1, 1])
l26, l27, l28, l29 = sch.split(loop=l8, factors=[v22, v23, v24, v25], preserve_unit_iters=True, disable_predication=False)
v30, v31, v32, v33 = sch.sample_perfect_tile(loop=l9, n=4, max_innermost_factor=64, decision=[2, 1, 1, 1])
l34, l35, l36, l37 = sch.split(loop=l9, factors=[v30, v31, v32, v33], preserve_unit_iters=True, disable_predication=False)
v38, v39, v40, v41 = sch.sample_perfect_tile(loop=l10, n=4, max_innermost_factor=64, decision=[16, 32, 1, 2])
l42, l43, l44, l45 = sch.split(loop=l10, factors=[v38, v39, v40, v41], preserve_unit_iters=True, disable_predication=False)
v46, v47 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 1])
l48, l49 = sch.split(loop=l11, factors=[v46, v47], preserve_unit_iters=True, disable_predication=False)
v50, v51 = sch.sample_perfect_tile(loop=l12, n=2, max_innermost_factor=64, decision=[1, 1])
l52, l53 = sch.split(loop=l12, factors=[v50, v51], preserve_unit_iters=True, disable_predication=False)
v54, v55 = sch.sample_perfect_tile(loop=l13, n=2, max_innermost_factor=64, decision=[256, 2])
l56, l57 = sch.split(loop=l13, factors=[v54, v55], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l18, l26, l34, l42, l19, l27, l35, l43, l48, l52, l56, l20, l28, l36, l44, l49, l53, l57, l21, l29, l37, l45)
b58, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b58, loop=l43, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.parallel", ann_val=96)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.vectorize", ann_val=64)
v59 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.unroll_explicit", ann_val=v59)
2024-04-30 19:06:07 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(4), T.int64(4), T.int64(512)), "float32"), p1: T.Buffer((T.int64(1), T.int64(1), T.int64(512), T.int64(1024)), "float32"), p2: T.Buffer((T.int64(1), T.int64(1), T.int64(1), T.int64(1024)), "float32"), p3: T.Buffer((T.int64(1), T.int64(1), T.int64(1), T.int64(1024)), "float32"), p4: T.Buffer((T.int64(1), T.int64(1), T.int64(1), T.int64(1024)), "float32"), p5: T.Buffer((T.int64(1), T.int64(2), T.int64(2), T.int64(1024)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(2), T.int64(2), T.int64(1024)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 96, "meta_schedule.unroll_explicit": 16, "meta_schedule.vectorize": 64})
            conv2d_nhwc = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(2), T.int64(1024)))
            for nn_0, yy_0, xx_0, ff_0 in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(16)):
                for nn_1, yy_1, xx_1, ff_1, ry_0, rx_0, rc_0, nn_2, yy_2, xx_2, ff_2, ry_1, rx_1, rc_1, nn_3, yy_3, xx_3, ff_3 in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(256), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(2)):
                    with T.block("conv2d_nhwc"):
                        v_nn = T.axis.spatial(T.int64(1), nn_0 + nn_1 + nn_2 + nn_3)
                        v_yy = T.axis.spatial(T.int64(2), yy_0 * T.int64(2) + yy_1 + yy_2 + yy_3)
                        v_xx = T.axis.spatial(T.int64(2), xx_0 + xx_1 + xx_2 + xx_3)
                        v_ff = T.axis.spatial(T.int64(1024), ff_0 * T.int64(64) + ff_1 * T.int64(2) + ff_2 * T.int64(2) + ff_3)
                        v_ry = T.axis.reduce(T.int64(1), ry_0 + ry_1)
                        v_rx = T.axis.reduce(T.int64(1), rx_0 + rx_1)
                        v_rc = T.axis.reduce(T.int64(512), rc_0 * T.int64(2) + rc_1)
                        T.reads(p0[v_nn, v_yy * T.int64(2) + v_ry, v_xx * T.int64(2) + v_rx, v_rc], p1[v_ry, v_rx, v_rc, v_ff])
                        T.writes(conv2d_nhwc[v_nn, v_yy, v_xx, v_ff])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_nhwc[v_nn, v_yy, v_xx, v_ff] = T.float32(0)
                        conv2d_nhwc[v_nn, v_yy, v_xx, v_ff] = conv2d_nhwc[v_nn, v_yy, v_xx, v_ff] + p0[v_nn, v_yy * T.int64(2) + v_ry, v_xx * T.int64(2) + v_rx, v_rc] * p1[v_ry, v_rx, v_rc, v_ff]
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(64)):
                    with T.block("T_relu"):
                        v_ax0, v_ax1 = T.axis.remap("SS", [ax0, ax1])
                        v_ax2 = T.axis.spatial(T.int64(2), xx_0 + ax2)
                        v_ax3 = T.axis.spatial(T.int64(1024), ff_0 * T.int64(64) + ax3)
                        T.reads(conv2d_nhwc[v_ax0, v_ax1, v_ax2, v_ax3], p2[v_ax0, T.int64(0), T.int64(0), v_ax3], p3[v_ax0, T.int64(0), T.int64(0), v_ax3], p4[v_ax0, T.int64(0), T.int64(0), v_ax3], p5[v_ax0, v_ax1, v_ax2, v_ax3])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3] = T.max((conv2d_nhwc[v_ax0, v_ax1, v_ax2, v_ax3] + p2[v_ax0, T.int64(0), T.int64(0), v_ax3]) * p3[v_ax0, T.int64(0), T.int64(0), v_ax3] + p4[v_ax0, T.int64(0), T.int64(0), v_ax3] + p5[v_ax0, v_ax1, v_ax2, v_ax3], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nhwc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_multiply", func_name="main")
b4 = sch.get_block(name="T_add_1", func_name="main")
b5 = sch.get_block(name="T_add_2", func_name="main")
b6 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b5)
sch.compute_inline(block=b4)
sch.compute_inline(block=b3)
sch.compute_inline(block=b2)
sch.compute_inline(block=b0)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l7, l8, l9, l10, l11, l12, l13 = sch.get_loops(block=b1)
v14, v15, v16, v17 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l18, l19, l20, l21 = sch.split(loop=l7, factors=[v14, v15, v16, v17], preserve_unit_iters=True, disable_predication=False)
v22, v23, v24, v25 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 2, 1, 1])
l26, l27, l28, l29 = sch.split(loop=l8, factors=[v22, v23, v24, v25], preserve_unit_iters=True, disable_predication=False)
v30, v31, v32, v33 = sch.sample_perfect_tile(loop=l9, n=4, max_innermost_factor=64, decision=[2, 1, 1, 1])
l34, l35, l36, l37 = sch.split(loop=l9, factors=[v30, v31, v32, v33], preserve_unit_iters=True, disable_predication=False)
v38, v39, v40, v41 = sch.sample_perfect_tile(loop=l10, n=4, max_innermost_factor=64, decision=[16, 32, 1, 2])
l42, l43, l44, l45 = sch.split(loop=l10, factors=[v38, v39, v40, v41], preserve_unit_iters=True, disable_predication=False)
v46, v47 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 1])
l48, l49 = sch.split(loop=l11, factors=[v46, v47], preserve_unit_iters=True, disable_predication=False)
v50, v51 = sch.sample_perfect_tile(loop=l12, n=2, max_innermost_factor=64, decision=[1, 1])
l52, l53 = sch.split(loop=l12, factors=[v50, v51], preserve_unit_iters=True, disable_predication=False)
v54, v55 = sch.sample_perfect_tile(loop=l13, n=2, max_innermost_factor=64, decision=[256, 2])
l56, l57 = sch.split(loop=l13, factors=[v54, v55], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l18, l26, l34, l42, l19, l27, l35, l43, l48, l52, l56, l20, l28, l36, l44, l49, l53, l57, l21, l29, l37, l45)
b58, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b58, loop=l42, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.parallel", ann_val=96)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.vectorize", ann_val=64)
v59 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.unroll_explicit", ann_val=v59)
2024-04-30 19:13:54 [INFO] [task_scheduler.cc:160] Initializing Task #20: "fused_nn_conv2d_add_multiply_add_add_nn_relu_4"
2024-04-30 19:13:54 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(4), T.int64(4), T.int64(512)), "float32"), p1: T.Buffer((T.int64(1), T.int64(1), T.int64(512), T.int64(1024)), "float32"), p2: T.Buffer((T.int64(1), T.int64(1), T.int64(1), T.int64(1024)), "float32"), p3: T.Buffer((T.int64(1), T.int64(1), T.int64(1), T.int64(1024)), "float32"), p4: T.Buffer((T.int64(1), T.int64(1), T.int64(1), T.int64(1024)), "float32"), p5: T.Buffer((T.int64(1), T.int64(2), T.int64(2), T.int64(1024)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(2), T.int64(2), T.int64(1024)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        pad_temp = T.alloc_buffer((T.int64(1), T.int64(4), T.int64(4), T.int64(512)))
        conv2d_nhwc = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(2), T.int64(1024)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(2), T.int64(1024)))
        T_multiply = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(2), T.int64(1024)))
        T_add_1 = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(2), T.int64(1024)))
        T_add_2 = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(2), T.int64(1024)))
        for i0, i1, i2, i3 in T.grid(T.int64(1), T.int64(4), T.int64(4), T.int64(512)):
            with T.block("pad_temp"):
                v_i0, v_i1, v_i2, v_i3 = T.axis.remap("SSSS", [i0, i1, i2, i3])
                T.reads(p0[v_i0, v_i1, v_i2, v_i3])
                T.writes(pad_temp[v_i0, v_i1, v_i2, v_i3])
                pad_temp[v_i0, v_i1, v_i2, v_i3] = p0[v_i0, v_i1, v_i2, v_i3]
        for nn, yy, xx, ff, ry, rx, rc in T.grid(T.int64(1), T.int64(2), T.int64(2), T.int64(1024), T.int64(1), T.int64(1), T.int64(512)):
            with T.block("conv2d_nhwc"):
                v_nn, v_yy, v_xx, v_ff, v_ry, v_rx, v_rc = T.axis.remap("SSSSRRR", [nn, yy, xx, ff, ry, rx, rc])
                T.reads(pad_temp[v_nn, v_yy * T.int64(2) + v_ry, v_xx * T.int64(2) + v_rx, v_rc], p1[v_ry, v_rx, v_rc, v_ff])
                T.writes(conv2d_nhwc[v_nn, v_yy, v_xx, v_ff])
                with T.init():
                    conv2d_nhwc[v_nn, v_yy, v_xx, v_ff] = T.float32(0)
                conv2d_nhwc[v_nn, v_yy, v_xx, v_ff] = conv2d_nhwc[v_nn, v_yy, v_xx, v_ff] + pad_temp[v_nn, v_yy * T.int64(2) + v_ry, v_xx * T.int64(2) + v_rx, v_rc] * p1[v_ry, v_rx, v_rc, v_ff]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(2), T.int64(1024)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(conv2d_nhwc[v_ax0, v_ax1, v_ax2, v_ax3], p2[v_ax0, T.int64(0), T.int64(0), v_ax3])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3] = conv2d_nhwc[v_ax0, v_ax1, v_ax2, v_ax3] + p2[v_ax0, T.int64(0), T.int64(0), v_ax3]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(2), T.int64(1024)):
            with T.block("T_multiply"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3], p3[v_ax0, T.int64(0), T.int64(0), v_ax3])
                T.writes(T_multiply[v_ax0, v_ax1, v_ax2, v_ax3])
                T_multiply[v_ax0, v_ax1, v_ax2, v_ax3] = T_add[v_ax0, v_ax1, v_ax2, v_ax3] * p3[v_ax0, T.int64(0), T.int64(0), v_ax3]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(2), T.int64(1024)):
            with T.block("T_add_1"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(T_multiply[v_ax0, v_ax1, v_ax2, v_ax3], p4[v_ax0, T.int64(0), T.int64(0), v_ax3])
                T.writes(T_add_1[v_ax0, v_ax1, v_ax2, v_ax3])
                T_add_1[v_ax0, v_ax1, v_ax2, v_ax3] = T_multiply[v_ax0, v_ax1, v_ax2, v_ax3] + p4[v_ax0, T.int64(0), T.int64(0), v_ax3]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(2), T.int64(1024)):
            with T.block("T_add_2"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(T_add_1[v_ax0, v_ax1, v_ax2, v_ax3], p5[v_ax0, v_ax1, v_ax2, v_ax3])
                T.writes(T_add_2[v_ax0, v_ax1, v_ax2, v_ax3])
                T_add_2[v_ax0, v_ax1, v_ax2, v_ax3] = T_add_1[v_ax0, v_ax1, v_ax2, v_ax3] + p5[v_ax0, v_ax1, v_ax2, v_ax3]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(2), T.int64(1024)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(T_add_2[v_ax0, v_ax1, v_ax2, v_ax3])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(T_add_2[v_ax0, v_ax1, v_ax2, v_ax3], T.float32(0))
2024-04-30 19:13:54 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-30 19:13:54 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(4), T.int64(4), T.int64(512)), "float32"), p1: T.Buffer((T.int64(1), T.int64(1), T.int64(512), T.int64(1024)), "float32"), p2: T.Buffer((T.int64(1), T.int64(1), T.int64(1), T.int64(1024)), "float32"), p3: T.Buffer((T.int64(1), T.int64(1), T.int64(1), T.int64(1024)), "float32"), p4: T.Buffer((T.int64(1), T.int64(1), T.int64(1), T.int64(1024)), "float32"), p5: T.Buffer((T.int64(1), T.int64(2), T.int64(2), T.int64(1024)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(2), T.int64(2), T.int64(1024)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 96, "meta_schedule.unroll_explicit": 512, "meta_schedule.vectorize": 64})
            conv2d_nhwc = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(2), T.int64(1024)))
            for nn_0, yy_0, xx_0, ff_0, nn_1, yy_1, xx_1, ff_1, ry_0, rx_0, rc_0, nn_2, yy_2, xx_2, ff_2, ry_1, rx_1, rc_1, nn_3, yy_3, xx_3, ff_3 in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(2), T.int64(4), T.int64(1), T.int64(1), T.int64(512), T.int64(1), T.int64(1), T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4)):
                with T.block("conv2d_nhwc"):
                    v_nn = T.axis.spatial(T.int64(1), nn_0 + nn_1 + nn_2 + nn_3)
                    v_yy = T.axis.spatial(T.int64(2), yy_0 + yy_1 + yy_2 + yy_3)
                    v_xx = T.axis.spatial(T.int64(2), xx_0 * T.int64(2) + xx_1 + xx_2 + xx_3)
                    v_ff = T.axis.spatial(T.int64(1024), ff_0 * T.int64(512) + ff_1 * T.int64(128) + ff_2 * T.int64(4) + ff_3)
                    v_ry = T.axis.reduce(T.int64(1), ry_0 + ry_1)
                    v_rx = T.axis.reduce(T.int64(1), rx_0 + rx_1)
                    v_rc = T.axis.reduce(T.int64(512), rc_0 + rc_1)
                    T.reads(p0[v_nn, v_yy * T.int64(2) + v_ry, v_xx * T.int64(2) + v_rx, v_rc], p1[v_ry, v_rx, v_rc, v_ff])
                    T.writes(conv2d_nhwc[v_nn, v_yy, v_xx, v_ff])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    with T.init():
                        conv2d_nhwc[v_nn, v_yy, v_xx, v_ff] = T.float32(0)
                    conv2d_nhwc[v_nn, v_yy, v_xx, v_ff] = conv2d_nhwc[v_nn, v_yy, v_xx, v_ff] + p0[v_nn, v_yy * T.int64(2) + v_ry, v_xx * T.int64(2) + v_rx, v_rc] * p1[v_ry, v_rx, v_rc, v_ff]
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(2), T.int64(1024)):
                with T.block("T_relu"):
                    v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                    T.reads(conv2d_nhwc[v_ax0, v_ax1, v_ax2, v_ax3], p2[v_ax0, T.int64(0), T.int64(0), v_ax3], p3[v_ax0, T.int64(0), T.int64(0), v_ax3], p4[v_ax0, T.int64(0), T.int64(0), v_ax3], p5[v_ax0, v_ax1, v_ax2, v_ax3])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3] = T.max((conv2d_nhwc[v_ax0, v_ax1, v_ax2, v_ax3] + p2[v_ax0, T.int64(0), T.int64(0), v_ax3]) * p3[v_ax0, T.int64(0), T.int64(0), v_ax3] + p4[v_ax0, T.int64(0), T.int64(0), v_ax3] + p5[v_ax0, v_ax1, v_ax2, v_ax3], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nhwc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_multiply", func_name="main")
b4 = sch.get_block(name="T_add_1", func_name="main")
b5 = sch.get_block(name="T_add_2", func_name="main")
b6 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b5)
sch.compute_inline(block=b4)
sch.compute_inline(block=b3)
sch.compute_inline(block=b2)
sch.compute_inline(block=b0)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l7, l8, l9, l10, l11, l12, l13 = sch.get_loops(block=b1)
v14, v15, v16, v17 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l18, l19, l20, l21 = sch.split(loop=l7, factors=[v14, v15, v16, v17], preserve_unit_iters=True, disable_predication=False)
v22, v23, v24, v25 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[2, 1, 1, 1])
l26, l27, l28, l29 = sch.split(loop=l8, factors=[v22, v23, v24, v25], preserve_unit_iters=True, disable_predication=False)
v30, v31, v32, v33 = sch.sample_perfect_tile(loop=l9, n=4, max_innermost_factor=64, decision=[1, 2, 1, 1])
l34, l35, l36, l37 = sch.split(loop=l9, factors=[v30, v31, v32, v33], preserve_unit_iters=True, disable_predication=False)
v38, v39, v40, v41 = sch.sample_perfect_tile(loop=l10, n=4, max_innermost_factor=64, decision=[2, 4, 32, 4])
l42, l43, l44, l45 = sch.split(loop=l10, factors=[v38, v39, v40, v41], preserve_unit_iters=True, disable_predication=False)
v46, v47 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 1])
l48, l49 = sch.split(loop=l11, factors=[v46, v47], preserve_unit_iters=True, disable_predication=False)
v50, v51 = sch.sample_perfect_tile(loop=l12, n=2, max_innermost_factor=64, decision=[1, 1])
l52, l53 = sch.split(loop=l12, factors=[v50, v51], preserve_unit_iters=True, disable_predication=False)
v54, v55 = sch.sample_perfect_tile(loop=l13, n=2, max_innermost_factor=64, decision=[512, 1])
l56, l57 = sch.split(loop=l13, factors=[v54, v55], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l18, l26, l34, l42, l19, l27, l35, l43, l48, l52, l56, l20, l28, l36, l44, l49, l53, l57, l21, l29, l37, l45)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.parallel", ann_val=96)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.vectorize", ann_val=64)
v58 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.unroll_explicit", ann_val=v58)
2024-04-30 19:13:54 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(4), T.int64(4), T.int64(512)), "float32"), p1: T.Buffer((T.int64(1), T.int64(1), T.int64(512), T.int64(1024)), "float32"), p2: T.Buffer((T.int64(1), T.int64(1), T.int64(1), T.int64(1024)), "float32"), p3: T.Buffer((T.int64(1), T.int64(1), T.int64(1), T.int64(1024)), "float32"), p4: T.Buffer((T.int64(1), T.int64(1), T.int64(1), T.int64(1024)), "float32"), p5: T.Buffer((T.int64(1), T.int64(2), T.int64(2), T.int64(1024)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(2), T.int64(2), T.int64(1024)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 96, "meta_schedule.unroll_explicit": 64, "meta_schedule.vectorize": 64})
            conv2d_nhwc = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(2), T.int64(1024)))
            for nn_0, yy_0, xx_0, ff_0, nn_1, yy_1, xx_1, ff_1 in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(2), T.int64(4)):
                for ry_0, rx_0, rc_0, nn_2, yy_2, xx_2, ff_2, ry_1, rx_1, rc_1, nn_3, yy_3, xx_3, ff_3 in T.grid(T.int64(1), T.int64(1), T.int64(512), T.int64(1), T.int64(1), T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4)):
                    with T.block("conv2d_nhwc"):
                        v_nn = T.axis.spatial(T.int64(1), nn_0 + nn_1 + nn_2 + nn_3)
                        v_yy = T.axis.spatial(T.int64(2), yy_0 + yy_1 + yy_2 + yy_3)
                        v_xx = T.axis.spatial(T.int64(2), xx_0 * T.int64(2) + xx_1 + xx_2 + xx_3)
                        v_ff = T.axis.spatial(T.int64(1024), ff_0 * T.int64(512) + ff_1 * T.int64(128) + ff_2 * T.int64(4) + ff_3)
                        v_ry = T.axis.reduce(T.int64(1), ry_0 + ry_1)
                        v_rx = T.axis.reduce(T.int64(1), rx_0 + rx_1)
                        v_rc = T.axis.reduce(T.int64(512), rc_0 + rc_1)
                        T.reads(p0[v_nn, v_yy * T.int64(2) + v_ry, v_xx * T.int64(2) + v_rx, v_rc], p1[v_ry, v_rx, v_rc, v_ff])
                        T.writes(conv2d_nhwc[v_nn, v_yy, v_xx, v_ff])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_nhwc[v_nn, v_yy, v_xx, v_ff] = T.float32(0)
                        conv2d_nhwc[v_nn, v_yy, v_xx, v_ff] = conv2d_nhwc[v_nn, v_yy, v_xx, v_ff] + p0[v_nn, v_yy * T.int64(2) + v_ry, v_xx * T.int64(2) + v_rx, v_rc] * p1[v_ry, v_rx, v_rc, v_ff]
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(128)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(2), yy_0 + ax1)
                        v_ax2 = T.axis.spatial(T.int64(2), xx_1 + ax2)
                        v_ax3 = T.axis.spatial(T.int64(1024), ff_0 * T.int64(512) + ff_1 * T.int64(128) + ax3)
                        T.reads(conv2d_nhwc[v_ax0, v_ax1, v_ax2, v_ax3], p2[v_ax0, T.int64(0), T.int64(0), v_ax3], p3[v_ax0, T.int64(0), T.int64(0), v_ax3], p4[v_ax0, T.int64(0), T.int64(0), v_ax3], p5[v_ax0, v_ax1, v_ax2, v_ax3])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3] = T.max((conv2d_nhwc[v_ax0, v_ax1, v_ax2, v_ax3] + p2[v_ax0, T.int64(0), T.int64(0), v_ax3]) * p3[v_ax0, T.int64(0), T.int64(0), v_ax3] + p4[v_ax0, T.int64(0), T.int64(0), v_ax3] + p5[v_ax0, v_ax1, v_ax2, v_ax3], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nhwc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_multiply", func_name="main")
b4 = sch.get_block(name="T_add_1", func_name="main")
b5 = sch.get_block(name="T_add_2", func_name="main")
b6 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b5)
sch.compute_inline(block=b4)
sch.compute_inline(block=b3)
sch.compute_inline(block=b2)
sch.compute_inline(block=b0)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l7, l8, l9, l10, l11, l12, l13 = sch.get_loops(block=b1)
v14, v15, v16, v17 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l18, l19, l20, l21 = sch.split(loop=l7, factors=[v14, v15, v16, v17], preserve_unit_iters=True, disable_predication=False)
v22, v23, v24, v25 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[2, 1, 1, 1])
l26, l27, l28, l29 = sch.split(loop=l8, factors=[v22, v23, v24, v25], preserve_unit_iters=True, disable_predication=False)
v30, v31, v32, v33 = sch.sample_perfect_tile(loop=l9, n=4, max_innermost_factor=64, decision=[1, 2, 1, 1])
l34, l35, l36, l37 = sch.split(loop=l9, factors=[v30, v31, v32, v33], preserve_unit_iters=True, disable_predication=False)
v38, v39, v40, v41 = sch.sample_perfect_tile(loop=l10, n=4, max_innermost_factor=64, decision=[2, 4, 32, 4])
l42, l43, l44, l45 = sch.split(loop=l10, factors=[v38, v39, v40, v41], preserve_unit_iters=True, disable_predication=False)
v46, v47 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 1])
l48, l49 = sch.split(loop=l11, factors=[v46, v47], preserve_unit_iters=True, disable_predication=False)
v50, v51 = sch.sample_perfect_tile(loop=l12, n=2, max_innermost_factor=64, decision=[1, 1])
l52, l53 = sch.split(loop=l12, factors=[v50, v51], preserve_unit_iters=True, disable_predication=False)
v54, v55 = sch.sample_perfect_tile(loop=l13, n=2, max_innermost_factor=64, decision=[512, 1])
l56, l57 = sch.split(loop=l13, factors=[v54, v55], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l18, l26, l34, l42, l19, l27, l35, l43, l48, l52, l56, l20, l28, l36, l44, l49, l53, l57, l21, l29, l37, l45)
b58, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b58, loop=l43, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.parallel", ann_val=96)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.vectorize", ann_val=64)
v59 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.unroll_explicit", ann_val=v59)
2024-04-30 19:13:54 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(4), T.int64(4), T.int64(512)), "float32"), p1: T.Buffer((T.int64(1), T.int64(1), T.int64(512), T.int64(1024)), "float32"), p2: T.Buffer((T.int64(1), T.int64(1), T.int64(1), T.int64(1024)), "float32"), p3: T.Buffer((T.int64(1), T.int64(1), T.int64(1), T.int64(1024)), "float32"), p4: T.Buffer((T.int64(1), T.int64(1), T.int64(1), T.int64(1024)), "float32"), p5: T.Buffer((T.int64(1), T.int64(2), T.int64(2), T.int64(1024)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(2), T.int64(2), T.int64(1024)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 96, "meta_schedule.unroll_explicit": 0, "meta_schedule.vectorize": 64})
            conv2d_nhwc = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(2), T.int64(1024)))
            for nn_0, yy_0, xx_0, ff_0 in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(2)):
                for nn_1, yy_1, xx_1, ff_1, ry_0, rx_0, rc_0, nn_2, yy_2, xx_2, ff_2, ry_1, rx_1, rc_1, nn_3, yy_3, xx_3, ff_3 in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(4), T.int64(1), T.int64(1), T.int64(512), T.int64(1), T.int64(1), T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4)):
                    with T.block("conv2d_nhwc"):
                        v_nn = T.axis.spatial(T.int64(1), nn_0 + nn_1 + nn_2 + nn_3)
                        v_yy = T.axis.spatial(T.int64(2), yy_0 + yy_1 + yy_2 + yy_3)
                        v_xx = T.axis.spatial(T.int64(2), xx_0 * T.int64(2) + xx_1 + xx_2 + xx_3)
                        v_ff = T.axis.spatial(T.int64(1024), ff_0 * T.int64(512) + ff_1 * T.int64(128) + ff_2 * T.int64(4) + ff_3)
                        v_ry = T.axis.reduce(T.int64(1), ry_0 + ry_1)
                        v_rx = T.axis.reduce(T.int64(1), rx_0 + rx_1)
                        v_rc = T.axis.reduce(T.int64(512), rc_0 + rc_1)
                        T.reads(p0[v_nn, v_yy * T.int64(2) + v_ry, v_xx * T.int64(2) + v_rx, v_rc], p1[v_ry, v_rx, v_rc, v_ff])
                        T.writes(conv2d_nhwc[v_nn, v_yy, v_xx, v_ff])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_nhwc[v_nn, v_yy, v_xx, v_ff] = T.float32(0)
                        conv2d_nhwc[v_nn, v_yy, v_xx, v_ff] = conv2d_nhwc[v_nn, v_yy, v_xx, v_ff] + p0[v_nn, v_yy * T.int64(2) + v_ry, v_xx * T.int64(2) + v_rx, v_rc] * p1[v_ry, v_rx, v_rc, v_ff]
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(512)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(2), yy_0 + ax1)
                        v_ax2 = T.axis.spatial(T.int64(2), ax2)
                        v_ax3 = T.axis.spatial(T.int64(1024), ff_0 * T.int64(512) + ax3)
                        T.reads(conv2d_nhwc[v_ax0, v_ax1, v_ax2, v_ax3], p2[v_ax0, T.int64(0), T.int64(0), v_ax3], p3[v_ax0, T.int64(0), T.int64(0), v_ax3], p4[v_ax0, T.int64(0), T.int64(0), v_ax3], p5[v_ax0, v_ax1, v_ax2, v_ax3])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3] = T.max((conv2d_nhwc[v_ax0, v_ax1, v_ax2, v_ax3] + p2[v_ax0, T.int64(0), T.int64(0), v_ax3]) * p3[v_ax0, T.int64(0), T.int64(0), v_ax3] + p4[v_ax0, T.int64(0), T.int64(0), v_ax3] + p5[v_ax0, v_ax1, v_ax2, v_ax3], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nhwc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_multiply", func_name="main")
b4 = sch.get_block(name="T_add_1", func_name="main")
b5 = sch.get_block(name="T_add_2", func_name="main")
b6 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b5)
sch.compute_inline(block=b4)
sch.compute_inline(block=b3)
sch.compute_inline(block=b2)
sch.compute_inline(block=b0)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l7, l8, l9, l10, l11, l12, l13 = sch.get_loops(block=b1)
v14, v15, v16, v17 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l18, l19, l20, l21 = sch.split(loop=l7, factors=[v14, v15, v16, v17], preserve_unit_iters=True, disable_predication=False)
v22, v23, v24, v25 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[2, 1, 1, 1])
l26, l27, l28, l29 = sch.split(loop=l8, factors=[v22, v23, v24, v25], preserve_unit_iters=True, disable_predication=False)
v30, v31, v32, v33 = sch.sample_perfect_tile(loop=l9, n=4, max_innermost_factor=64, decision=[1, 2, 1, 1])
l34, l35, l36, l37 = sch.split(loop=l9, factors=[v30, v31, v32, v33], preserve_unit_iters=True, disable_predication=False)
v38, v39, v40, v41 = sch.sample_perfect_tile(loop=l10, n=4, max_innermost_factor=64, decision=[2, 4, 32, 4])
l42, l43, l44, l45 = sch.split(loop=l10, factors=[v38, v39, v40, v41], preserve_unit_iters=True, disable_predication=False)
v46, v47 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 1])
l48, l49 = sch.split(loop=l11, factors=[v46, v47], preserve_unit_iters=True, disable_predication=False)
v50, v51 = sch.sample_perfect_tile(loop=l12, n=2, max_innermost_factor=64, decision=[1, 1])
l52, l53 = sch.split(loop=l12, factors=[v50, v51], preserve_unit_iters=True, disable_predication=False)
v54, v55 = sch.sample_perfect_tile(loop=l13, n=2, max_innermost_factor=64, decision=[512, 1])
l56, l57 = sch.split(loop=l13, factors=[v54, v55], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l18, l26, l34, l42, l19, l27, l35, l43, l48, l52, l56, l20, l28, l36, l44, l49, l53, l57, l21, l29, l37, l45)
b58, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b58, loop=l42, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.parallel", ann_val=96)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.vectorize", ann_val=64)
v59 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.unroll_explicit", ann_val=v59)
2024-04-30 19:26:18 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-30 19:26:18 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-30 19:26:20 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc0ecbb8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x21915aa8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x7490d68)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x150628c8)]: 0 failure(s)
2024-04-30 19:26:20 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-30 19:26:22 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc0ecbb8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x21915aa8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x7490d68)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x150628c8)]: 0 failure(s)
2024-04-30 19:26:25 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc0ecbb8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x21915aa8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x7490d68)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x150628c8)]: 0 failure(s)
2024-04-30 19:26:28 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc0ecbb8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x21915aa8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x7490d68)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x150628c8)]: 0 failure(s)
2024-04-30 19:26:30 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc0ecbb8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x21915aa8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x7490d68)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x150628c8)]: 0 failure(s)
2024-04-30 19:26:31 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9998  0.9997  0.9996  0.9990  0.9990  0.9986  0.9985  0.9984  0.9972  0.9970  0.9965  0.9962  0.9961  0.9957  0.9956  0.9951
[17 : 32]:	0.9950  0.9941  0.9940  0.9935  0.9932  0.9929  0.9926  0.9923  0.9920  0.9920  0.9916  0.9912  0.9903  0.9893  0.9892  0.9892
[33 : 48]:	0.9890  0.9884  0.9883  0.9883  0.9881  0.9881  0.9877  0.9871  0.9864  0.9861  0.9860  0.9845  0.9844  0.9839  0.9830  0.9827
[49 : 64]:	0.9823  0.9811  0.9810  0.9793  0.9791  0.9787  0.9782  0.9780  0.9778  0.9773  0.9765  0.9760  0.9760  0.9758  0.9744  0.9742
2024-04-30 19:26:31 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-30 19:26:31 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-30 19:36:34 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_multiply_add_add_nn_relu_4] Trial #1: GFLOPs: 67.8841. Time: 62.0879 us. Best GFLOPs: 67.8841
2024-04-30 19:36:34 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_multiply_add_add_nn_relu_4] Trial #2: GFLOPs: 10.2521. Time: 411.1128 us. Best GFLOPs: 67.8841
2024-04-30 19:36:34 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_multiply_add_add_nn_relu_4] Trial #3: GFLOPs: 19.2671. Time: 218.7560 us. Best GFLOPs: 67.8841
2024-04-30 19:36:34 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_multiply_add_add_nn_relu_4] Trial #4: GFLOPs: 12.9633. Time: 325.1327 us. Best GFLOPs: 67.8841
2024-04-30 19:36:34 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_multiply_add_add_nn_relu_4] Trial #5: GFLOPs: 32.6751. Time: 128.9908 us. Best GFLOPs: 67.8841
2024-04-30 19:36:34 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_multiply_add_add_nn_relu_4] Trial #6: GFLOPs: 30.1326. Time: 139.8744 us. Best GFLOPs: 67.8841
2024-04-30 19:36:34 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_multiply_add_add_nn_relu_4] Trial #7: GFLOPs: 32.6932. Time: 128.9191 us. Best GFLOPs: 67.8841
2024-04-30 19:36:34 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_multiply_add_add_nn_relu_4] Trial #8: GFLOPs: 62.0475. Time: 67.9284 us. Best GFLOPs: 67.8841
2024-04-30 19:36:34 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_multiply_add_add_nn_relu_4] Trial #9: GFLOPs: 7.7352. Time: 544.8854 us. Best GFLOPs: 67.8841
2024-04-30 19:36:34 [INFO] [task_scheduler.cc:121] [Task #20: fused_nn_conv2d_add_multiply_add_add_nn_relu_4] Trial #10: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(4), T.int64(4), T.int64(512)), "float32"), p1: T.Buffer((T.int64(1), T.int64(1), T.int64(512), T.int64(1024)), "float32"), p2: T.Buffer((T.int64(1), T.int64(1), T.int64(1), T.int64(1024)), "float32"), p3: T.Buffer((T.int64(1), T.int64(1), T.int64(1), T.int64(1024)), "float32"), p4: T.Buffer((T.int64(1), T.int64(1), T.int64(1), T.int64(1024)), "float32"), p5: T.Buffer((T.int64(1), T.int64(2), T.int64(2), T.int64(1024)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(2), T.int64(2), T.int64(1024)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_nhwc = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(2), T.int64(1024)))
        p1_global = T.alloc_buffer((T.int64(4), T.int64(256), T.int64(256), T.int64(2)))
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(512), T.int64(1024)):
            with T.block("p1_global"):
                v0, v1, v2, v3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(p1[v0, v1, v2, v3])
                T.writes(p1_global[v3 // T.int64(256), v2 // T.int64(2), v3 % T.int64(256), v2 % T.int64(2)])
                T.block_attr({"meta_schedule.layout_rewrite_preproc": T.bool(True)})
                p1_global[v3 // T.int64(256), v2 // T.int64(2), v3 % T.int64(256), v2 % T.int64(2)] = p1[v0, v1, v2, v3]
        for nn_0_yy_0_xx_0_ff_0_fused in T.parallel(T.int64(4), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for nn_1, yy_1, xx_1, ff_1 in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(1)):
                for nn_2_init, yy_2_init, xx_2_init, ff_2_init, nn_3_init, yy_3_init, xx_3_init, ff_3_init in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(256), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                    with T.block("conv2d_nhwc_init"):
                        v_nn = T.axis.spatial(T.int64(1), nn_1 + nn_2_init + nn_3_init)
                        v_yy = T.axis.spatial(T.int64(2), yy_1 + yy_2_init + yy_3_init)
                        v_xx = T.axis.spatial(T.int64(2), xx_1 * T.int64(2) + xx_2_init + xx_3_init)
                        v_ff = T.axis.spatial(T.int64(1024), nn_0_yy_0_xx_0_ff_0_fused * T.int64(256) + ff_1 * T.int64(256) + ff_2_init + ff_3_init)
                        T.reads()
                        T.writes(conv2d_nhwc[v_nn, v_yy, v_xx, v_ff])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_nhwc[v_nn, v_yy, v_xx, v_ff] = T.float32(0)
                for ry_0, rx_0, rc_0, nn_2, yy_2, xx_2, ff_2, ry_1, rx_1, rc_1, nn_3, yy_3, xx_3, ff_3 in T.grid(T.int64(1), T.int64(1), T.int64(256), T.int64(1), T.int64(1), T.int64(2), T.int64(256), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                    with T.block("conv2d_nhwc_update"):
                        v_nn = T.axis.spatial(T.int64(1), nn_1 + nn_2 + nn_3)
                        v_yy = T.axis.spatial(T.int64(2), yy_1 + yy_2 + yy_3)
                        v_xx = T.axis.spatial(T.int64(2), xx_1 * T.int64(2) + xx_2 + xx_3)
                        v_ff = T.axis.spatial(T.int64(1024), nn_0_yy_0_xx_0_ff_0_fused * T.int64(256) + ff_1 * T.int64(256) + ff_2 + ff_3)
                        v_ry = T.axis.reduce(T.int64(1), ry_0 + ry_1)
                        v_rx = T.axis.reduce(T.int64(1), rx_0 + rx_1)
                        v_rc = T.axis.reduce(T.int64(512), rc_0 * T.int64(2) + rc_1)
                        T.reads(conv2d_nhwc[v_nn, v_yy, v_xx, v_ff], p0[v_nn, v_yy * T.int64(2) + v_ry, v_xx * T.int64(2) + v_rx, v_rc], p1_global[v_ff // T.int64(256), v_rc // T.int64(2), v_ff % T.int64(256), v_rc % T.int64(2)])
                        T.writes(conv2d_nhwc[v_nn, v_yy, v_xx, v_ff])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_nhwc[v_nn, v_yy, v_xx, v_ff] = conv2d_nhwc[v_nn, v_yy, v_xx, v_ff] + p0[v_nn, v_yy * T.int64(2) + v_ry, v_xx * T.int64(2) + v_rx, v_rc] * p1_global[v_ff // T.int64(256), v_rc // T.int64(2), v_ff % T.int64(256), v_rc % T.int64(2)]
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(2), T.int64(256)):
                with T.block("T_relu"):
                    v_ax0, v_ax1, v_ax2 = T.axis.remap("SSS", [ax0, ax1, ax2])
                    v_ax3 = T.axis.spatial(T.int64(1024), nn_0_yy_0_xx_0_ff_0_fused * T.int64(256) + ax3)
                    T.reads(conv2d_nhwc[v_ax0, v_ax1, v_ax2, v_ax3], p2[v_ax0, T.int64(0), T.int64(0), v_ax3], p3[v_ax0, T.int64(0), T.int64(0), v_ax3], p4[v_ax0, T.int64(0), T.int64(0), v_ax3], p5[v_ax0, v_ax1, v_ax2, v_ax3])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3] = T.max((conv2d_nhwc[v_ax0, v_ax1, v_ax2, v_ax3] + p2[v_ax0, T.int64(0), T.int64(0), v_ax3]) * p3[v_ax0, T.int64(0), T.int64(0), v_ax3] + p4[v_ax0, T.int64(0), T.int64(0), v_ax3] + p5[v_ax0, v_ax1, v_ax2, v_ax3], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nhwc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_multiply", func_name="main")
b4 = sch.get_block(name="T_add_1", func_name="main")
b5 = sch.get_block(name="T_add_2", func_name="main")
b6 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b5)
sch.compute_inline(block=b4)
sch.compute_inline(block=b3)
sch.compute_inline(block=b2)
sch.compute_inline(block=b0)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l7, l8, l9, l10, l11, l12, l13 = sch.get_loops(block=b1)
v14, v15, v16, v17 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l18, l19, l20, l21 = sch.split(loop=l7, factors=[v14, v15, v16, v17], preserve_unit_iters=True, disable_predication=False)
v22, v23, v24, v25 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 2, 1, 1])
l26, l27, l28, l29 = sch.split(loop=l8, factors=[v22, v23, v24, v25], preserve_unit_iters=True, disable_predication=False)
v30, v31, v32, v33 = sch.sample_perfect_tile(loop=l9, n=4, max_innermost_factor=64, decision=[1, 1, 2, 1])
l34, l35, l36, l37 = sch.split(loop=l9, factors=[v30, v31, v32, v33], preserve_unit_iters=True, disable_predication=False)
v38, v39, v40, v41 = sch.sample_perfect_tile(loop=l10, n=4, max_innermost_factor=64, decision=[4, 1, 256, 1])
l42, l43, l44, l45 = sch.split(loop=l10, factors=[v38, v39, v40, v41], preserve_unit_iters=True, disable_predication=False)
v46, v47 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 1])
l48, l49 = sch.split(loop=l11, factors=[v46, v47], preserve_unit_iters=True, disable_predication=False)
v50, v51 = sch.sample_perfect_tile(loop=l12, n=2, max_innermost_factor=64, decision=[1, 1])
l52, l53 = sch.split(loop=l12, factors=[v50, v51], preserve_unit_iters=True, disable_predication=False)
v54, v55 = sch.sample_perfect_tile(loop=l13, n=2, max_innermost_factor=64, decision=[256, 2])
l56, l57 = sch.split(loop=l13, factors=[v54, v55], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l18, l26, l34, l42, l19, l27, l35, l43, l48, l52, l56, l20, l28, l36, l44, l49, l53, l57, l21, l29, l37, l45)
b58, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b58, loop=l42, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.parallel", ann_val=96)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.vectorize", ann_val=64)
v59 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.unroll_explicit", ann_val=v59)
sch.enter_postproc()
b60 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b60, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b60, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b60, ann_key="meta_schedule.unroll_explicit")
b61, b62 = sch.get_child_blocks(b60)
l63, l64, l65, l66, l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b61)
l85 = sch.fuse(l63, l64, l65, l66, preserve_unit_iters=True)
sch.parallel(loop=l85)
sch.annotate(block_or_loop=l85, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l85, ann_key="pragma_unroll_explicit", ann_val=1)
l86, l87, l88, l89, l90 = sch.get_loops(block=b62)
b91 = sch.get_block(name="conv2d_nhwc", func_name="main")
l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103, l104, l105, l106, l107, l108, l109, l110 = sch.get_loops(block=b91)
b111 = sch.decompose_reduction(block=b91, loop=l97)
b112 = sch.get_block(name="conv2d_nhwc_update", func_name="main")
b113 = sch.cache_read(block=b112, read_buffer_index=2, storage_scope="global")
sch.annotate(block_or_loop=b113, ann_key="meta_schedule.layout_rewrite_preproc", ann_val=1)
sch.transform_layout(block=b112, buffer=("read", 2), index_map=tvm.tir.IndexMap.from_func(lambda i0, i1, i2, i3: (T.Cast("int64", i3) // T.int64(256), T.Cast("int64", i2) // T.int64(2), T.Cast("int64", i3) % T.int64(256), T.Cast("int64", i2) % T.int64(2),), inverse_index_map=lambda i0, i1, i2, i3: (T.int64(0), T.int64(0), T.Cast("int64", i1) * T.int64(2) + T.Cast("int64", i3), T.Cast("int64", i0) * T.int64(256) + T.Cast("int64", i2),)), pad_value=None, assume_injective_transform=False)
2024-04-30 19:36:34 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_multiply_add_add_nn_relu_4] Trial #11: GFLOPs: 22.9118. Time: 183.9568 us. Best GFLOPs: 67.8841
2024-04-30 19:36:34 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_multiply_add_add_nn_relu_4] Trial #12: GFLOPs: 23.2163. Time: 181.5442 us. Best GFLOPs: 67.8841
2024-04-30 19:36:34 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_multiply_add_add_nn_relu_4] Trial #13: GFLOPs: 40.7400. Time: 103.4557 us. Best GFLOPs: 67.8841
2024-04-30 19:36:34 [INFO] [task_scheduler.cc:121] [Task #20: fused_nn_conv2d_add_multiply_add_add_nn_relu_4] Trial #14: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(4), T.int64(4), T.int64(512)), "float32"), p1: T.Buffer((T.int64(1), T.int64(1), T.int64(512), T.int64(1024)), "float32"), p2: T.Buffer((T.int64(1), T.int64(1), T.int64(1), T.int64(1024)), "float32"), p3: T.Buffer((T.int64(1), T.int64(1), T.int64(1), T.int64(1024)), "float32"), p4: T.Buffer((T.int64(1), T.int64(1), T.int64(1), T.int64(1024)), "float32"), p5: T.Buffer((T.int64(1), T.int64(2), T.int64(2), T.int64(1024)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(2), T.int64(2), T.int64(1024)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_nhwc = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(2), T.int64(1024)))
        p1_global = T.alloc_buffer((T.int64(4), T.int64(256), T.int64(64), T.int64(2), T.int64(4)))
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(512), T.int64(1024)):
            with T.block("p1_global"):
                v0, v1, v2, v3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(p1[v0, v1, v2, v3])
                T.writes(p1_global[v3 // T.int64(256), v2 // T.int64(2), v3 % T.int64(256) // T.int64(4), v2 % T.int64(2), v3 % T.int64(4)])
                T.block_attr({"meta_schedule.layout_rewrite_preproc": T.bool(True)})
                p1_global[v3 // T.int64(256), v2 // T.int64(2), v3 % T.int64(256) // T.int64(4), v2 % T.int64(2), v3 % T.int64(4)] = p1[v0, v1, v2, v3]
        for nn_0_yy_0_xx_0_ff_0_fused in T.parallel(T.int64(4), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for nn_1, yy_1, xx_1, ff_1 in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(1)):
                for nn_2_init, yy_2_init, xx_2_init, ff_2_init, nn_3_init, yy_3_init, xx_3_init in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(64), T.int64(1), T.int64(1), T.int64(1)):
                    for ff_3_fused_init in T.vectorized(T.int64(4)):
                        with T.block("conv2d_nhwc_init"):
                            v_nn = T.axis.spatial(T.int64(1), nn_1 + nn_2_init + nn_3_init)
                            v_yy = T.axis.spatial(T.int64(2), yy_1 + yy_2_init + yy_3_init)
                            v_xx = T.axis.spatial(T.int64(2), xx_1 * T.int64(2) + xx_2_init + xx_3_init)
                            v_ff = T.axis.spatial(T.int64(1024), nn_0_yy_0_xx_0_ff_0_fused * T.int64(256) + ff_1 * T.int64(256) + ff_2_init * T.int64(4) + ff_3_fused_init)
                            T.reads()
                            T.writes(conv2d_nhwc[v_nn, v_yy, v_xx, v_ff])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_nhwc[v_nn, v_yy, v_xx, v_ff] = T.float32(0)
                for ry_0, rx_0, rc_0, nn_2, yy_2, xx_2, ff_2, ry_1, rx_1, rc_1, nn_3, yy_3, xx_3 in T.grid(T.int64(1), T.int64(1), T.int64(256), T.int64(1), T.int64(1), T.int64(2), T.int64(64), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1)):
                    for ff_3_fused in T.vectorized(T.int64(4)):
                        with T.block("conv2d_nhwc_update"):
                            v_nn = T.axis.spatial(T.int64(1), nn_1 + nn_2 + nn_3)
                            v_yy = T.axis.spatial(T.int64(2), yy_1 + yy_2 + yy_3)
                            v_xx = T.axis.spatial(T.int64(2), xx_1 * T.int64(2) + xx_2 + xx_3)
                            v_ff = T.axis.spatial(T.int64(1024), nn_0_yy_0_xx_0_ff_0_fused * T.int64(256) + ff_1 * T.int64(256) + ff_2 * T.int64(4) + ff_3_fused)
                            v_ry = T.axis.reduce(T.int64(1), ry_0 + ry_1)
                            v_rx = T.axis.reduce(T.int64(1), rx_0 + rx_1)
                            v_rc = T.axis.reduce(T.int64(512), rc_0 * T.int64(2) + rc_1)
                            T.reads(conv2d_nhwc[v_nn, v_yy, v_xx, v_ff], p0[v_nn, v_yy * T.int64(2) + v_ry, v_xx * T.int64(2) + v_rx, v_rc], p1_global[v_ff // T.int64(256), v_rc // T.int64(2), v_ff % T.int64(256) // T.int64(4), v_rc % T.int64(2), v_ff % T.int64(4)])
                            T.writes(conv2d_nhwc[v_nn, v_yy, v_xx, v_ff])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_nhwc[v_nn, v_yy, v_xx, v_ff] = conv2d_nhwc[v_nn, v_yy, v_xx, v_ff] + p0[v_nn, v_yy * T.int64(2) + v_ry, v_xx * T.int64(2) + v_rx, v_rc] * p1_global[v_ff // T.int64(256), v_rc // T.int64(2), v_ff % T.int64(256) // T.int64(4), v_rc % T.int64(2), v_ff % T.int64(4)]
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(2), T.int64(256)):
                with T.block("T_relu"):
                    v_ax0, v_ax1, v_ax2 = T.axis.remap("SSS", [ax0, ax1, ax2])
                    v_ax3 = T.axis.spatial(T.int64(1024), nn_0_yy_0_xx_0_ff_0_fused * T.int64(256) + ax3)
                    T.reads(conv2d_nhwc[v_ax0, v_ax1, v_ax2, v_ax3], p2[v_ax0, T.int64(0), T.int64(0), v_ax3], p3[v_ax0, T.int64(0), T.int64(0), v_ax3], p4[v_ax0, T.int64(0), T.int64(0), v_ax3], p5[v_ax0, v_ax1, v_ax2, v_ax3])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3] = T.max((conv2d_nhwc[v_ax0, v_ax1, v_ax2, v_ax3] + p2[v_ax0, T.int64(0), T.int64(0), v_ax3]) * p3[v_ax0, T.int64(0), T.int64(0), v_ax3] + p4[v_ax0, T.int64(0), T.int64(0), v_ax3] + p5[v_ax0, v_ax1, v_ax2, v_ax3], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nhwc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_multiply", func_name="main")
b4 = sch.get_block(name="T_add_1", func_name="main")
b5 = sch.get_block(name="T_add_2", func_name="main")
b6 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b5)
sch.compute_inline(block=b4)
sch.compute_inline(block=b3)
sch.compute_inline(block=b2)
sch.compute_inline(block=b0)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l7, l8, l9, l10, l11, l12, l13 = sch.get_loops(block=b1)
v14, v15, v16, v17 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l18, l19, l20, l21 = sch.split(loop=l7, factors=[v14, v15, v16, v17], preserve_unit_iters=True, disable_predication=False)
v22, v23, v24, v25 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 2, 1, 1])
l26, l27, l28, l29 = sch.split(loop=l8, factors=[v22, v23, v24, v25], preserve_unit_iters=True, disable_predication=False)
v30, v31, v32, v33 = sch.sample_perfect_tile(loop=l9, n=4, max_innermost_factor=64, decision=[1, 1, 2, 1])
l34, l35, l36, l37 = sch.split(loop=l9, factors=[v30, v31, v32, v33], preserve_unit_iters=True, disable_predication=False)
v38, v39, v40, v41 = sch.sample_perfect_tile(loop=l10, n=4, max_innermost_factor=64, decision=[4, 1, 64, 4])
l42, l43, l44, l45 = sch.split(loop=l10, factors=[v38, v39, v40, v41], preserve_unit_iters=True, disable_predication=False)
v46, v47 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 1])
l48, l49 = sch.split(loop=l11, factors=[v46, v47], preserve_unit_iters=True, disable_predication=False)
v50, v51 = sch.sample_perfect_tile(loop=l12, n=2, max_innermost_factor=64, decision=[1, 1])
l52, l53 = sch.split(loop=l12, factors=[v50, v51], preserve_unit_iters=True, disable_predication=False)
v54, v55 = sch.sample_perfect_tile(loop=l13, n=2, max_innermost_factor=64, decision=[256, 2])
l56, l57 = sch.split(loop=l13, factors=[v54, v55], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l18, l26, l34, l42, l19, l27, l35, l43, l48, l52, l56, l20, l28, l36, l44, l49, l53, l57, l21, l29, l37, l45)
b58, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b58, loop=l42, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.parallel", ann_val=96)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.vectorize", ann_val=64)
v59 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.unroll_explicit", ann_val=v59)
sch.enter_postproc()
b60 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b60, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b60, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b60, ann_key="meta_schedule.unroll_explicit")
b61, b62 = sch.get_child_blocks(b60)
l63, l64, l65, l66, l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b61)
l85 = sch.fuse(l63, l64, l65, l66, preserve_unit_iters=True)
sch.parallel(loop=l85)
l86 = sch.fuse(l84, preserve_unit_iters=True)
sch.vectorize(loop=l86)
sch.annotate(block_or_loop=l85, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l85, ann_key="pragma_unroll_explicit", ann_val=1)
l87, l88, l89, l90, l91 = sch.get_loops(block=b62)
b92 = sch.get_block(name="conv2d_nhwc", func_name="main")
l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103, l104, l105, l106, l107, l108, l109, l110, l111 = sch.get_loops(block=b92)
b112 = sch.decompose_reduction(block=b92, loop=l98)
b113 = sch.get_block(name="conv2d_nhwc_update", func_name="main")
b114 = sch.cache_read(block=b113, read_buffer_index=2, storage_scope="global")
sch.annotate(block_or_loop=b114, ann_key="meta_schedule.layout_rewrite_preproc", ann_val=1)
sch.transform_layout(block=b113, buffer=("read", 2), index_map=tvm.tir.IndexMap.from_func(lambda i0, i1, i2, i3: (T.Cast("int64", i3) // T.int64(256), T.Cast("int64", i2) // T.int64(2), T.Cast("int64", i3) % T.int64(256) // T.int64(4), T.Cast("int64", i2) % T.int64(2), T.Cast("int64", i3) % T.int64(4),), inverse_index_map=lambda i0, i1, i2, i3, i4: (T.int64(0), T.int64(0), T.Cast("int64", i1) * T.int64(2) + T.Cast("int64", i3), T.Cast("int64", i0) * T.int64(256) + T.Cast("int64", i2) * T.int64(4) + T.Cast("int64", i4),)), pad_value=None, assume_injective_transform=False)
2024-04-30 19:36:34 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_multiply_add_add_nn_relu_4] Trial #15: GFLOPs: 34.9163. Time: 120.7111 us. Best GFLOPs: 67.8841
2024-04-30 19:36:34 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_multiply_add_add_nn_relu_4] Trial #16: GFLOPs: 37.9741. Time: 110.9911 us. Best GFLOPs: 67.8841
2024-04-30 19:36:34 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_multiply_add_add_nn_relu_4] Trial #17: GFLOPs: 21.8579. Time: 192.8262 us. Best GFLOPs: 67.8841
2024-04-30 19:36:34 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_multiply_add_add_nn_relu_4] Trial #18: GFLOPs: 5.5271. Time: 762.5625 us. Best GFLOPs: 67.8841
2024-04-30 19:36:34 [INFO] [task_scheduler.cc:121] [Task #20: fused_nn_conv2d_add_multiply_add_add_nn_relu_4] Trial #19: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(4), T.int64(4), T.int64(512)), "float32"), p1: T.Buffer((T.int64(1), T.int64(1), T.int64(512), T.int64(1024)), "float32"), p2: T.Buffer((T.int64(1), T.int64(1), T.int64(1), T.int64(1024)), "float32"), p3: T.Buffer((T.int64(1), T.int64(1), T.int64(1), T.int64(1024)), "float32"), p4: T.Buffer((T.int64(1), T.int64(1), T.int64(1), T.int64(1024)), "float32"), p5: T.Buffer((T.int64(1), T.int64(2), T.int64(2), T.int64(1024)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(2), T.int64(2), T.int64(1024)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_nhwc = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(2), T.int64(1024)))
        p1_global = T.alloc_buffer((T.int64(4), T.int64(2), T.int64(16), T.int64(32), T.int64(32), T.int64(4)))
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(512), T.int64(1024)):
            with T.block("p1_global"):
                v0, v1, v2, v3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(p1[v0, v1, v2, v3])
                T.writes(p1_global[v3 // T.int64(256), v3 % T.int64(256) // T.int64(128), v2 // T.int64(32), v3 % T.int64(128) // T.int64(4), v2 % T.int64(32), v3 % T.int64(4)])
                T.block_attr({"meta_schedule.layout_rewrite_preproc": T.bool(True)})
                p1_global[v3 // T.int64(256), v3 % T.int64(256) // T.int64(128), v2 // T.int64(32), v3 % T.int64(128) // T.int64(4), v2 % T.int64(32), v3 % T.int64(4)] = p1[v0, v1, v2, v3]
        for nn_0_yy_0_xx_0_ff_0_fused in T.parallel(T.int64(4), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for nn_1, yy_1, xx_1, ff_1 in T.grid(T.int64(1), T.int64(2), T.int64(2), T.int64(2)):
                for nn_2_init, yy_2_init, xx_2_init, ff_2_init, nn_3_init, yy_3_init, xx_3_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(1)):
                    for ff_3_fused_init in T.vectorized(T.int64(4)):
                        with T.block("conv2d_nhwc_init"):
                            v_nn = T.axis.spatial(T.int64(1), nn_1 + nn_2_init + nn_3_init)
                            v_yy = T.axis.spatial(T.int64(2), yy_1 + yy_2_init + yy_3_init)
                            v_xx = T.axis.spatial(T.int64(2), xx_1 + xx_2_init + xx_3_init)
                            v_ff = T.axis.spatial(T.int64(1024), nn_0_yy_0_xx_0_ff_0_fused * T.int64(256) + ff_1 * T.int64(128) + ff_2_init * T.int64(4) + ff_3_fused_init)
                            T.reads()
                            T.writes(conv2d_nhwc[v_nn, v_yy, v_xx, v_ff])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_nhwc[v_nn, v_yy, v_xx, v_ff] = T.float32(0)
                for ry_0, rx_0, rc_0, nn_2, yy_2, xx_2, ff_2, ry_1, rx_1, rc_1, nn_3, yy_3, xx_3 in T.grid(T.int64(1), T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(1)):
                    for ff_3_fused in T.vectorized(T.int64(4)):
                        with T.block("conv2d_nhwc_update"):
                            v_nn = T.axis.spatial(T.int64(1), nn_1 + nn_2 + nn_3)
                            v_yy = T.axis.spatial(T.int64(2), yy_1 + yy_2 + yy_3)
                            v_xx = T.axis.spatial(T.int64(2), xx_1 + xx_2 + xx_3)
                            v_ff = T.axis.spatial(T.int64(1024), nn_0_yy_0_xx_0_ff_0_fused * T.int64(256) + ff_1 * T.int64(128) + ff_2 * T.int64(4) + ff_3_fused)
                            v_ry = T.axis.reduce(T.int64(1), ry_0 + ry_1)
                            v_rx = T.axis.reduce(T.int64(1), rx_0 + rx_1)
                            v_rc = T.axis.reduce(T.int64(512), rc_0 * T.int64(32) + rc_1)
                            T.reads(conv2d_nhwc[v_nn, v_yy, v_xx, v_ff], p0[v_nn, v_yy * T.int64(2) + v_ry, v_xx * T.int64(2) + v_rx, v_rc], p1_global[v_ff // T.int64(256), v_ff % T.int64(256) // T.int64(128), v_rc // T.int64(32), v_ff % T.int64(128) // T.int64(4), v_rc % T.int64(32), v_ff % T.int64(4)])
                            T.writes(conv2d_nhwc[v_nn, v_yy, v_xx, v_ff])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_nhwc[v_nn, v_yy, v_xx, v_ff] = conv2d_nhwc[v_nn, v_yy, v_xx, v_ff] + p0[v_nn, v_yy * T.int64(2) + v_ry, v_xx * T.int64(2) + v_rx, v_rc] * p1_global[v_ff // T.int64(256), v_ff % T.int64(256) // T.int64(128), v_rc // T.int64(32), v_ff % T.int64(128) // T.int64(4), v_rc % T.int64(32), v_ff % T.int64(4)]
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(2), T.int64(256)):
                with T.block("T_relu"):
                    v_ax0, v_ax1, v_ax2 = T.axis.remap("SSS", [ax0, ax1, ax2])
                    v_ax3 = T.axis.spatial(T.int64(1024), nn_0_yy_0_xx_0_ff_0_fused * T.int64(256) + ax3)
                    T.reads(conv2d_nhwc[v_ax0, v_ax1, v_ax2, v_ax3], p2[v_ax0, T.int64(0), T.int64(0), v_ax3], p3[v_ax0, T.int64(0), T.int64(0), v_ax3], p4[v_ax0, T.int64(0), T.int64(0), v_ax3], p5[v_ax0, v_ax1, v_ax2, v_ax3])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3] = T.max((conv2d_nhwc[v_ax0, v_ax1, v_ax2, v_ax3] + p2[v_ax0, T.int64(0), T.int64(0), v_ax3]) * p3[v_ax0, T.int64(0), T.int64(0), v_ax3] + p4[v_ax0, T.int64(0), T.int64(0), v_ax3] + p5[v_ax0, v_ax1, v_ax2, v_ax3], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nhwc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_multiply", func_name="main")
b4 = sch.get_block(name="T_add_1", func_name="main")
b5 = sch.get_block(name="T_add_2", func_name="main")
b6 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b5)
sch.compute_inline(block=b4)
sch.compute_inline(block=b3)
sch.compute_inline(block=b2)
sch.compute_inline(block=b0)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l7, l8, l9, l10, l11, l12, l13 = sch.get_loops(block=b1)
v14, v15, v16, v17 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l18, l19, l20, l21 = sch.split(loop=l7, factors=[v14, v15, v16, v17], preserve_unit_iters=True, disable_predication=False)
v22, v23, v24, v25 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 2, 1, 1])
l26, l27, l28, l29 = sch.split(loop=l8, factors=[v22, v23, v24, v25], preserve_unit_iters=True, disable_predication=False)
v30, v31, v32, v33 = sch.sample_perfect_tile(loop=l9, n=4, max_innermost_factor=64, decision=[1, 2, 1, 1])
l34, l35, l36, l37 = sch.split(loop=l9, factors=[v30, v31, v32, v33], preserve_unit_iters=True, disable_predication=False)
v38, v39, v40, v41 = sch.sample_perfect_tile(loop=l10, n=4, max_innermost_factor=64, decision=[4, 2, 32, 4])
l42, l43, l44, l45 = sch.split(loop=l10, factors=[v38, v39, v40, v41], preserve_unit_iters=True, disable_predication=False)
v46, v47 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 1])
l48, l49 = sch.split(loop=l11, factors=[v46, v47], preserve_unit_iters=True, disable_predication=False)
v50, v51 = sch.sample_perfect_tile(loop=l12, n=2, max_innermost_factor=64, decision=[1, 1])
l52, l53 = sch.split(loop=l12, factors=[v50, v51], preserve_unit_iters=True, disable_predication=False)
v54, v55 = sch.sample_perfect_tile(loop=l13, n=2, max_innermost_factor=64, decision=[16, 32])
l56, l57 = sch.split(loop=l13, factors=[v54, v55], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l18, l26, l34, l42, l19, l27, l35, l43, l48, l52, l56, l20, l28, l36, l44, l49, l53, l57, l21, l29, l37, l45)
b58, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b58, loop=l42, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.parallel", ann_val=96)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.vectorize", ann_val=64)
v59 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.unroll_explicit", ann_val=v59)
sch.enter_postproc()
b60 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b60, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b60, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b60, ann_key="meta_schedule.unroll_explicit")
b61, b62 = sch.get_child_blocks(b60)
l63, l64, l65, l66, l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b61)
l85 = sch.fuse(l63, l64, l65, l66, preserve_unit_iters=True)
sch.parallel(loop=l85)
l86 = sch.fuse(l84, preserve_unit_iters=True)
sch.vectorize(loop=l86)
sch.annotate(block_or_loop=l85, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l85, ann_key="pragma_unroll_explicit", ann_val=1)
l87, l88, l89, l90, l91 = sch.get_loops(block=b62)
b92 = sch.get_block(name="conv2d_nhwc", func_name="main")
l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103, l104, l105, l106, l107, l108, l109, l110, l111 = sch.get_loops(block=b92)
b112 = sch.decompose_reduction(block=b92, loop=l98)
b113 = sch.get_block(name="conv2d_nhwc_update", func_name="main")
b114 = sch.cache_read(block=b113, read_buffer_index=2, storage_scope="global")
sch.annotate(block_or_loop=b114, ann_key="meta_schedule.layout_rewrite_preproc", ann_val=1)
sch.transform_layout(block=b113, buffer=("read", 2), index_map=tvm.tir.IndexMap.from_func(lambda i0, i1, i2, i3: (T.Cast("int64", i3) // T.int64(256), T.Cast("int64", i3) % T.int64(256) // T.int64(128), T.Cast("int64", i2) // T.int64(32), T.Cast("int64", i3) % T.int64(128) // T.int64(4), T.Cast("int64", i2) % T.int64(32), T.Cast("int64", i3) % T.int64(4),), inverse_index_map=lambda i0, i1, i2, i3, i4, i5: (T.int64(0), T.int64(0), T.Cast("int64", i2) * T.int64(32) + T.Cast("int64", i4), T.Cast("int64", i0) * T.int64(256) + T.Cast("int64", i1) * T.int64(128) + T.Cast("int64", i3) * T.int64(4) + T.Cast("int64", i5),)), pad_value=None, assume_injective_transform=False)
2024-04-30 19:36:34 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_multiply_add_add_nn_relu_4] Trial #20: GFLOPs: 32.0345. Time: 131.5701 us. Best GFLOPs: 67.8841
2024-04-30 19:36:34 [INFO] [task_scheduler.cc:121] [Task #20: fused_nn_conv2d_add_multiply_add_add_nn_relu_4] Trial #21: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(4), T.int64(4), T.int64(512)), "float32"), p1: T.Buffer((T.int64(1), T.int64(1), T.int64(512), T.int64(1024)), "float32"), p2: T.Buffer((T.int64(1), T.int64(1), T.int64(1), T.int64(1024)), "float32"), p3: T.Buffer((T.int64(1), T.int64(1), T.int64(1), T.int64(1024)), "float32"), p4: T.Buffer((T.int64(1), T.int64(1), T.int64(1), T.int64(1024)), "float32"), p5: T.Buffer((T.int64(1), T.int64(2), T.int64(2), T.int64(1024)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(2), T.int64(2), T.int64(1024)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_nhwc = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(2), T.int64(1024)))
        p1_global = T.alloc_buffer((T.int64(8), T.int64(512), T.int64(128)))
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(512), T.int64(1024)):
            with T.block("p1_global"):
                v0, v1, v2, v3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(p1[v0, v1, v2, v3])
                T.writes(p1_global[v3 // T.int64(128), v2, v3 % T.int64(128)])
                T.block_attr({"meta_schedule.layout_rewrite_preproc": T.bool(True)})
                p1_global[v3 // T.int64(128), v2, v3 % T.int64(128)] = p1[v0, v1, v2, v3]
        for nn_0_yy_0_xx_0_ff_0_nn_1_yy_1_xx_1_ff_1_fused in T.parallel(T.int64(8), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for nn_2_init, yy_2_init, xx_2_init, ff_2_init, nn_3_init, yy_3_init, xx_3_init, ff_3_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(128), T.int64(1), T.int64(2), T.int64(2), T.int64(1)):
                with T.block("conv2d_nhwc_init"):
                    v_nn = T.axis.spatial(T.int64(1), nn_2_init + nn_3_init)
                    v_yy = T.axis.spatial(T.int64(2), yy_2_init * T.int64(2) + yy_3_init)
                    v_xx = T.axis.spatial(T.int64(2), xx_2_init * T.int64(2) + xx_3_init)
                    v_ff = T.axis.spatial(T.int64(1024), nn_0_yy_0_xx_0_ff_0_nn_1_yy_1_xx_1_ff_1_fused * T.int64(128) + ff_2_init + ff_3_init)
                    T.reads()
                    T.writes(conv2d_nhwc[v_nn, v_yy, v_xx, v_ff])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    conv2d_nhwc[v_nn, v_yy, v_xx, v_ff] = T.float32(0)
            for ry_0, rx_0, rc_0, nn_2, yy_2, xx_2, ff_2, ry_1, rx_1, rc_1, nn_3, yy_3, xx_3, ff_3 in T.grid(T.int64(1), T.int64(1), T.int64(512), T.int64(1), T.int64(1), T.int64(1), T.int64(128), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(1)):
                with T.block("conv2d_nhwc_update"):
                    v_nn = T.axis.spatial(T.int64(1), nn_2 + nn_3)
                    v_yy = T.axis.spatial(T.int64(2), yy_2 * T.int64(2) + yy_3)
                    v_xx = T.axis.spatial(T.int64(2), xx_2 * T.int64(2) + xx_3)
                    v_ff = T.axis.spatial(T.int64(1024), nn_0_yy_0_xx_0_ff_0_nn_1_yy_1_xx_1_ff_1_fused * T.int64(128) + ff_2 + ff_3)
                    v_ry = T.axis.reduce(T.int64(1), ry_0 + ry_1)
                    v_rx = T.axis.reduce(T.int64(1), rx_0 + rx_1)
                    v_rc = T.axis.reduce(T.int64(512), rc_0 + rc_1)
                    T.reads(conv2d_nhwc[v_nn, v_yy, v_xx, v_ff], p0[v_nn, v_yy * T.int64(2) + v_ry, v_xx * T.int64(2) + v_rx, v_rc], p1_global[v_ff // T.int64(128), v_rc, v_ff % T.int64(128)])
                    T.writes(conv2d_nhwc[v_nn, v_yy, v_xx, v_ff])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    conv2d_nhwc[v_nn, v_yy, v_xx, v_ff] = conv2d_nhwc[v_nn, v_yy, v_xx, v_ff] + p0[v_nn, v_yy * T.int64(2) + v_ry, v_xx * T.int64(2) + v_rx, v_rc] * p1_global[v_ff // T.int64(128), v_rc, v_ff % T.int64(128)]
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(2), T.int64(128)):
                with T.block("T_relu"):
                    v_ax0, v_ax1, v_ax2 = T.axis.remap("SSS", [ax0, ax1, ax2])
                    v_ax3 = T.axis.spatial(T.int64(1024), nn_0_yy_0_xx_0_ff_0_nn_1_yy_1_xx_1_ff_1_fused * T.int64(128) + ax3)
                    T.reads(conv2d_nhwc[v_ax0, v_ax1, v_ax2, v_ax3], p2[v_ax0, T.int64(0), T.int64(0), v_ax3], p3[v_ax0, T.int64(0), T.int64(0), v_ax3], p4[v_ax0, T.int64(0), T.int64(0), v_ax3], p5[v_ax0, v_ax1, v_ax2, v_ax3])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3] = T.max((conv2d_nhwc[v_ax0, v_ax1, v_ax2, v_ax3] + p2[v_ax0, T.int64(0), T.int64(0), v_ax3]) * p3[v_ax0, T.int64(0), T.int64(0), v_ax3] + p4[v_ax0, T.int64(0), T.int64(0), v_ax3] + p5[v_ax0, v_ax1, v_ax2, v_ax3], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nhwc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_multiply", func_name="main")
b4 = sch.get_block(name="T_add_1", func_name="main")
b5 = sch.get_block(name="T_add_2", func_name="main")
b6 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b5)
sch.compute_inline(block=b4)
sch.compute_inline(block=b3)
sch.compute_inline(block=b2)
sch.compute_inline(block=b0)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l7, l8, l9, l10, l11, l12, l13 = sch.get_loops(block=b1)
v14, v15, v16, v17 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l18, l19, l20, l21 = sch.split(loop=l7, factors=[v14, v15, v16, v17], preserve_unit_iters=True, disable_predication=False)
v22, v23, v24, v25 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 1, 1, 2])
l26, l27, l28, l29 = sch.split(loop=l8, factors=[v22, v23, v24, v25], preserve_unit_iters=True, disable_predication=False)
v30, v31, v32, v33 = sch.sample_perfect_tile(loop=l9, n=4, max_innermost_factor=64, decision=[1, 1, 1, 2])
l34, l35, l36, l37 = sch.split(loop=l9, factors=[v30, v31, v32, v33], preserve_unit_iters=True, disable_predication=False)
v38, v39, v40, v41 = sch.sample_perfect_tile(loop=l10, n=4, max_innermost_factor=64, decision=[2, 4, 128, 1])
l42, l43, l44, l45 = sch.split(loop=l10, factors=[v38, v39, v40, v41], preserve_unit_iters=True, disable_predication=False)
v46, v47 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 1])
l48, l49 = sch.split(loop=l11, factors=[v46, v47], preserve_unit_iters=True, disable_predication=False)
v50, v51 = sch.sample_perfect_tile(loop=l12, n=2, max_innermost_factor=64, decision=[1, 1])
l52, l53 = sch.split(loop=l12, factors=[v50, v51], preserve_unit_iters=True, disable_predication=False)
v54, v55 = sch.sample_perfect_tile(loop=l13, n=2, max_innermost_factor=64, decision=[512, 1])
l56, l57 = sch.split(loop=l13, factors=[v54, v55], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l18, l26, l34, l42, l19, l27, l35, l43, l48, l52, l56, l20, l28, l36, l44, l49, l53, l57, l21, l29, l37, l45)
b58, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b58, loop=l43, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.parallel", ann_val=96)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.vectorize", ann_val=64)
v59 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.unroll_explicit", ann_val=v59)
sch.enter_postproc()
b60 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b60, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b60, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b60, ann_key="meta_schedule.unroll_explicit")
b61, b62 = sch.get_child_blocks(b60)
l63, l64, l65, l66, l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b61)
l85 = sch.fuse(l63, l64, l65, l66, l67, l68, l69, l70, preserve_unit_iters=True)
sch.parallel(loop=l85)
sch.annotate(block_or_loop=l85, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l85, ann_key="pragma_unroll_explicit", ann_val=1)
l86, l87, l88, l89, l90 = sch.get_loops(block=b62)
b91 = sch.get_block(name="conv2d_nhwc", func_name="main")
l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103, l104, l105, l106 = sch.get_loops(block=b91)
b107 = sch.decompose_reduction(block=b91, loop=l93)
b108 = sch.get_block(name="conv2d_nhwc_update", func_name="main")
b109 = sch.cache_read(block=b108, read_buffer_index=2, storage_scope="global")
sch.annotate(block_or_loop=b109, ann_key="meta_schedule.layout_rewrite_preproc", ann_val=1)
sch.transform_layout(block=b108, buffer=("read", 2), index_map=tvm.tir.IndexMap.from_func(lambda i0, i1, i2, i3: (T.Cast("int64", i3) // T.int64(128), T.Cast("int64", i2), T.Cast("int64", i3) % T.int64(128),), inverse_index_map=lambda i0, i1, i2: (T.int64(0), T.int64(0), T.Cast("int64", i1), T.Cast("int64", i0) * T.int64(128) + T.Cast("int64", i2),)), pad_value=None, assume_injective_transform=False)
2024-04-30 19:36:34 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_multiply_add_add_nn_relu_4] Trial #22: GFLOPs: 40.6183. Time: 103.7658 us. Best GFLOPs: 67.8841
2024-04-30 19:36:34 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_multiply_add_add_nn_relu_4] Trial #23: GFLOPs: 20.4252. Time: 206.3520 us. Best GFLOPs: 67.8841
2024-04-30 19:36:34 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_multiply_add_add_nn_relu_4] Trial #24: GFLOPs: 9.4764. Time: 444.7679 us. Best GFLOPs: 67.8841
2024-04-30 19:36:34 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_multiply_add_add_nn_relu_4] Trial #25: GFLOPs: 8.3725. Time: 503.4094 us. Best GFLOPs: 67.8841
2024-04-30 19:36:34 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_multiply_add_add_nn_relu_4] Trial #26: GFLOPs: 27.5323. Time: 153.0852 us. Best GFLOPs: 67.8841
2024-04-30 19:36:34 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_multiply_add_add_nn_relu_4] Trial #27: GFLOPs: 15.5040. Time: 271.8521 us. Best GFLOPs: 67.8841
2024-04-30 19:36:34 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_multiply_add_add_nn_relu_4] Trial #28: GFLOPs: 23.6512. Time: 178.2058 us. Best GFLOPs: 67.8841
2024-04-30 19:36:34 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_multiply_add_add_nn_relu_4] Trial #29: GFLOPs: 26.4250. Time: 159.5001 us. Best GFLOPs: 67.8841
2024-04-30 19:36:34 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_multiply_add_add_nn_relu_4] Trial #30: GFLOPs: 9.6589. Time: 436.3606 us. Best GFLOPs: 67.8841
2024-04-30 19:36:34 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_multiply_add_add_nn_relu_4] Trial #31: GFLOPs: 16.1965. Time: 260.2273 us. Best GFLOPs: 67.8841
2024-04-30 19:36:34 [INFO] [task_scheduler.cc:121] [Task #20: fused_nn_conv2d_add_multiply_add_add_nn_relu_4] Trial #32: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(4), T.int64(4), T.int64(512)), "float32"), p1: T.Buffer((T.int64(1), T.int64(1), T.int64(512), T.int64(1024)), "float32"), p2: T.Buffer((T.int64(1), T.int64(1), T.int64(1), T.int64(1024)), "float32"), p3: T.Buffer((T.int64(1), T.int64(1), T.int64(1), T.int64(1024)), "float32"), p4: T.Buffer((T.int64(1), T.int64(1), T.int64(1), T.int64(1024)), "float32"), p5: T.Buffer((T.int64(1), T.int64(2), T.int64(2), T.int64(1024)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(2), T.int64(2), T.int64(1024)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_nhwc = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(2), T.int64(1024)))
        p1_global = T.alloc_buffer((T.int64(4), T.int64(16), T.int64(64), T.int64(8), T.int64(8), T.int64(2)))
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(512), T.int64(1024)):
            with T.block("p1_global"):
                v0, v1, v2, v3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(p1[v0, v1, v2, v3])
                T.writes(p1_global[v3 // T.int64(256), v3 % T.int64(256) // T.int64(16), v2 // T.int64(8), v3 % T.int64(16) // T.int64(2), v2 % T.int64(8), v3 % T.int64(2)])
                T.block_attr({"meta_schedule.layout_rewrite_preproc": T.bool(True)})
                p1_global[v3 // T.int64(256), v3 % T.int64(256) // T.int64(16), v2 // T.int64(8), v3 % T.int64(16) // T.int64(2), v2 % T.int64(8), v3 % T.int64(2)] = p1[v0, v1, v2, v3]
        for nn_0_yy_0_xx_0_ff_0_fused in T.parallel(T.int64(4), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for nn_1, yy_1, xx_1, ff_1 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(16)):
                for nn_2_init, yy_2_init, xx_2_init, ff_2_init, nn_3_init, yy_3_init, xx_3_init in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(8), T.int64(1), T.int64(2), T.int64(1)):
                    for ff_3_fused_init in T.vectorized(T.int64(2)):
                        with T.block("conv2d_nhwc_init"):
                            v_nn = T.axis.spatial(T.int64(1), nn_1 + nn_2_init + nn_3_init)
                            v_yy = T.axis.spatial(T.int64(2), yy_1 * T.int64(2) + yy_2_init * T.int64(2) + yy_3_init)
                            v_xx = T.axis.spatial(T.int64(2), xx_1 * T.int64(2) + xx_2_init + xx_3_init)
                            v_ff = T.axis.spatial(T.int64(1024), nn_0_yy_0_xx_0_ff_0_fused * T.int64(256) + ff_1 * T.int64(16) + ff_2_init * T.int64(2) + ff_3_fused_init)
                            T.reads()
                            T.writes(conv2d_nhwc[v_nn, v_yy, v_xx, v_ff])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_nhwc[v_nn, v_yy, v_xx, v_ff] = T.float32(0)
                for ry_0, rx_0, rc_0, nn_2, yy_2, xx_2, ff_2, ry_1, rx_1, rc_1, nn_3, yy_3, xx_3 in T.grid(T.int64(1), T.int64(1), T.int64(64), T.int64(1), T.int64(1), T.int64(2), T.int64(8), T.int64(1), T.int64(1), T.int64(8), T.int64(1), T.int64(2), T.int64(1)):
                    for ff_3_fused in T.vectorized(T.int64(2)):
                        with T.block("conv2d_nhwc_update"):
                            v_nn = T.axis.spatial(T.int64(1), nn_1 + nn_2 + nn_3)
                            v_yy = T.axis.spatial(T.int64(2), yy_1 * T.int64(2) + yy_2 * T.int64(2) + yy_3)
                            v_xx = T.axis.spatial(T.int64(2), xx_1 * T.int64(2) + xx_2 + xx_3)
                            v_ff = T.axis.spatial(T.int64(1024), nn_0_yy_0_xx_0_ff_0_fused * T.int64(256) + ff_1 * T.int64(16) + ff_2 * T.int64(2) + ff_3_fused)
                            v_ry = T.axis.reduce(T.int64(1), ry_0 + ry_1)
                            v_rx = T.axis.reduce(T.int64(1), rx_0 + rx_1)
                            v_rc = T.axis.reduce(T.int64(512), rc_0 * T.int64(8) + rc_1)
                            T.reads(conv2d_nhwc[v_nn, v_yy, v_xx, v_ff], p0[v_nn, v_yy * T.int64(2) + v_ry, v_xx * T.int64(2) + v_rx, v_rc], p1_global[v_ff // T.int64(256), v_ff % T.int64(256) // T.int64(16), v_rc // T.int64(8), v_ff % T.int64(16) // T.int64(2), v_rc % T.int64(8), v_ff % T.int64(2)])
                            T.writes(conv2d_nhwc[v_nn, v_yy, v_xx, v_ff])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_nhwc[v_nn, v_yy, v_xx, v_ff] = conv2d_nhwc[v_nn, v_yy, v_xx, v_ff] + p0[v_nn, v_yy * T.int64(2) + v_ry, v_xx * T.int64(2) + v_rx, v_rc] * p1_global[v_ff // T.int64(256), v_ff % T.int64(256) // T.int64(16), v_rc // T.int64(8), v_ff % T.int64(16) // T.int64(2), v_rc % T.int64(8), v_ff % T.int64(2)]
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(2), T.int64(256)):
                with T.block("T_relu"):
                    v_ax0, v_ax1, v_ax2 = T.axis.remap("SSS", [ax0, ax1, ax2])
                    v_ax3 = T.axis.spatial(T.int64(1024), nn_0_yy_0_xx_0_ff_0_fused * T.int64(256) + ax3)
                    T.reads(conv2d_nhwc[v_ax0, v_ax1, v_ax2, v_ax3], p2[v_ax0, T.int64(0), T.int64(0), v_ax3], p3[v_ax0, T.int64(0), T.int64(0), v_ax3], p4[v_ax0, T.int64(0), T.int64(0), v_ax3], p5[v_ax0, v_ax1, v_ax2, v_ax3])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3] = T.max((conv2d_nhwc[v_ax0, v_ax1, v_ax2, v_ax3] + p2[v_ax0, T.int64(0), T.int64(0), v_ax3]) * p3[v_ax0, T.int64(0), T.int64(0), v_ax3] + p4[v_ax0, T.int64(0), T.int64(0), v_ax3] + p5[v_ax0, v_ax1, v_ax2, v_ax3], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nhwc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_multiply", func_name="main")
b4 = sch.get_block(name="T_add_1", func_name="main")
b5 = sch.get_block(name="T_add_2", func_name="main")
b6 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b5)
sch.compute_inline(block=b4)
sch.compute_inline(block=b3)
sch.compute_inline(block=b2)
sch.compute_inline(block=b0)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l7, l8, l9, l10, l11, l12, l13 = sch.get_loops(block=b1)
v14, v15, v16, v17 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l18, l19, l20, l21 = sch.split(loop=l7, factors=[v14, v15, v16, v17], preserve_unit_iters=True, disable_predication=False)
v22, v23, v24, v25 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 1, 1, 2])
l26, l27, l28, l29 = sch.split(loop=l8, factors=[v22, v23, v24, v25], preserve_unit_iters=True, disable_predication=False)
v30, v31, v32, v33 = sch.sample_perfect_tile(loop=l9, n=4, max_innermost_factor=64, decision=[1, 1, 2, 1])
l34, l35, l36, l37 = sch.split(loop=l9, factors=[v30, v31, v32, v33], preserve_unit_iters=True, disable_predication=False)
v38, v39, v40, v41 = sch.sample_perfect_tile(loop=l10, n=4, max_innermost_factor=64, decision=[4, 16, 8, 2])
l42, l43, l44, l45 = sch.split(loop=l10, factors=[v38, v39, v40, v41], preserve_unit_iters=True, disable_predication=False)
v46, v47 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 1])
l48, l49 = sch.split(loop=l11, factors=[v46, v47], preserve_unit_iters=True, disable_predication=False)
v50, v51 = sch.sample_perfect_tile(loop=l12, n=2, max_innermost_factor=64, decision=[1, 1])
l52, l53 = sch.split(loop=l12, factors=[v50, v51], preserve_unit_iters=True, disable_predication=False)
v54, v55 = sch.sample_perfect_tile(loop=l13, n=2, max_innermost_factor=64, decision=[64, 8])
l56, l57 = sch.split(loop=l13, factors=[v54, v55], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l18, l26, l34, l42, l19, l27, l35, l43, l48, l52, l56, l20, l28, l36, l44, l49, l53, l57, l21, l29, l37, l45)
b58, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b58, loop=l42, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.parallel", ann_val=96)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.vectorize", ann_val=64)
v59 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.unroll_explicit", ann_val=v59)
sch.enter_postproc()
b60 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b60, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b60, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b60, ann_key="meta_schedule.unroll_explicit")
b61, b62 = sch.get_child_blocks(b60)
l63, l64, l65, l66, l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b61)
l85 = sch.fuse(l63, l64, l65, l66, preserve_unit_iters=True)
sch.parallel(loop=l85)
l86 = sch.fuse(l84, preserve_unit_iters=True)
sch.vectorize(loop=l86)
sch.annotate(block_or_loop=l85, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l85, ann_key="pragma_unroll_explicit", ann_val=1)
l87, l88, l89, l90, l91 = sch.get_loops(block=b62)
b92 = sch.get_block(name="conv2d_nhwc", func_name="main")
l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103, l104, l105, l106, l107, l108, l109, l110, l111 = sch.get_loops(block=b92)
b112 = sch.decompose_reduction(block=b92, loop=l98)
b113 = sch.get_block(name="conv2d_nhwc_update", func_name="main")
b114 = sch.cache_read(block=b113, read_buffer_index=2, storage_scope="global")
sch.annotate(block_or_loop=b114, ann_key="meta_schedule.layout_rewrite_preproc", ann_val=1)
sch.transform_layout(block=b113, buffer=("read", 2), index_map=tvm.tir.IndexMap.from_func(lambda i0, i1, i2, i3: (T.Cast("int64", i3) // T.int64(256), T.Cast("int64", i3) % T.int64(256) // T.int64(16), T.Cast("int64", i2) // T.int64(8), T.Cast("int64", i3) % T.int64(16) // T.int64(2), T.Cast("int64", i2) % T.int64(8), T.Cast("int64", i3) % T.int64(2),), inverse_index_map=lambda i0, i1, i2, i3, i4, i5: (T.int64(0), T.int64(0), T.Cast("int64", i2) * T.int64(8) + T.Cast("int64", i4), T.Cast("int64", i0) * T.int64(256) + T.Cast("int64", i1) * T.int64(16) + T.Cast("int64", i3) * T.int64(2) + T.Cast("int64", i5),)), pad_value=None, assume_injective_transform=False)
2024-04-30 19:36:34 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_multiply_add_add_nn_relu_4] Trial #33: GFLOPs: 40.4596. Time: 104.1726 us. Best GFLOPs: 67.8841
2024-04-30 19:36:34 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_multiply_add_add_nn_relu_4] Trial #34: GFLOPs: 14.6700. Time: 287.3072 us. Best GFLOPs: 67.8841
2024-04-30 19:36:34 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_multiply_add_add_nn_relu_4] Trial #35: GFLOPs: 12.6403. Time: 333.4413 us. Best GFLOPs: 67.8841
2024-04-30 19:36:34 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_multiply_add_add_nn_relu_4] Trial #36: GFLOPs: 12.8657. Time: 327.5981 us. Best GFLOPs: 67.8841
2024-04-30 19:36:34 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_multiply_add_add_nn_relu_4] Trial #37: GFLOPs: 10.1318. Time: 415.9956 us. Best GFLOPs: 67.8841
2024-04-30 19:36:34 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_multiply_add_add_nn_relu_4] Trial #38: GFLOPs: 21.7584. Time: 193.7083 us. Best GFLOPs: 67.8841
2024-04-30 19:36:34 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_multiply_add_add_nn_relu_4] Trial #39: GFLOPs: 18.9522. Time: 222.3904 us. Best GFLOPs: 67.8841
2024-04-30 19:36:34 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_multiply_add_add_nn_relu_4] Trial #40: GFLOPs: 30.0384. Time: 140.3133 us. Best GFLOPs: 67.8841
2024-04-30 19:36:34 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_multiply_add_add_nn_relu_4] Trial #41: GFLOPs: 16.0117. Time: 263.2312 us. Best GFLOPs: 67.8841
2024-04-30 19:36:34 [INFO] [task_scheduler.cc:121] [Task #20: fused_nn_conv2d_add_multiply_add_add_nn_relu_4] Trial #42: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(4), T.int64(4), T.int64(512)), "float32"), p1: T.Buffer((T.int64(1), T.int64(1), T.int64(512), T.int64(1024)), "float32"), p2: T.Buffer((T.int64(1), T.int64(1), T.int64(1), T.int64(1024)), "float32"), p3: T.Buffer((T.int64(1), T.int64(1), T.int64(1), T.int64(1024)), "float32"), p4: T.Buffer((T.int64(1), T.int64(1), T.int64(1), T.int64(1024)), "float32"), p5: T.Buffer((T.int64(1), T.int64(2), T.int64(2), T.int64(1024)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(2), T.int64(2), T.int64(1024)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_nhwc = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(2), T.int64(1024)))
        p1_global = T.alloc_buffer((T.int64(8), T.int64(2), T.int64(8), T.int64(64), T.int64(64)))
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(512), T.int64(1024)):
            with T.block("p1_global"):
                v0, v1, v2, v3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(p1[v0, v1, v2, v3])
                T.writes(p1_global[v3 // T.int64(128), v3 % T.int64(128) // T.int64(64), v2 // T.int64(64), v2 % T.int64(64), v3 % T.int64(64)])
                T.block_attr({"meta_schedule.layout_rewrite_preproc": T.bool(True)})
                p1_global[v3 // T.int64(128), v3 % T.int64(128) // T.int64(64), v2 // T.int64(64), v2 % T.int64(64), v3 % T.int64(64)] = p1[v0, v1, v2, v3]
        for nn_0_yy_0_xx_0_ff_0_fused in T.parallel(T.int64(8), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for nn_1, yy_1, xx_1, ff_1 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(2)):
                for nn_2_init, yy_2_init, xx_2_init, ff_2_init, nn_3_init, yy_3_init, xx_3_init in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(2), T.int64(1)):
                    for ff_3_fused_init in T.vectorized(T.int64(64)):
                        with T.block("conv2d_nhwc_init"):
                            v_nn = T.axis.spatial(T.int64(1), nn_1 + nn_2_init + nn_3_init)
                            v_yy = T.axis.spatial(T.int64(2), yy_1 * T.int64(2) + yy_2_init * T.int64(2) + yy_3_init)
                            v_xx = T.axis.spatial(T.int64(2), xx_1 * T.int64(2) + xx_2_init + xx_3_init)
                            v_ff = T.axis.spatial(T.int64(1024), nn_0_yy_0_xx_0_ff_0_fused * T.int64(128) + ff_1 * T.int64(64) + ff_2_init * T.int64(64) + ff_3_fused_init)
                            T.reads()
                            T.writes(conv2d_nhwc[v_nn, v_yy, v_xx, v_ff])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_nhwc[v_nn, v_yy, v_xx, v_ff] = T.float32(0)
                for ry_0, rx_0, rc_0, nn_2, yy_2, xx_2, ff_2, ry_1, rx_1, rc_1, nn_3, yy_3, xx_3 in T.grid(T.int64(1), T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(64), T.int64(1), T.int64(2), T.int64(1)):
                    for ff_3_fused in T.vectorized(T.int64(64)):
                        with T.block("conv2d_nhwc_update"):
                            v_nn = T.axis.spatial(T.int64(1), nn_1 + nn_2 + nn_3)
                            v_yy = T.axis.spatial(T.int64(2), yy_1 * T.int64(2) + yy_2 * T.int64(2) + yy_3)
                            v_xx = T.axis.spatial(T.int64(2), xx_1 * T.int64(2) + xx_2 + xx_3)
                            v_ff = T.axis.spatial(T.int64(1024), nn_0_yy_0_xx_0_ff_0_fused * T.int64(128) + ff_1 * T.int64(64) + ff_2 * T.int64(64) + ff_3_fused)
                            v_ry = T.axis.reduce(T.int64(1), ry_0 + ry_1)
                            v_rx = T.axis.reduce(T.int64(1), rx_0 + rx_1)
                            v_rc = T.axis.reduce(T.int64(512), rc_0 * T.int64(64) + rc_1)
                            T.reads(conv2d_nhwc[v_nn, v_yy, v_xx, v_ff], p0[v_nn, v_yy * T.int64(2) + v_ry, v_xx * T.int64(2) + v_rx, v_rc], p1_global[v_ff // T.int64(128), v_ff % T.int64(128) // T.int64(64), v_rc // T.int64(64), v_rc % T.int64(64), v_ff % T.int64(64)])
                            T.writes(conv2d_nhwc[v_nn, v_yy, v_xx, v_ff])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_nhwc[v_nn, v_yy, v_xx, v_ff] = conv2d_nhwc[v_nn, v_yy, v_xx, v_ff] + p0[v_nn, v_yy * T.int64(2) + v_ry, v_xx * T.int64(2) + v_rx, v_rc] * p1_global[v_ff // T.int64(128), v_ff % T.int64(128) // T.int64(64), v_rc // T.int64(64), v_rc % T.int64(64), v_ff % T.int64(64)]
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(2), T.int64(128)):
                with T.block("T_relu"):
                    v_ax0, v_ax1, v_ax2 = T.axis.remap("SSS", [ax0, ax1, ax2])
                    v_ax3 = T.axis.spatial(T.int64(1024), nn_0_yy_0_xx_0_ff_0_fused * T.int64(128) + ax3)
                    T.reads(conv2d_nhwc[v_ax0, v_ax1, v_ax2, v_ax3], p2[v_ax0, T.int64(0), T.int64(0), v_ax3], p3[v_ax0, T.int64(0), T.int64(0), v_ax3], p4[v_ax0, T.int64(0), T.int64(0), v_ax3], p5[v_ax0, v_ax1, v_ax2, v_ax3])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3] = T.max((conv2d_nhwc[v_ax0, v_ax1, v_ax2, v_ax3] + p2[v_ax0, T.int64(0), T.int64(0), v_ax3]) * p3[v_ax0, T.int64(0), T.int64(0), v_ax3] + p4[v_ax0, T.int64(0), T.int64(0), v_ax3] + p5[v_ax0, v_ax1, v_ax2, v_ax3], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nhwc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_multiply", func_name="main")
b4 = sch.get_block(name="T_add_1", func_name="main")
b5 = sch.get_block(name="T_add_2", func_name="main")
b6 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b5)
sch.compute_inline(block=b4)
sch.compute_inline(block=b3)
sch.compute_inline(block=b2)
sch.compute_inline(block=b0)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l7, l8, l9, l10, l11, l12, l13 = sch.get_loops(block=b1)
v14, v15, v16, v17 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l18, l19, l20, l21 = sch.split(loop=l7, factors=[v14, v15, v16, v17], preserve_unit_iters=True, disable_predication=False)
v22, v23, v24, v25 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 1, 1, 2])
l26, l27, l28, l29 = sch.split(loop=l8, factors=[v22, v23, v24, v25], preserve_unit_iters=True, disable_predication=False)
v30, v31, v32, v33 = sch.sample_perfect_tile(loop=l9, n=4, max_innermost_factor=64, decision=[1, 1, 2, 1])
l34, l35, l36, l37 = sch.split(loop=l9, factors=[v30, v31, v32, v33], preserve_unit_iters=True, disable_predication=False)
v38, v39, v40, v41 = sch.sample_perfect_tile(loop=l10, n=4, max_innermost_factor=64, decision=[8, 2, 1, 64])
l42, l43, l44, l45 = sch.split(loop=l10, factors=[v38, v39, v40, v41], preserve_unit_iters=True, disable_predication=False)
v46, v47 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 1])
l48, l49 = sch.split(loop=l11, factors=[v46, v47], preserve_unit_iters=True, disable_predication=False)
v50, v51 = sch.sample_perfect_tile(loop=l12, n=2, max_innermost_factor=64, decision=[1, 1])
l52, l53 = sch.split(loop=l12, factors=[v50, v51], preserve_unit_iters=True, disable_predication=False)
v54, v55 = sch.sample_perfect_tile(loop=l13, n=2, max_innermost_factor=64, decision=[8, 64])
l56, l57 = sch.split(loop=l13, factors=[v54, v55], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l18, l26, l34, l42, l19, l27, l35, l43, l48, l52, l56, l20, l28, l36, l44, l49, l53, l57, l21, l29, l37, l45)
b58, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b58, loop=l42, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.parallel", ann_val=96)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.vectorize", ann_val=64)
v59 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.unroll_explicit", ann_val=v59)
sch.enter_postproc()
b60 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b60, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b60, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b60, ann_key="meta_schedule.unroll_explicit")
b61, b62 = sch.get_child_blocks(b60)
l63, l64, l65, l66, l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b61)
l85 = sch.fuse(l63, l64, l65, l66, preserve_unit_iters=True)
sch.parallel(loop=l85)
l86 = sch.fuse(l84, preserve_unit_iters=True)
sch.vectorize(loop=l86)
sch.annotate(block_or_loop=l85, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l85, ann_key="pragma_unroll_explicit", ann_val=1)
l87, l88, l89, l90, l91 = sch.get_loops(block=b62)
b92 = sch.get_block(name="conv2d_nhwc", func_name="main")
l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103, l104, l105, l106, l107, l108, l109, l110, l111 = sch.get_loops(block=b92)
b112 = sch.decompose_reduction(block=b92, loop=l98)
b113 = sch.get_block(name="conv2d_nhwc_update", func_name="main")
b114 = sch.cache_read(block=b113, read_buffer_index=2, storage_scope="global")
sch.annotate(block_or_loop=b114, ann_key="meta_schedule.layout_rewrite_preproc", ann_val=1)
sch.transform_layout(block=b113, buffer=("read", 2), index_map=tvm.tir.IndexMap.from_func(lambda i0, i1, i2, i3: (T.Cast("int64", i3) // T.int64(128), T.Cast("int64", i3) % T.int64(128) // T.int64(64), T.Cast("int64", i2) // T.int64(64), T.Cast("int64", i2) % T.int64(64), T.Cast("int64", i3) % T.int64(64),), inverse_index_map=lambda i0, i1, i2, i3, i4: (T.int64(0), T.int64(0), T.Cast("int64", i2) * T.int64(64) + T.Cast("int64", i3), T.Cast("int64", i0) * T.int64(128) + T.Cast("int64", i1) * T.int64(64) + T.Cast("int64", i4),)), pad_value=None, assume_injective_transform=False)
2024-04-30 19:36:34 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_multiply_add_add_nn_relu_4] Trial #43: GFLOPs: 9.7878. Time: 430.6157 us. Best GFLOPs: 67.8841
2024-04-30 19:36:34 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_multiply_add_add_nn_relu_4] Trial #44: GFLOPs: 17.2681. Time: 244.0795 us. Best GFLOPs: 67.8841
2024-04-30 19:36:34 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_multiply_add_add_nn_relu_4] Trial #45: GFLOPs: 5.0924. Time: 827.6626 us. Best GFLOPs: 67.8841
2024-04-30 19:36:34 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_multiply_add_add_nn_relu_4] Trial #46: GFLOPs: 6.0695. Time: 694.4237 us. Best GFLOPs: 67.8841
2024-04-30 19:36:34 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_multiply_add_add_nn_relu_4] Trial #47: GFLOPs: 8.8045. Time: 478.7068 us. Best GFLOPs: 67.8841
2024-04-30 19:36:34 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_multiply_add_add_nn_relu_4] Trial #48: GFLOPs: 50.3539. Time: 83.7033 us. Best GFLOPs: 67.8841
2024-04-30 19:36:34 [INFO] [task_scheduler.cc:121] [Task #20: fused_nn_conv2d_add_multiply_add_add_nn_relu_4] Trial #49: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(4), T.int64(4), T.int64(512)), "float32"), p1: T.Buffer((T.int64(1), T.int64(1), T.int64(512), T.int64(1024)), "float32"), p2: T.Buffer((T.int64(1), T.int64(1), T.int64(1), T.int64(1024)), "float32"), p3: T.Buffer((T.int64(1), T.int64(1), T.int64(1), T.int64(1024)), "float32"), p4: T.Buffer((T.int64(1), T.int64(1), T.int64(1), T.int64(1024)), "float32"), p5: T.Buffer((T.int64(1), T.int64(2), T.int64(2), T.int64(1024)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(2), T.int64(2), T.int64(1024)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_nhwc = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(2), T.int64(1024)))
        p1_global = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(128), T.int64(32), T.int64(4), T.int64(2)))
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(512), T.int64(1024)):
            with T.block("p1_global"):
                v0, v1, v2, v3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(p1[v0, v1, v2, v3])
                T.writes(p1_global[v3 // T.int64(256), v3 % T.int64(256) // T.int64(64), v2 // T.int64(4), v3 % T.int64(64) // T.int64(2), v2 % T.int64(4), v3 % T.int64(2)])
                T.block_attr({"meta_schedule.layout_rewrite_preproc": T.bool(True)})
                p1_global[v3 // T.int64(256), v3 % T.int64(256) // T.int64(64), v2 // T.int64(4), v3 % T.int64(64) // T.int64(2), v2 % T.int64(4), v3 % T.int64(2)] = p1[v0, v1, v2, v3]
        for nn_0_yy_0_xx_0_ff_0_fused in T.parallel(T.int64(8), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for nn_1, yy_1, xx_1, ff_1 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(4)):
                for nn_2_init, yy_2_init, xx_2_init, ff_2_init, nn_3_init, yy_3_init, xx_3_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(2)):
                    for ff_3_fused_init in T.vectorized(T.int64(2)):
                        with T.block("conv2d_nhwc_init"):
                            v_nn = T.axis.spatial(T.int64(1), nn_1 + nn_2_init + nn_3_init)
                            v_yy = T.axis.spatial(T.int64(2), nn_0_yy_0_xx_0_ff_0_fused // T.int64(4) + yy_1 + yy_2_init + yy_3_init)
                            v_xx = T.axis.spatial(T.int64(2), xx_1 * T.int64(2) + xx_2_init * T.int64(2) + xx_3_init)
                            v_ff = T.axis.spatial(T.int64(1024), nn_0_yy_0_xx_0_ff_0_fused % T.int64(4) * T.int64(256) + ff_1 * T.int64(64) + ff_2_init * T.int64(2) + ff_3_fused_init)
                            T.reads()
                            T.writes(conv2d_nhwc[v_nn, v_yy, v_xx, v_ff])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_nhwc[v_nn, v_yy, v_xx, v_ff] = T.float32(0)
                for ry_0, rx_0, rc_0, nn_2, yy_2, xx_2, ff_2, ry_1, rx_1, rc_1, nn_3, yy_3, xx_3 in T.grid(T.int64(1), T.int64(1), T.int64(128), T.int64(1), T.int64(1), T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(2)):
                    for ff_3_fused in T.vectorized(T.int64(2)):
                        with T.block("conv2d_nhwc_update"):
                            v_nn = T.axis.spatial(T.int64(1), nn_1 + nn_2 + nn_3)
                            v_yy = T.axis.spatial(T.int64(2), nn_0_yy_0_xx_0_ff_0_fused // T.int64(4) + yy_1 + yy_2 + yy_3)
                            v_xx = T.axis.spatial(T.int64(2), xx_1 * T.int64(2) + xx_2 * T.int64(2) + xx_3)
                            v_ff = T.axis.spatial(T.int64(1024), nn_0_yy_0_xx_0_ff_0_fused % T.int64(4) * T.int64(256) + ff_1 * T.int64(64) + ff_2 * T.int64(2) + ff_3_fused)
                            v_ry = T.axis.reduce(T.int64(1), ry_0 + ry_1)
                            v_rx = T.axis.reduce(T.int64(1), rx_0 + rx_1)
                            v_rc = T.axis.reduce(T.int64(512), rc_0 * T.int64(4) + rc_1)
                            T.reads(conv2d_nhwc[v_nn, v_yy, v_xx, v_ff], p0[v_nn, v_yy * T.int64(2) + v_ry, v_xx * T.int64(2) + v_rx, v_rc], p1_global[v_ff // T.int64(256), v_ff % T.int64(256) // T.int64(64), v_rc // T.int64(4), v_ff % T.int64(64) // T.int64(2), v_rc % T.int64(4), v_ff % T.int64(2)])
                            T.writes(conv2d_nhwc[v_nn, v_yy, v_xx, v_ff])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_nhwc[v_nn, v_yy, v_xx, v_ff] = conv2d_nhwc[v_nn, v_yy, v_xx, v_ff] + p0[v_nn, v_yy * T.int64(2) + v_ry, v_xx * T.int64(2) + v_rx, v_rc] * p1_global[v_ff // T.int64(256), v_ff % T.int64(256) // T.int64(64), v_rc // T.int64(4), v_ff % T.int64(64) // T.int64(2), v_rc % T.int64(4), v_ff % T.int64(2)]
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(256)):
                with T.block("T_relu"):
                    v_ax0 = T.axis.spatial(T.int64(1), ax0)
                    v_ax1 = T.axis.spatial(T.int64(2), nn_0_yy_0_xx_0_ff_0_fused // T.int64(4) + ax1)
                    v_ax2 = T.axis.spatial(T.int64(2), ax2)
                    v_ax3 = T.axis.spatial(T.int64(1024), nn_0_yy_0_xx_0_ff_0_fused % T.int64(4) * T.int64(256) + ax3)
                    T.reads(conv2d_nhwc[v_ax0, v_ax1, v_ax2, v_ax3], p2[v_ax0, T.int64(0), T.int64(0), v_ax3], p3[v_ax0, T.int64(0), T.int64(0), v_ax3], p4[v_ax0, T.int64(0), T.int64(0), v_ax3], p5[v_ax0, v_ax1, v_ax2, v_ax3])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3] = T.max((conv2d_nhwc[v_ax0, v_ax1, v_ax2, v_ax3] + p2[v_ax0, T.int64(0), T.int64(0), v_ax3]) * p3[v_ax0, T.int64(0), T.int64(0), v_ax3] + p4[v_ax0, T.int64(0), T.int64(0), v_ax3] + p5[v_ax0, v_ax1, v_ax2, v_ax3], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nhwc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_multiply", func_name="main")
b4 = sch.get_block(name="T_add_1", func_name="main")
b5 = sch.get_block(name="T_add_2", func_name="main")
b6 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b5)
sch.compute_inline(block=b4)
sch.compute_inline(block=b3)
sch.compute_inline(block=b2)
sch.compute_inline(block=b0)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l7, l8, l9, l10, l11, l12, l13 = sch.get_loops(block=b1)
v14, v15, v16, v17 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l18, l19, l20, l21 = sch.split(loop=l7, factors=[v14, v15, v16, v17], preserve_unit_iters=True, disable_predication=False)
v22, v23, v24, v25 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[2, 1, 1, 1])
l26, l27, l28, l29 = sch.split(loop=l8, factors=[v22, v23, v24, v25], preserve_unit_iters=True, disable_predication=False)
v30, v31, v32, v33 = sch.sample_perfect_tile(loop=l9, n=4, max_innermost_factor=64, decision=[1, 1, 1, 2])
l34, l35, l36, l37 = sch.split(loop=l9, factors=[v30, v31, v32, v33], preserve_unit_iters=True, disable_predication=False)
v38, v39, v40, v41 = sch.sample_perfect_tile(loop=l10, n=4, max_innermost_factor=64, decision=[4, 4, 32, 2])
l42, l43, l44, l45 = sch.split(loop=l10, factors=[v38, v39, v40, v41], preserve_unit_iters=True, disable_predication=False)
v46, v47 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 1])
l48, l49 = sch.split(loop=l11, factors=[v46, v47], preserve_unit_iters=True, disable_predication=False)
v50, v51 = sch.sample_perfect_tile(loop=l12, n=2, max_innermost_factor=64, decision=[1, 1])
l52, l53 = sch.split(loop=l12, factors=[v50, v51], preserve_unit_iters=True, disable_predication=False)
v54, v55 = sch.sample_perfect_tile(loop=l13, n=2, max_innermost_factor=64, decision=[128, 4])
l56, l57 = sch.split(loop=l13, factors=[v54, v55], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l18, l26, l34, l42, l19, l27, l35, l43, l48, l52, l56, l20, l28, l36, l44, l49, l53, l57, l21, l29, l37, l45)
b58, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b58, loop=l42, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.parallel", ann_val=96)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.vectorize", ann_val=64)
v59 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.unroll_explicit", ann_val=v59)
sch.enter_postproc()
b60 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b60, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b60, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b60, ann_key="meta_schedule.unroll_explicit")
b61, b62 = sch.get_child_blocks(b60)
l63, l64, l65, l66, l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b61)
l85 = sch.fuse(l63, l64, l65, l66, preserve_unit_iters=True)
sch.parallel(loop=l85)
l86 = sch.fuse(l84, preserve_unit_iters=True)
sch.vectorize(loop=l86)
sch.annotate(block_or_loop=l85, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l85, ann_key="pragma_unroll_explicit", ann_val=1)
l87, l88, l89, l90, l91 = sch.get_loops(block=b62)
b92 = sch.get_block(name="conv2d_nhwc", func_name="main")
l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103, l104, l105, l106, l107, l108, l109, l110, l111 = sch.get_loops(block=b92)
b112 = sch.decompose_reduction(block=b92, loop=l98)
b113 = sch.get_block(name="conv2d_nhwc_update", func_name="main")
b114 = sch.cache_read(block=b113, read_buffer_index=2, storage_scope="global")
sch.annotate(block_or_loop=b114, ann_key="meta_schedule.layout_rewrite_preproc", ann_val=1)
sch.transform_layout(block=b113, buffer=("read", 2), index_map=tvm.tir.IndexMap.from_func(lambda i0, i1, i2, i3: (T.Cast("int64", i3) // T.int64(256), T.Cast("int64", i3) % T.int64(256) // T.int64(64), T.Cast("int64", i2) // T.int64(4), T.Cast("int64", i3) % T.int64(64) // T.int64(2), T.Cast("int64", i2) % T.int64(4), T.Cast("int64", i3) % T.int64(2),), inverse_index_map=lambda i0, i1, i2, i3, i4, i5: (T.int64(0), T.int64(0), T.Cast("int64", i2) * T.int64(4) + T.Cast("int64", i4), T.Cast("int64", i0) * T.int64(256) + T.Cast("int64", i1) * T.int64(64) + T.Cast("int64", i3) * T.int64(2) + T.Cast("int64", i5),)), pad_value=None, assume_injective_transform=False)
2024-04-30 19:36:34 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_multiply_add_add_nn_relu_4] Trial #50: GFLOPs: 23.0231. Time: 183.0679 us. Best GFLOPs: 67.8841
2024-04-30 19:36:34 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_multiply_add_add_nn_relu_4] Trial #51: GFLOPs: 7.5933. Time: 555.0652 us. Best GFLOPs: 67.8841
2024-04-30 19:36:34 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_multiply_add_add_nn_relu_4] Trial #52: GFLOPs: 6.7896. Time: 620.7687 us. Best GFLOPs: 67.8841
2024-04-30 19:36:34 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_multiply_add_add_nn_relu_4] Trial #53: GFLOPs: 37.1780. Time: 113.3676 us. Best GFLOPs: 67.8841
2024-04-30 19:36:34 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_multiply_add_add_nn_relu_4] Trial #54: GFLOPs: 20.1729. Time: 208.9331 us. Best GFLOPs: 67.8841
2024-04-30 19:36:34 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_multiply_add_add_nn_relu_4] Trial #55: GFLOPs: 9.0929. Time: 463.5257 us. Best GFLOPs: 67.8841
2024-04-30 19:36:34 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_multiply_add_add_nn_relu_4] Trial #56: GFLOPs: 17.7654. Time: 237.2472 us. Best GFLOPs: 67.8841
2024-04-30 19:36:34 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_multiply_add_add_nn_relu_4] Trial #57: GFLOPs: 22.4851. Time: 187.4480 us. Best GFLOPs: 67.8841
2024-04-30 19:36:34 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_multiply_add_add_nn_relu_4] Trial #58: GFLOPs: 28.2201. Time: 149.3538 us. Best GFLOPs: 67.8841
2024-04-30 19:36:34 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_multiply_add_add_nn_relu_4] Trial #59: GFLOPs: 24.2915. Time: 173.5089 us. Best GFLOPs: 67.8841
2024-04-30 19:36:34 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_multiply_add_add_nn_relu_4] Trial #60: GFLOPs: 12.0912. Time: 348.5814 us. Best GFLOPs: 67.8841
2024-04-30 19:36:34 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_multiply_add_add_nn_relu_4] Trial #61: GFLOPs: 28.5423. Time: 147.6679 us. Best GFLOPs: 67.8841
2024-04-30 19:36:34 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_multiply_add_add_nn_relu_4] Trial #62: GFLOPs: 42.8067. Time: 98.4609 us. Best GFLOPs: 67.8841
2024-04-30 19:36:34 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_multiply_add_add_nn_relu_4] Trial #63: GFLOPs: 22.7118. Time: 185.5767 us. Best GFLOPs: 67.8841
2024-04-30 19:36:34 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_multiply_add_add_nn_relu_4] Trial #64: GFLOPs: 20.6342. Time: 204.2617 us. Best GFLOPs: 67.8841
2024-04-30 20:04:54 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-30 20:04:54 [INFO] [evolutionary_search.cc:715] Picked top 57 candidate(s) from database
2024-04-30 20:04:56 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc0ecbb8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x21915aa8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x7490d68)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x150628c8)]: 0 failure(s)
2024-04-30 20:04:56 [INFO] [evolutionary_search.cc:723] Sampled 455 candidate(s)
2024-04-30 20:05:00 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc0ecbb8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x21915aa8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x7490d68)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x150628c8)]: 0 failure(s)
2024-04-30 20:05:04 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc0ecbb8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x21915aa8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x7490d68)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x150628c8)]: 0 failure(s)
2024-04-30 20:05:08 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc0ecbb8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x21915aa8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x7490d68)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x150628c8)]: 0 failure(s)
2024-04-30 20:05:12 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc0ecbb8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x21915aa8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x7490d68)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x150628c8)]: 0 failure(s)
2024-04-30 20:05:14 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.8279  0.8278  0.8154  0.8154  0.8149  0.8149  0.8140  0.8085  0.8082  0.8067  0.7995  0.7967  0.7966  0.7962  0.7962  0.7962
[17 : 32]:	0.7944  0.7940  0.7908  0.7908  0.7908  0.7903  0.7832  0.7804  0.7779  0.7775  0.7775  0.7727  0.7725  0.7650  0.7628  0.7607
[33 : 48]:	0.7607  0.7577  0.7575  0.7571  0.7505  0.7504  0.7494  0.7489  0.7472  0.7451  0.7448  0.7434  0.7434  0.7434  0.7404  0.7404
[49 : 64]:	0.7401  0.7354  0.7354  0.7336  0.7336  0.7330  0.7286  0.7279  0.7245  0.7215  0.7202  0.7183  0.7145  0.7143  0.7137  0.7115
2024-04-30 20:05:15 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-30 20:05:15 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-30 20:05:38 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_multiply_add_add_nn_relu_4] Trial #65: GFLOPs: 70.7773. Time: 59.5500 us. Best GFLOPs: 70.7773
2024-04-30 20:05:38 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_multiply_add_add_nn_relu_4] Trial #66: GFLOPs: 75.1170. Time: 56.1096 us. Best GFLOPs: 75.1170
2024-04-30 20:05:38 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_multiply_add_add_nn_relu_4] Trial #67: GFLOPs: 59.0763. Time: 71.3448 us. Best GFLOPs: 75.1170
2024-04-30 20:05:38 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_multiply_add_add_nn_relu_4] Trial #68: GFLOPs: 80.3138. Time: 52.4789 us. Best GFLOPs: 80.3138
2024-04-30 20:05:38 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_multiply_add_add_nn_relu_4] Trial #69: GFLOPs: 65.1135. Time: 64.7298 us. Best GFLOPs: 80.3138
2024-04-30 20:05:38 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_multiply_add_add_nn_relu_4] Trial #70: GFLOPs: 60.1433. Time: 70.0790 us. Best GFLOPs: 80.3138
2024-04-30 20:05:38 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_multiply_add_add_nn_relu_4] Trial #71: GFLOPs: 73.2427. Time: 57.5454 us. Best GFLOPs: 80.3138
2024-04-30 20:05:38 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_multiply_add_add_nn_relu_4] Trial #72: GFLOPs: 77.3220. Time: 54.5095 us. Best GFLOPs: 80.3138
2024-04-30 20:05:38 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_multiply_add_add_nn_relu_4] Trial #73: GFLOPs: 63.4824. Time: 66.3929 us. Best GFLOPs: 80.3138
2024-04-30 20:05:38 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_multiply_add_add_nn_relu_4] Trial #74: GFLOPs: 54.6422. Time: 77.1342 us. Best GFLOPs: 80.3138
2024-04-30 20:05:38 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_multiply_add_add_nn_relu_4] Trial #75: GFLOPs: 48.3601. Time: 87.1542 us. Best GFLOPs: 80.3138
2024-04-30 20:05:38 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_multiply_add_add_nn_relu_4] Trial #76: GFLOPs: 50.8244. Time: 82.9284 us. Best GFLOPs: 80.3138
2024-04-30 20:05:38 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_multiply_add_add_nn_relu_4] Trial #77: GFLOPs: 52.7592. Time: 79.8871 us. Best GFLOPs: 80.3138
2024-04-30 20:05:38 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_multiply_add_add_nn_relu_4] Trial #78: GFLOPs: 65.4228. Time: 64.4238 us. Best GFLOPs: 80.3138
2024-04-30 20:05:38 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_multiply_add_add_nn_relu_4] Trial #79: GFLOPs: 53.1259. Time: 79.3357 us. Best GFLOPs: 80.3138
2024-04-30 20:05:38 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_multiply_add_add_nn_relu_4] Trial #80: GFLOPs: 63.6810. Time: 66.1859 us. Best GFLOPs: 80.3138
2024-04-30 20:05:38 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_multiply_add_add_nn_relu_4] Trial #81: GFLOPs: 61.9419. Time: 68.0442 us. Best GFLOPs: 80.3138
2024-04-30 20:05:38 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_multiply_add_add_nn_relu_4] Trial #82: GFLOPs: 60.5254. Time: 69.6367 us. Best GFLOPs: 80.3138
2024-04-30 20:05:38 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_multiply_add_add_nn_relu_4] Trial #83: GFLOPs: 64.7427. Time: 65.1005 us. Best GFLOPs: 80.3138
2024-04-30 20:05:38 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_multiply_add_add_nn_relu_4] Trial #84: GFLOPs: 57.5805. Time: 73.1981 us. Best GFLOPs: 80.3138
2024-04-30 20:05:38 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_multiply_add_add_nn_relu_4] Trial #85: GFLOPs: 59.5354. Time: 70.7946 us. Best GFLOPs: 80.3138
2024-04-30 20:05:38 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_multiply_add_add_nn_relu_4] Trial #86: GFLOPs: 64.0185. Time: 65.8370 us. Best GFLOPs: 80.3138
2024-04-30 20:05:38 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_multiply_add_add_nn_relu_4] Trial #87: GFLOPs: 67.9007. Time: 62.0728 us. Best GFLOPs: 80.3138
2024-04-30 20:05:38 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_multiply_add_add_nn_relu_4] Trial #88: GFLOPs: 73.1678. Time: 57.6043 us. Best GFLOPs: 80.3138
2024-04-30 20:05:38 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_multiply_add_add_nn_relu_4] Trial #89: GFLOPs: 87.3856. Time: 48.2320 us. Best GFLOPs: 87.3856
2024-04-30 20:05:38 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_multiply_add_add_nn_relu_4] Trial #90: GFLOPs: 70.6479. Time: 59.6590 us. Best GFLOPs: 87.3856
2024-04-30 20:05:38 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_multiply_add_add_nn_relu_4] Trial #91: GFLOPs: 67.2989. Time: 62.6278 us. Best GFLOPs: 87.3856
2024-04-30 20:05:38 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_multiply_add_add_nn_relu_4] Trial #92: GFLOPs: 64.8004. Time: 65.0425 us. Best GFLOPs: 87.3856
2024-04-30 20:05:38 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_multiply_add_add_nn_relu_4] Trial #93: GFLOPs: 65.7486. Time: 64.1045 us. Best GFLOPs: 87.3856
2024-04-30 20:05:38 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_multiply_add_add_nn_relu_4] Trial #94: GFLOPs: 65.7449. Time: 64.1081 us. Best GFLOPs: 87.3856
2024-04-30 20:05:38 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_multiply_add_add_nn_relu_4] Trial #95: GFLOPs: 64.1313. Time: 65.7211 us. Best GFLOPs: 87.3856
2024-04-30 20:05:38 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_multiply_add_add_nn_relu_4] Trial #96: GFLOPs: 66.3738. Time: 63.5007 us. Best GFLOPs: 87.3856
2024-04-30 20:05:38 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_multiply_add_add_nn_relu_4] Trial #97: GFLOPs: 63.4155. Time: 66.4630 us. Best GFLOPs: 87.3856
2024-04-30 20:05:38 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_multiply_add_add_nn_relu_4] Trial #98: GFLOPs: 64.3568. Time: 65.4909 us. Best GFLOPs: 87.3856
2024-04-30 20:05:38 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_multiply_add_add_nn_relu_4] Trial #99: GFLOPs: 63.5738. Time: 66.2975 us. Best GFLOPs: 87.3856
2024-04-30 20:05:38 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_multiply_add_add_nn_relu_4] Trial #100: GFLOPs: 68.2352. Time: 61.7685 us. Best GFLOPs: 87.3856
2024-04-30 20:05:38 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_multiply_add_add_nn_relu_4] Trial #101: GFLOPs: 73.4371. Time: 57.3931 us. Best GFLOPs: 87.3856
2024-04-30 20:05:38 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_multiply_add_add_nn_relu_4] Trial #102: GFLOPs: 65.7540. Time: 64.0993 us. Best GFLOPs: 87.3856
2024-04-30 20:05:38 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_multiply_add_add_nn_relu_4] Trial #103: GFLOPs: 63.8752. Time: 65.9847 us. Best GFLOPs: 87.3856
2024-04-30 20:05:38 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_multiply_add_add_nn_relu_4] Trial #104: GFLOPs: 56.9192. Time: 74.0485 us. Best GFLOPs: 87.3856
2024-04-30 20:05:38 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_multiply_add_add_nn_relu_4] Trial #105: GFLOPs: 69.9732. Time: 60.2343 us. Best GFLOPs: 87.3856
2024-04-30 20:05:38 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_multiply_add_add_nn_relu_4] Trial #106: GFLOPs: 57.3558. Time: 73.4849 us. Best GFLOPs: 87.3856
2024-04-30 20:05:38 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_multiply_add_add_nn_relu_4] Trial #107: GFLOPs: 71.1893. Time: 59.2053 us. Best GFLOPs: 87.3856
2024-04-30 20:05:38 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_multiply_add_add_nn_relu_4] Trial #108: GFLOPs: 66.8194. Time: 63.0772 us. Best GFLOPs: 87.3856
2024-04-30 20:05:38 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_multiply_add_add_nn_relu_4] Trial #109: GFLOPs: 72.8554. Time: 57.8514 us. Best GFLOPs: 87.3856
2024-04-30 20:05:38 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_multiply_add_add_nn_relu_4] Trial #110: GFLOPs: 75.1525. Time: 56.0831 us. Best GFLOPs: 87.3856
2024-04-30 20:05:38 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_multiply_add_add_nn_relu_4] Trial #111: GFLOPs: 71.1251. Time: 59.2587 us. Best GFLOPs: 87.3856
2024-04-30 20:05:38 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_multiply_add_add_nn_relu_4] Trial #112: GFLOPs: 68.9777. Time: 61.1036 us. Best GFLOPs: 87.3856
2024-04-30 20:05:38 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_multiply_add_add_nn_relu_4] Trial #113: GFLOPs: 57.4585. Time: 73.3535 us. Best GFLOPs: 87.3856
2024-04-30 20:05:38 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_multiply_add_add_nn_relu_4] Trial #114: GFLOPs: 52.3873. Time: 80.4543 us. Best GFLOPs: 87.3856
2024-04-30 20:05:38 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_multiply_add_add_nn_relu_4] Trial #115: GFLOPs: 62.1218. Time: 67.8471 us. Best GFLOPs: 87.3856
2024-04-30 20:05:38 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_multiply_add_add_nn_relu_4] Trial #116: GFLOPs: 68.2325. Time: 61.7709 us. Best GFLOPs: 87.3856
2024-04-30 20:05:38 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_multiply_add_add_nn_relu_4] Trial #117: GFLOPs: 79.9910. Time: 52.6908 us. Best GFLOPs: 87.3856
2024-04-30 20:05:38 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_multiply_add_add_nn_relu_4] Trial #118: GFLOPs: 89.4305. Time: 47.1291 us. Best GFLOPs: 89.4305
2024-04-30 20:05:38 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_multiply_add_add_nn_relu_4] Trial #119: GFLOPs: 47.8365. Time: 88.1080 us. Best GFLOPs: 89.4305
2024-04-30 20:05:38 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_multiply_add_add_nn_relu_4] Trial #120: GFLOPs: 71.9933. Time: 58.5441 us. Best GFLOPs: 89.4305
2024-04-30 20:05:38 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_multiply_add_add_nn_relu_4] Trial #121: GFLOPs: 67.8951. Time: 62.0779 us. Best GFLOPs: 89.4305
2024-04-30 20:05:38 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_multiply_add_add_nn_relu_4] Trial #122: GFLOPs: 61.8642. Time: 68.1296 us. Best GFLOPs: 89.4305
2024-04-30 20:05:38 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_multiply_add_add_nn_relu_4] Trial #123: GFLOPs: 46.1496. Time: 91.3288 us. Best GFLOPs: 89.4305
2024-04-30 20:05:38 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_multiply_add_add_nn_relu_4] Trial #124: GFLOPs: 67.2575. Time: 62.6664 us. Best GFLOPs: 89.4305
2024-04-30 20:05:38 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_multiply_add_add_nn_relu_4] Trial #125: GFLOPs: 39.1312. Time: 107.7089 us. Best GFLOPs: 89.4305
2024-04-30 20:05:38 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_multiply_add_add_nn_relu_4] Trial #126: GFLOPs: 28.0779. Time: 150.1102 us. Best GFLOPs: 89.4305
2024-04-30 20:05:38 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_multiply_add_add_nn_relu_4] Trial #127: GFLOPs: 58.2734. Time: 72.3277 us. Best GFLOPs: 89.4305
2024-04-30 20:05:38 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_multiply_add_add_nn_relu_4] Trial #128: GFLOPs: 51.1434. Time: 82.4110 us. Best GFLOPs: 89.4305
2024-04-30 20:16:35 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-30 20:16:36 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-30 20:16:37 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc0ecbb8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x21915aa8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x7490d68)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x150628c8)]: 0 failure(s)
2024-04-30 20:16:37 [INFO] [evolutionary_search.cc:723] Sampled 410 candidate(s)
2024-04-30 20:16:40 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc0ecbb8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x21915aa8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x7490d68)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x150628c8)]: 0 failure(s)
2024-04-30 20:16:42 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc0ecbb8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x21915aa8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x7490d68)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x150628c8)]: 0 failure(s)
2024-04-30 20:16:46 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc0ecbb8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x21915aa8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x7490d68)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x150628c8)]: 0 failure(s)
2024-04-30 20:16:49 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc0ecbb8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x21915aa8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x7490d68)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x150628c8)]: 0 failure(s)
2024-04-30 20:16:51 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.8778  0.8692  0.8583  0.8445  0.8329  0.8224  0.8079  0.8078  0.8052  0.8027  0.7992  0.7983  0.7976  0.7964  0.7952  0.7912
[17 : 32]:	0.7912  0.7904  0.7832  0.7832  0.7832  0.7832  0.7832  0.7816  0.7816  0.7816  0.7816  0.7815  0.7806  0.7806  0.7806  0.7793
[33 : 48]:	0.7793  0.7754  0.7754  0.7711  0.7711  0.7711  0.7702  0.7685  0.7682  0.7667  0.7667  0.7663  0.7656  0.7656  0.7656  0.7655
[49 : 64]:	0.7655  0.7655  0.7646  0.7645  0.7625  0.7585  0.7585  0.7584  0.7584  0.7584  0.7577  0.7566  0.7514  0.7514  0.7511  0.7511
2024-04-30 20:16:51 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-30 20:16:51 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-30 20:17:13 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_multiply_add_add_nn_relu_4] Trial #129: GFLOPs: 25.9935. Time: 162.1475 us. Best GFLOPs: 89.4305
2024-04-30 20:17:13 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_multiply_add_add_nn_relu_4] Trial #130: GFLOPs: 136.8155. Time: 30.8063 us. Best GFLOPs: 136.8155
2024-04-30 20:17:13 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_multiply_add_add_nn_relu_4] Trial #131: GFLOPs: 157.2444. Time: 26.8040 us. Best GFLOPs: 157.2444
2024-04-30 20:17:13 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_multiply_add_add_nn_relu_4] Trial #132: GFLOPs: 134.0659. Time: 31.4381 us. Best GFLOPs: 157.2444
2024-04-30 20:17:13 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_multiply_add_add_nn_relu_4] Trial #133: GFLOPs: 111.4096. Time: 37.8314 us. Best GFLOPs: 157.2444
2024-04-30 20:17:13 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_multiply_add_add_nn_relu_4] Trial #134: GFLOPs: 134.7042. Time: 31.2892 us. Best GFLOPs: 157.2444
2024-04-30 20:17:13 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_multiply_add_add_nn_relu_4] Trial #135: GFLOPs: 106.6764. Time: 39.5100 us. Best GFLOPs: 157.2444
2024-04-30 20:17:13 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_multiply_add_add_nn_relu_4] Trial #136: GFLOPs: 70.4094. Time: 59.8611 us. Best GFLOPs: 157.2444
2024-04-30 20:17:13 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_multiply_add_add_nn_relu_4] Trial #137: GFLOPs: 117.9117. Time: 35.7453 us. Best GFLOPs: 157.2444
2024-04-30 20:17:13 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_multiply_add_add_nn_relu_4] Trial #138: GFLOPs: 145.1668. Time: 29.0341 us. Best GFLOPs: 157.2444
2024-04-30 20:17:13 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_multiply_add_add_nn_relu_4] Trial #139: GFLOPs: 157.0507. Time: 26.8371 us. Best GFLOPs: 157.2444
2024-04-30 20:17:13 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_multiply_add_add_nn_relu_4] Trial #140: GFLOPs: 137.7329. Time: 30.6011 us. Best GFLOPs: 157.2444
2024-04-30 20:17:13 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_multiply_add_add_nn_relu_4] Trial #141: GFLOPs: 141.3949. Time: 29.8086 us. Best GFLOPs: 157.2444
2024-04-30 20:17:13 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_multiply_add_add_nn_relu_4] Trial #142: GFLOPs: 120.1525. Time: 35.0786 us. Best GFLOPs: 157.2444
2024-04-30 20:17:13 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_multiply_add_add_nn_relu_4] Trial #143: GFLOPs: 118.6446. Time: 35.5244 us. Best GFLOPs: 157.2444
2024-04-30 20:17:13 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_multiply_add_add_nn_relu_4] Trial #144: GFLOPs: 145.4095. Time: 28.9856 us. Best GFLOPs: 157.2444
2024-04-30 20:17:13 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_multiply_add_add_nn_relu_4] Trial #145: GFLOPs: 134.3475. Time: 31.3723 us. Best GFLOPs: 157.2444
2024-04-30 20:17:13 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_multiply_add_add_nn_relu_4] Trial #146: GFLOPs: 153.2532. Time: 27.5021 us. Best GFLOPs: 157.2444
2024-04-30 20:17:13 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_multiply_add_add_nn_relu_4] Trial #147: GFLOPs: 143.3215. Time: 29.4079 us. Best GFLOPs: 157.2444
2024-04-30 20:17:13 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_multiply_add_add_nn_relu_4] Trial #148: GFLOPs: 140.9690. Time: 29.8987 us. Best GFLOPs: 157.2444
2024-04-30 20:17:13 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_multiply_add_add_nn_relu_4] Trial #149: GFLOPs: 139.7907. Time: 30.1507 us. Best GFLOPs: 157.2444
2024-04-30 20:17:13 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_multiply_add_add_nn_relu_4] Trial #150: GFLOPs: 140.0163. Time: 30.1021 us. Best GFLOPs: 157.2444
2024-04-30 20:17:13 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_multiply_add_add_nn_relu_4] Trial #151: GFLOPs: 127.7643. Time: 32.9887 us. Best GFLOPs: 157.2444
2024-04-30 20:17:13 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_multiply_add_add_nn_relu_4] Trial #152: GFLOPs: 128.4567. Time: 32.8109 us. Best GFLOPs: 157.2444
2024-04-30 20:17:13 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_multiply_add_add_nn_relu_4] Trial #153: GFLOPs: 136.2684. Time: 30.9300 us. Best GFLOPs: 157.2444
2024-04-30 20:17:13 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_multiply_add_add_nn_relu_4] Trial #154: GFLOPs: 128.3158. Time: 32.8470 us. Best GFLOPs: 157.2444
2024-04-30 20:17:13 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_multiply_add_add_nn_relu_4] Trial #155: GFLOPs: 133.9639. Time: 31.4621 us. Best GFLOPs: 157.2444
2024-04-30 20:17:13 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_multiply_add_add_nn_relu_4] Trial #156: GFLOPs: 138.7005. Time: 30.3877 us. Best GFLOPs: 157.2444
2024-04-30 20:17:13 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_multiply_add_add_nn_relu_4] Trial #157: GFLOPs: 118.1483. Time: 35.6737 us. Best GFLOPs: 157.2444
2024-04-30 20:17:13 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_multiply_add_add_nn_relu_4] Trial #158: GFLOPs: 115.5305. Time: 36.4820 us. Best GFLOPs: 157.2444
2024-04-30 20:17:13 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_multiply_add_add_nn_relu_4] Trial #159: GFLOPs: 119.4450. Time: 35.2864 us. Best GFLOPs: 157.2444
2024-04-30 20:17:13 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_multiply_add_add_nn_relu_4] Trial #160: GFLOPs: 130.4620. Time: 32.3066 us. Best GFLOPs: 157.2444
2024-04-30 20:17:13 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_multiply_add_add_nn_relu_4] Trial #161: GFLOPs: 139.6455. Time: 30.1820 us. Best GFLOPs: 157.2444
2024-04-30 20:17:13 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_multiply_add_add_nn_relu_4] Trial #162: GFLOPs: 152.7196. Time: 27.5982 us. Best GFLOPs: 157.2444
2024-04-30 20:17:13 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_multiply_add_add_nn_relu_4] Trial #163: GFLOPs: 152.3052. Time: 27.6733 us. Best GFLOPs: 157.2444
2024-04-30 20:17:13 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_multiply_add_add_nn_relu_4] Trial #164: GFLOPs: 135.1499. Time: 31.1860 us. Best GFLOPs: 157.2444
2024-04-30 20:17:13 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_multiply_add_add_nn_relu_4] Trial #165: GFLOPs: 131.4731. Time: 32.0581 us. Best GFLOPs: 157.2444
2024-04-30 20:17:13 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_multiply_add_add_nn_relu_4] Trial #166: GFLOPs: 136.0999. Time: 30.9683 us. Best GFLOPs: 157.2444
2024-04-30 20:17:13 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_multiply_add_add_nn_relu_4] Trial #167: GFLOPs: 125.1064. Time: 33.6896 us. Best GFLOPs: 157.2444
2024-04-30 20:17:13 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_multiply_add_add_nn_relu_4] Trial #168: GFLOPs: 131.1303. Time: 32.1419 us. Best GFLOPs: 157.2444
2024-04-30 20:17:13 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_multiply_add_add_nn_relu_4] Trial #169: GFLOPs: 144.5764. Time: 29.1526 us. Best GFLOPs: 157.2444
2024-04-30 20:17:13 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_multiply_add_add_nn_relu_4] Trial #170: GFLOPs: 139.4911. Time: 30.2154 us. Best GFLOPs: 157.2444
2024-04-30 20:17:13 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_multiply_add_add_nn_relu_4] Trial #171: GFLOPs: 133.9557. Time: 31.4640 us. Best GFLOPs: 157.2444
2024-04-30 20:17:13 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_multiply_add_add_nn_relu_4] Trial #172: GFLOPs: 137.3396. Time: 30.6888 us. Best GFLOPs: 157.2444
2024-04-30 20:17:13 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_multiply_add_add_nn_relu_4] Trial #173: GFLOPs: 130.5590. Time: 32.2826 us. Best GFLOPs: 157.2444
2024-04-30 20:17:13 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_multiply_add_add_nn_relu_4] Trial #174: GFLOPs: 133.1113. Time: 31.6636 us. Best GFLOPs: 157.2444
2024-04-30 20:17:13 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_multiply_add_add_nn_relu_4] Trial #175: GFLOPs: 141.3151. Time: 29.8254 us. Best GFLOPs: 157.2444
2024-04-30 20:17:13 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_multiply_add_add_nn_relu_4] Trial #176: GFLOPs: 127.7850. Time: 32.9834 us. Best GFLOPs: 157.2444
2024-04-30 20:17:13 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_multiply_add_add_nn_relu_4] Trial #177: GFLOPs: 137.6700. Time: 30.6151 us. Best GFLOPs: 157.2444
2024-04-30 20:17:13 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_multiply_add_add_nn_relu_4] Trial #178: GFLOPs: 138.5679. Time: 30.4167 us. Best GFLOPs: 157.2444
2024-04-30 20:17:13 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_multiply_add_add_nn_relu_4] Trial #179: GFLOPs: 148.9314. Time: 28.3002 us. Best GFLOPs: 157.2444
2024-04-30 20:17:13 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_multiply_add_add_nn_relu_4] Trial #180: GFLOPs: 125.1614. Time: 33.6748 us. Best GFLOPs: 157.2444
2024-04-30 20:17:13 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_multiply_add_add_nn_relu_4] Trial #181: GFLOPs: 154.1303. Time: 27.3456 us. Best GFLOPs: 157.2444
2024-04-30 20:17:13 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_multiply_add_add_nn_relu_4] Trial #182: GFLOPs: 160.2162. Time: 26.3068 us. Best GFLOPs: 160.2162
2024-04-30 20:17:13 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_multiply_add_add_nn_relu_4] Trial #183: GFLOPs: 161.6317. Time: 26.0765 us. Best GFLOPs: 161.6317
2024-04-30 20:17:13 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_multiply_add_add_nn_relu_4] Trial #184: GFLOPs: 126.7037. Time: 33.2649 us. Best GFLOPs: 161.6317
2024-04-30 20:17:13 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_multiply_add_add_nn_relu_4] Trial #185: GFLOPs: 139.9891. Time: 30.1079 us. Best GFLOPs: 161.6317
2024-04-30 20:17:13 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_multiply_add_add_nn_relu_4] Trial #186: GFLOPs: 121.6695. Time: 34.6413 us. Best GFLOPs: 161.6317
2024-04-30 20:17:13 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_multiply_add_add_nn_relu_4] Trial #187: GFLOPs: 138.6065. Time: 30.4083 us. Best GFLOPs: 161.6317
2024-04-30 20:17:13 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_multiply_add_add_nn_relu_4] Trial #188: GFLOPs: 124.9817. Time: 33.7232 us. Best GFLOPs: 161.6317
2024-04-30 20:17:13 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_multiply_add_add_nn_relu_4] Trial #189: GFLOPs: 141.0932. Time: 29.8723 us. Best GFLOPs: 161.6317
2024-04-30 20:17:13 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_multiply_add_add_nn_relu_4] Trial #190: GFLOPs: 38.1144. Time: 110.5824 us. Best GFLOPs: 161.6317
2024-04-30 20:17:13 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_multiply_add_add_nn_relu_4] Trial #191: GFLOPs: 21.1852. Time: 198.9493 us. Best GFLOPs: 161.6317
2024-04-30 20:17:13 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_multiply_add_add_nn_relu_4] Trial #192: GFLOPs: 106.3946. Time: 39.6146 us. Best GFLOPs: 161.6317
