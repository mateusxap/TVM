2024-04-30 19:06:04 [INFO] [task_scheduler.cc:160] Initializing Task #2: "fused_nn_conv2d_add_add_nn_relu_1"
2024-04-30 19:06:04 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(4), T.int64(4), T.int64(512)), "float32"), p1: T.Buffer((T.int64(1), T.int64(1), T.int64(512), T.int64(256)), "float32"), p2: T.Buffer((T.int64(1), T.int64(1), T.int64(1), T.int64(256)), "float32"), p3: T.Buffer((T.int64(1), T.int64(1), T.int64(1), T.int64(256)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(2), T.int64(2), T.int64(256)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        pad_temp = T.alloc_buffer((T.int64(1), T.int64(4), T.int64(4), T.int64(512)))
        conv2d_nhwc = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(2), T.int64(256)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(2), T.int64(256)))
        T_add_1 = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(2), T.int64(256)))
        for i0, i1, i2, i3 in T.grid(T.int64(1), T.int64(4), T.int64(4), T.int64(512)):
            with T.block("pad_temp"):
                v_i0, v_i1, v_i2, v_i3 = T.axis.remap("SSSS", [i0, i1, i2, i3])
                T.reads(p0[v_i0, v_i1, v_i2, v_i3])
                T.writes(pad_temp[v_i0, v_i1, v_i2, v_i3])
                pad_temp[v_i0, v_i1, v_i2, v_i3] = p0[v_i0, v_i1, v_i2, v_i3]
        for nn, yy, xx, ff, ry, rx, rc in T.grid(T.int64(1), T.int64(2), T.int64(2), T.int64(256), T.int64(1), T.int64(1), T.int64(512)):
            with T.block("conv2d_nhwc"):
                v_nn, v_yy, v_xx, v_ff, v_ry, v_rx, v_rc = T.axis.remap("SSSSRRR", [nn, yy, xx, ff, ry, rx, rc])
                T.reads(pad_temp[v_nn, v_yy * T.int64(2) + v_ry, v_xx * T.int64(2) + v_rx, v_rc], p1[v_ry, v_rx, v_rc, v_ff])
                T.writes(conv2d_nhwc[v_nn, v_yy, v_xx, v_ff])
                with T.init():
                    conv2d_nhwc[v_nn, v_yy, v_xx, v_ff] = T.float32(0)
                conv2d_nhwc[v_nn, v_yy, v_xx, v_ff] = conv2d_nhwc[v_nn, v_yy, v_xx, v_ff] + pad_temp[v_nn, v_yy * T.int64(2) + v_ry, v_xx * T.int64(2) + v_rx, v_rc] * p1[v_ry, v_rx, v_rc, v_ff]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(2), T.int64(256)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(conv2d_nhwc[v_ax0, v_ax1, v_ax2, v_ax3], p2[v_ax0, T.int64(0), T.int64(0), v_ax3])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3] = conv2d_nhwc[v_ax0, v_ax1, v_ax2, v_ax3] + p2[v_ax0, T.int64(0), T.int64(0), v_ax3]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(2), T.int64(256)):
            with T.block("T_add_1"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3], p3[v_ax0, T.int64(0), T.int64(0), v_ax3])
                T.writes(T_add_1[v_ax0, v_ax1, v_ax2, v_ax3])
                T_add_1[v_ax0, v_ax1, v_ax2, v_ax3] = T_add[v_ax0, v_ax1, v_ax2, v_ax3] + p3[v_ax0, T.int64(0), T.int64(0), v_ax3]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(2), T.int64(256)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(T_add_1[v_ax0, v_ax1, v_ax2, v_ax3])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(T_add_1[v_ax0, v_ax1, v_ax2, v_ax3], T.float32(0))
2024-04-30 19:06:04 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-30 19:06:04 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(4), T.int64(4), T.int64(512)), "float32"), p1: T.Buffer((T.int64(1), T.int64(1), T.int64(512), T.int64(256)), "float32"), p2: T.Buffer((T.int64(1), T.int64(1), T.int64(1), T.int64(256)), "float32"), p3: T.Buffer((T.int64(1), T.int64(1), T.int64(1), T.int64(256)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(2), T.int64(2), T.int64(256)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 96, "meta_schedule.unroll_explicit": 64, "meta_schedule.vectorize": 64})
            conv2d_nhwc = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(2), T.int64(256)))
            for nn_0, yy_0, xx_0, ff_0, nn_1, yy_1, xx_1, ff_1, ry_0, rx_0, rc_0, nn_2, yy_2, xx_2, ff_2, ry_1, rx_1, rc_1, nn_3, yy_3, xx_3, ff_3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(2), T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(256), T.int64(1), T.int64(1), T.int64(2), T.int64(8), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                with T.block("conv2d_nhwc"):
                    v_nn = T.axis.spatial(T.int64(1), nn_0 + nn_1 + nn_2 + nn_3)
                    v_yy = T.axis.spatial(T.int64(2), yy_0 * T.int64(2) + yy_1 + yy_2 + yy_3)
                    v_xx = T.axis.spatial(T.int64(2), xx_0 * T.int64(2) + xx_1 * T.int64(2) + xx_2 + xx_3)
                    v_ff = T.axis.spatial(T.int64(256), ff_0 * T.int64(64) + ff_1 * T.int64(8) + ff_2 + ff_3)
                    v_ry = T.axis.reduce(T.int64(1), ry_0 + ry_1)
                    v_rx = T.axis.reduce(T.int64(1), rx_0 + rx_1)
                    v_rc = T.axis.reduce(T.int64(512), rc_0 * T.int64(2) + rc_1)
                    T.reads(p0[v_nn, v_yy * T.int64(2) + v_ry, v_xx * T.int64(2) + v_rx, v_rc], p1[v_ry, v_rx, v_rc, v_ff])
                    T.writes(conv2d_nhwc[v_nn, v_yy, v_xx, v_ff])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    with T.init():
                        conv2d_nhwc[v_nn, v_yy, v_xx, v_ff] = T.float32(0)
                    conv2d_nhwc[v_nn, v_yy, v_xx, v_ff] = conv2d_nhwc[v_nn, v_yy, v_xx, v_ff] + p0[v_nn, v_yy * T.int64(2) + v_ry, v_xx * T.int64(2) + v_rx, v_rc] * p1[v_ry, v_rx, v_rc, v_ff]
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(2), T.int64(256)):
                with T.block("T_relu"):
                    v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                    T.reads(conv2d_nhwc[v_ax0, v_ax1, v_ax2, v_ax3], p2[v_ax0, T.int64(0), T.int64(0), v_ax3], p3[v_ax0, T.int64(0), T.int64(0), v_ax3])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(conv2d_nhwc[v_ax0, v_ax1, v_ax2, v_ax3] + p2[v_ax0, T.int64(0), T.int64(0), v_ax3] + p3[v_ax0, T.int64(0), T.int64(0), v_ax3], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nhwc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_add_1", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b3)
sch.compute_inline(block=b2)
sch.compute_inline(block=b0)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l5, factors=[v12, v13, v14, v15], preserve_unit_iters=True, disable_predication=False)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 2, 1, 1])
l24, l25, l26, l27 = sch.split(loop=l6, factors=[v20, v21, v22, v23], preserve_unit_iters=True, disable_predication=False)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 2, 1])
l32, l33, l34, l35 = sch.split(loop=l7, factors=[v28, v29, v30, v31], preserve_unit_iters=True, disable_predication=False)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[4, 8, 8, 1])
l40, l41, l42, l43 = sch.split(loop=l8, factors=[v36, v37, v38, v39], preserve_unit_iters=True, disable_predication=False)
v44, v45 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l46, l47 = sch.split(loop=l9, factors=[v44, v45], preserve_unit_iters=True, disable_predication=False)
v48, v49 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l50, l51 = sch.split(loop=l10, factors=[v48, v49], preserve_unit_iters=True, disable_predication=False)
v52, v53 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[256, 2])
l54, l55 = sch.split(loop=l11, factors=[v52, v53], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l16, l24, l32, l40, l17, l25, l33, l41, l46, l50, l54, l18, l26, l34, l42, l47, l51, l55, l19, l27, l35, l43)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.parallel", ann_val=96)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.vectorize", ann_val=64)
v56 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v56)
2024-04-30 19:06:04 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(4), T.int64(4), T.int64(512)), "float32"), p1: T.Buffer((T.int64(1), T.int64(1), T.int64(512), T.int64(256)), "float32"), p2: T.Buffer((T.int64(1), T.int64(1), T.int64(1), T.int64(256)), "float32"), p3: T.Buffer((T.int64(1), T.int64(1), T.int64(1), T.int64(256)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(2), T.int64(2), T.int64(256)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 96, "meta_schedule.unroll_explicit": 16, "meta_schedule.vectorize": 64})
            conv2d_nhwc = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(2), T.int64(256)))
            for nn_0, yy_0, xx_0, ff_0, nn_1, yy_1, xx_1, ff_1 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(2), T.int64(1), T.int64(8)):
                for ry_0, rx_0, rc_0, nn_2, yy_2, xx_2, ff_2, ry_1, rx_1, rc_1, nn_3, yy_3, xx_3, ff_3 in T.grid(T.int64(1), T.int64(1), T.int64(256), T.int64(1), T.int64(1), T.int64(2), T.int64(8), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                    with T.block("conv2d_nhwc"):
                        v_nn = T.axis.spatial(T.int64(1), nn_0 + nn_1 + nn_2 + nn_3)
                        v_yy = T.axis.spatial(T.int64(2), yy_0 * T.int64(2) + yy_1 + yy_2 + yy_3)
                        v_xx = T.axis.spatial(T.int64(2), xx_0 * T.int64(2) + xx_1 * T.int64(2) + xx_2 + xx_3)
                        v_ff = T.axis.spatial(T.int64(256), ff_0 * T.int64(64) + ff_1 * T.int64(8) + ff_2 + ff_3)
                        v_ry = T.axis.reduce(T.int64(1), ry_0 + ry_1)
                        v_rx = T.axis.reduce(T.int64(1), rx_0 + rx_1)
                        v_rc = T.axis.reduce(T.int64(512), rc_0 * T.int64(2) + rc_1)
                        T.reads(p0[v_nn, v_yy * T.int64(2) + v_ry, v_xx * T.int64(2) + v_rx, v_rc], p1[v_ry, v_rx, v_rc, v_ff])
                        T.writes(conv2d_nhwc[v_nn, v_yy, v_xx, v_ff])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_nhwc[v_nn, v_yy, v_xx, v_ff] = T.float32(0)
                        conv2d_nhwc[v_nn, v_yy, v_xx, v_ff] = conv2d_nhwc[v_nn, v_yy, v_xx, v_ff] + p0[v_nn, v_yy * T.int64(2) + v_ry, v_xx * T.int64(2) + v_rx, v_rc] * p1[v_ry, v_rx, v_rc, v_ff]
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(8)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(2), yy_1 + ax1)
                        v_ax2 = T.axis.spatial(T.int64(2), ax2)
                        v_ax3 = T.axis.spatial(T.int64(256), ff_0 * T.int64(64) + ff_1 * T.int64(8) + ax3)
                        T.reads(conv2d_nhwc[v_ax0, v_ax1, v_ax2, v_ax3], p2[v_ax0, T.int64(0), T.int64(0), v_ax3], p3[v_ax0, T.int64(0), T.int64(0), v_ax3])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(conv2d_nhwc[v_ax0, v_ax1, v_ax2, v_ax3] + p2[v_ax0, T.int64(0), T.int64(0), v_ax3] + p3[v_ax0, T.int64(0), T.int64(0), v_ax3], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nhwc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_add_1", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b3)
sch.compute_inline(block=b2)
sch.compute_inline(block=b0)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l5, factors=[v12, v13, v14, v15], preserve_unit_iters=True, disable_predication=False)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 2, 1, 1])
l24, l25, l26, l27 = sch.split(loop=l6, factors=[v20, v21, v22, v23], preserve_unit_iters=True, disable_predication=False)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 2, 1])
l32, l33, l34, l35 = sch.split(loop=l7, factors=[v28, v29, v30, v31], preserve_unit_iters=True, disable_predication=False)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[4, 8, 8, 1])
l40, l41, l42, l43 = sch.split(loop=l8, factors=[v36, v37, v38, v39], preserve_unit_iters=True, disable_predication=False)
v44, v45 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l46, l47 = sch.split(loop=l9, factors=[v44, v45], preserve_unit_iters=True, disable_predication=False)
v48, v49 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l50, l51 = sch.split(loop=l10, factors=[v48, v49], preserve_unit_iters=True, disable_predication=False)
v52, v53 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[256, 2])
l54, l55 = sch.split(loop=l11, factors=[v52, v53], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l16, l24, l32, l40, l17, l25, l33, l41, l46, l50, l54, l18, l26, l34, l42, l47, l51, l55, l19, l27, l35, l43)
b56, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b56, loop=l41, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.parallel", ann_val=96)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.vectorize", ann_val=64)
v57 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v57)
2024-04-30 19:06:04 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(4), T.int64(4), T.int64(512)), "float32"), p1: T.Buffer((T.int64(1), T.int64(1), T.int64(512), T.int64(256)), "float32"), p2: T.Buffer((T.int64(1), T.int64(1), T.int64(1), T.int64(256)), "float32"), p3: T.Buffer((T.int64(1), T.int64(1), T.int64(1), T.int64(256)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(2), T.int64(2), T.int64(256)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 96, "meta_schedule.unroll_explicit": 16, "meta_schedule.vectorize": 64})
            conv2d_nhwc = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(2), T.int64(256)))
            for nn_0, yy_0, xx_0, ff_0 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(4)):
                for nn_1, yy_1, xx_1, ff_1, ry_0, rx_0, rc_0, nn_2, yy_2, xx_2, ff_2, ry_1, rx_1, rc_1, nn_3, yy_3, xx_3, ff_3 in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(256), T.int64(1), T.int64(1), T.int64(2), T.int64(8), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                    with T.block("conv2d_nhwc"):
                        v_nn = T.axis.spatial(T.int64(1), nn_0 + nn_1 + nn_2 + nn_3)
                        v_yy = T.axis.spatial(T.int64(2), yy_0 * T.int64(2) + yy_1 + yy_2 + yy_3)
                        v_xx = T.axis.spatial(T.int64(2), xx_0 * T.int64(2) + xx_1 * T.int64(2) + xx_2 + xx_3)
                        v_ff = T.axis.spatial(T.int64(256), ff_0 * T.int64(64) + ff_1 * T.int64(8) + ff_2 + ff_3)
                        v_ry = T.axis.reduce(T.int64(1), ry_0 + ry_1)
                        v_rx = T.axis.reduce(T.int64(1), rx_0 + rx_1)
                        v_rc = T.axis.reduce(T.int64(512), rc_0 * T.int64(2) + rc_1)
                        T.reads(p0[v_nn, v_yy * T.int64(2) + v_ry, v_xx * T.int64(2) + v_rx, v_rc], p1[v_ry, v_rx, v_rc, v_ff])
                        T.writes(conv2d_nhwc[v_nn, v_yy, v_xx, v_ff])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_nhwc[v_nn, v_yy, v_xx, v_ff] = T.float32(0)
                        conv2d_nhwc[v_nn, v_yy, v_xx, v_ff] = conv2d_nhwc[v_nn, v_yy, v_xx, v_ff] + p0[v_nn, v_yy * T.int64(2) + v_ry, v_xx * T.int64(2) + v_rx, v_rc] * p1[v_ry, v_rx, v_rc, v_ff]
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(2), T.int64(64)):
                    with T.block("T_relu"):
                        v_ax0, v_ax1, v_ax2 = T.axis.remap("SSS", [ax0, ax1, ax2])
                        v_ax3 = T.axis.spatial(T.int64(256), ff_0 * T.int64(64) + ax3)
                        T.reads(conv2d_nhwc[v_ax0, v_ax1, v_ax2, v_ax3], p2[v_ax0, T.int64(0), T.int64(0), v_ax3], p3[v_ax0, T.int64(0), T.int64(0), v_ax3])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(conv2d_nhwc[v_ax0, v_ax1, v_ax2, v_ax3] + p2[v_ax0, T.int64(0), T.int64(0), v_ax3] + p3[v_ax0, T.int64(0), T.int64(0), v_ax3], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nhwc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_add_1", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b3)
sch.compute_inline(block=b2)
sch.compute_inline(block=b0)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l5, factors=[v12, v13, v14, v15], preserve_unit_iters=True, disable_predication=False)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 2, 1, 1])
l24, l25, l26, l27 = sch.split(loop=l6, factors=[v20, v21, v22, v23], preserve_unit_iters=True, disable_predication=False)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 2, 1])
l32, l33, l34, l35 = sch.split(loop=l7, factors=[v28, v29, v30, v31], preserve_unit_iters=True, disable_predication=False)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[4, 8, 8, 1])
l40, l41, l42, l43 = sch.split(loop=l8, factors=[v36, v37, v38, v39], preserve_unit_iters=True, disable_predication=False)
v44, v45 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l46, l47 = sch.split(loop=l9, factors=[v44, v45], preserve_unit_iters=True, disable_predication=False)
v48, v49 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l50, l51 = sch.split(loop=l10, factors=[v48, v49], preserve_unit_iters=True, disable_predication=False)
v52, v53 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[256, 2])
l54, l55 = sch.split(loop=l11, factors=[v52, v53], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l16, l24, l32, l40, l17, l25, l33, l41, l46, l50, l54, l18, l26, l34, l42, l47, l51, l55, l19, l27, l35, l43)
b56, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b56, loop=l40, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.parallel", ann_val=96)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.vectorize", ann_val=64)
v57 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v57)
2024-04-30 19:06:32 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-30 19:06:32 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-30 19:06:33 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x83ecee8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x2d114ed8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x83e28f8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x7a3a828)]: 0 failure(s)
2024-04-30 19:06:33 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-30 19:06:34 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x83ecee8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x2d114ed8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x83e28f8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x7a3a828)]: 0 failure(s)
2024-04-30 19:06:35 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x83ecee8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x2d114ed8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x83e28f8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x7a3a828)]: 0 failure(s)
2024-04-30 19:06:36 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x83ecee8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x2d114ed8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x83e28f8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x7a3a828)]: 0 failure(s)
2024-04-30 19:06:38 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x83ecee8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x2d114ed8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x83e28f8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x7a3a828)]: 0 failure(s)
2024-04-30 19:06:38 [INFO] [evolutionary_search.cc:649] Scores of the best 4 candidates:
[1 : 4]:	0.9995  0.9987  0.9978  0.9973
2024-04-30 19:06:38 [INFO] [evolutionary_search.cc:727] Got 4 candidate(s) with evolutionary search
2024-04-30 19:06:38 [INFO] [evolutionary_search.cc:730] Sending 4 candidates(s) for measurement
2024-04-30 19:07:10 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_add_nn_relu_1] Trial #1: GFLOPs: 28.8180. Time: 36.4927 us. Best GFLOPs: 28.8180
2024-04-30 19:07:10 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_add_nn_relu_1] Trial #2: GFLOPs: 15.3080. Time: 68.6990 us. Best GFLOPs: 28.8180
2024-04-30 19:07:10 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_add_nn_relu_1] Trial #3: GFLOPs: 44.0359. Time: 23.8816 us. Best GFLOPs: 44.0359
2024-04-30 19:07:10 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_add_nn_relu_1] Trial #4: GFLOPs: 9.4391. Time: 111.4145 us. Best GFLOPs: 44.0359
2024-04-30 19:13:53 [INFO] [task_scheduler.cc:160] Initializing Task #2: "fused_nn_conv2d_add_add_nn_relu_1"
2024-04-30 19:13:53 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(4), T.int64(4), T.int64(512)), "float32"), p1: T.Buffer((T.int64(1), T.int64(1), T.int64(512), T.int64(256)), "float32"), p2: T.Buffer((T.int64(1), T.int64(1), T.int64(1), T.int64(256)), "float32"), p3: T.Buffer((T.int64(1), T.int64(1), T.int64(1), T.int64(256)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(2), T.int64(2), T.int64(256)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        pad_temp = T.alloc_buffer((T.int64(1), T.int64(4), T.int64(4), T.int64(512)))
        conv2d_nhwc = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(2), T.int64(256)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(2), T.int64(256)))
        T_add_1 = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(2), T.int64(256)))
        for i0, i1, i2, i3 in T.grid(T.int64(1), T.int64(4), T.int64(4), T.int64(512)):
            with T.block("pad_temp"):
                v_i0, v_i1, v_i2, v_i3 = T.axis.remap("SSSS", [i0, i1, i2, i3])
                T.reads(p0[v_i0, v_i1, v_i2, v_i3])
                T.writes(pad_temp[v_i0, v_i1, v_i2, v_i3])
                pad_temp[v_i0, v_i1, v_i2, v_i3] = p0[v_i0, v_i1, v_i2, v_i3]
        for nn, yy, xx, ff, ry, rx, rc in T.grid(T.int64(1), T.int64(2), T.int64(2), T.int64(256), T.int64(1), T.int64(1), T.int64(512)):
            with T.block("conv2d_nhwc"):
                v_nn, v_yy, v_xx, v_ff, v_ry, v_rx, v_rc = T.axis.remap("SSSSRRR", [nn, yy, xx, ff, ry, rx, rc])
                T.reads(pad_temp[v_nn, v_yy * T.int64(2) + v_ry, v_xx * T.int64(2) + v_rx, v_rc], p1[v_ry, v_rx, v_rc, v_ff])
                T.writes(conv2d_nhwc[v_nn, v_yy, v_xx, v_ff])
                with T.init():
                    conv2d_nhwc[v_nn, v_yy, v_xx, v_ff] = T.float32(0)
                conv2d_nhwc[v_nn, v_yy, v_xx, v_ff] = conv2d_nhwc[v_nn, v_yy, v_xx, v_ff] + pad_temp[v_nn, v_yy * T.int64(2) + v_ry, v_xx * T.int64(2) + v_rx, v_rc] * p1[v_ry, v_rx, v_rc, v_ff]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(2), T.int64(256)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(conv2d_nhwc[v_ax0, v_ax1, v_ax2, v_ax3], p2[v_ax0, T.int64(0), T.int64(0), v_ax3])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3] = conv2d_nhwc[v_ax0, v_ax1, v_ax2, v_ax3] + p2[v_ax0, T.int64(0), T.int64(0), v_ax3]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(2), T.int64(256)):
            with T.block("T_add_1"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3], p3[v_ax0, T.int64(0), T.int64(0), v_ax3])
                T.writes(T_add_1[v_ax0, v_ax1, v_ax2, v_ax3])
                T_add_1[v_ax0, v_ax1, v_ax2, v_ax3] = T_add[v_ax0, v_ax1, v_ax2, v_ax3] + p3[v_ax0, T.int64(0), T.int64(0), v_ax3]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(2), T.int64(256)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(T_add_1[v_ax0, v_ax1, v_ax2, v_ax3])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(T_add_1[v_ax0, v_ax1, v_ax2, v_ax3], T.float32(0))
2024-04-30 19:13:53 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-30 19:13:53 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(4), T.int64(4), T.int64(512)), "float32"), p1: T.Buffer((T.int64(1), T.int64(1), T.int64(512), T.int64(256)), "float32"), p2: T.Buffer((T.int64(1), T.int64(1), T.int64(1), T.int64(256)), "float32"), p3: T.Buffer((T.int64(1), T.int64(1), T.int64(1), T.int64(256)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(2), T.int64(2), T.int64(256)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 96, "meta_schedule.unroll_explicit": 64, "meta_schedule.vectorize": 64})
            conv2d_nhwc = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(2), T.int64(256)))
            for nn_0, yy_0, xx_0, ff_0, nn_1, yy_1, xx_1, ff_1, ry_0, rx_0, rc_0, nn_2, yy_2, xx_2, ff_2, ry_1, rx_1, rc_1, nn_3, yy_3, xx_3, ff_3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(64), T.int64(1), T.int64(2), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(2), T.int64(8)):
                with T.block("conv2d_nhwc"):
                    v_nn = T.axis.spatial(T.int64(1), nn_0 + nn_1 + nn_2 + nn_3)
                    v_yy = T.axis.spatial(T.int64(2), yy_0 * T.int64(2) + yy_1 * T.int64(2) + yy_2 + yy_3)
                    v_xx = T.axis.spatial(T.int64(2), xx_0 * T.int64(2) + xx_1 * T.int64(2) + xx_2 * T.int64(2) + xx_3)
                    v_ff = T.axis.spatial(T.int64(256), ff_0 * T.int64(256) + ff_1 * T.int64(16) + ff_2 * T.int64(8) + ff_3)
                    v_ry = T.axis.reduce(T.int64(1), ry_0 + ry_1)
                    v_rx = T.axis.reduce(T.int64(1), rx_0 + rx_1)
                    v_rc = T.axis.reduce(T.int64(512), rc_0 * T.int64(8) + rc_1)
                    T.reads(p0[v_nn, v_yy * T.int64(2) + v_ry, v_xx * T.int64(2) + v_rx, v_rc], p1[v_ry, v_rx, v_rc, v_ff])
                    T.writes(conv2d_nhwc[v_nn, v_yy, v_xx, v_ff])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    with T.init():
                        conv2d_nhwc[v_nn, v_yy, v_xx, v_ff] = T.float32(0)
                    conv2d_nhwc[v_nn, v_yy, v_xx, v_ff] = conv2d_nhwc[v_nn, v_yy, v_xx, v_ff] + p0[v_nn, v_yy * T.int64(2) + v_ry, v_xx * T.int64(2) + v_rx, v_rc] * p1[v_ry, v_rx, v_rc, v_ff]
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(2), T.int64(256)):
                with T.block("T_relu"):
                    v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                    T.reads(conv2d_nhwc[v_ax0, v_ax1, v_ax2, v_ax3], p2[v_ax0, T.int64(0), T.int64(0), v_ax3], p3[v_ax0, T.int64(0), T.int64(0), v_ax3])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(conv2d_nhwc[v_ax0, v_ax1, v_ax2, v_ax3] + p2[v_ax0, T.int64(0), T.int64(0), v_ax3] + p3[v_ax0, T.int64(0), T.int64(0), v_ax3], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nhwc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_add_1", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b3)
sch.compute_inline(block=b2)
sch.compute_inline(block=b0)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l5, factors=[v12, v13, v14, v15], preserve_unit_iters=True, disable_predication=False)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 2, 1])
l24, l25, l26, l27 = sch.split(loop=l6, factors=[v20, v21, v22, v23], preserve_unit_iters=True, disable_predication=False)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 1, 2])
l32, l33, l34, l35 = sch.split(loop=l7, factors=[v28, v29, v30, v31], preserve_unit_iters=True, disable_predication=False)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 16, 2, 8])
l40, l41, l42, l43 = sch.split(loop=l8, factors=[v36, v37, v38, v39], preserve_unit_iters=True, disable_predication=False)
v44, v45 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l46, l47 = sch.split(loop=l9, factors=[v44, v45], preserve_unit_iters=True, disable_predication=False)
v48, v49 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l50, l51 = sch.split(loop=l10, factors=[v48, v49], preserve_unit_iters=True, disable_predication=False)
v52, v53 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[64, 8])
l54, l55 = sch.split(loop=l11, factors=[v52, v53], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l16, l24, l32, l40, l17, l25, l33, l41, l46, l50, l54, l18, l26, l34, l42, l47, l51, l55, l19, l27, l35, l43)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.parallel", ann_val=96)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.vectorize", ann_val=64)
v56 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v56)
2024-04-30 19:13:53 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(4), T.int64(4), T.int64(512)), "float32"), p1: T.Buffer((T.int64(1), T.int64(1), T.int64(512), T.int64(256)), "float32"), p2: T.Buffer((T.int64(1), T.int64(1), T.int64(1), T.int64(256)), "float32"), p3: T.Buffer((T.int64(1), T.int64(1), T.int64(1), T.int64(256)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(2), T.int64(2), T.int64(256)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 96, "meta_schedule.unroll_explicit": 64, "meta_schedule.vectorize": 64})
            conv2d_nhwc = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(2), T.int64(256)))
            for nn_0, yy_0, xx_0, ff_0, nn_1, yy_1, xx_1, ff_1 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(16)):
                for ry_0, rx_0, rc_0, nn_2, yy_2, xx_2, ff_2, ry_1, rx_1, rc_1, nn_3, yy_3, xx_3, ff_3 in T.grid(T.int64(1), T.int64(1), T.int64(64), T.int64(1), T.int64(2), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(2), T.int64(8)):
                    with T.block("conv2d_nhwc"):
                        v_nn = T.axis.spatial(T.int64(1), nn_0 + nn_1 + nn_2 + nn_3)
                        v_yy = T.axis.spatial(T.int64(2), yy_0 * T.int64(2) + yy_1 * T.int64(2) + yy_2 + yy_3)
                        v_xx = T.axis.spatial(T.int64(2), xx_0 * T.int64(2) + xx_1 * T.int64(2) + xx_2 * T.int64(2) + xx_3)
                        v_ff = T.axis.spatial(T.int64(256), ff_0 * T.int64(256) + ff_1 * T.int64(16) + ff_2 * T.int64(8) + ff_3)
                        v_ry = T.axis.reduce(T.int64(1), ry_0 + ry_1)
                        v_rx = T.axis.reduce(T.int64(1), rx_0 + rx_1)
                        v_rc = T.axis.reduce(T.int64(512), rc_0 * T.int64(8) + rc_1)
                        T.reads(p0[v_nn, v_yy * T.int64(2) + v_ry, v_xx * T.int64(2) + v_rx, v_rc], p1[v_ry, v_rx, v_rc, v_ff])
                        T.writes(conv2d_nhwc[v_nn, v_yy, v_xx, v_ff])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_nhwc[v_nn, v_yy, v_xx, v_ff] = T.float32(0)
                        conv2d_nhwc[v_nn, v_yy, v_xx, v_ff] = conv2d_nhwc[v_nn, v_yy, v_xx, v_ff] + p0[v_nn, v_yy * T.int64(2) + v_ry, v_xx * T.int64(2) + v_rx, v_rc] * p1[v_ry, v_rx, v_rc, v_ff]
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(2), T.int64(16)):
                    with T.block("T_relu"):
                        v_ax0, v_ax1, v_ax2 = T.axis.remap("SSS", [ax0, ax1, ax2])
                        v_ax3 = T.axis.spatial(T.int64(256), ff_1 * T.int64(16) + ax3)
                        T.reads(conv2d_nhwc[v_ax0, v_ax1, v_ax2, v_ax3], p2[v_ax0, T.int64(0), T.int64(0), v_ax3], p3[v_ax0, T.int64(0), T.int64(0), v_ax3])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(conv2d_nhwc[v_ax0, v_ax1, v_ax2, v_ax3] + p2[v_ax0, T.int64(0), T.int64(0), v_ax3] + p3[v_ax0, T.int64(0), T.int64(0), v_ax3], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nhwc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_add_1", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b3)
sch.compute_inline(block=b2)
sch.compute_inline(block=b0)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l5, factors=[v12, v13, v14, v15], preserve_unit_iters=True, disable_predication=False)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 2, 1])
l24, l25, l26, l27 = sch.split(loop=l6, factors=[v20, v21, v22, v23], preserve_unit_iters=True, disable_predication=False)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 1, 2])
l32, l33, l34, l35 = sch.split(loop=l7, factors=[v28, v29, v30, v31], preserve_unit_iters=True, disable_predication=False)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 16, 2, 8])
l40, l41, l42, l43 = sch.split(loop=l8, factors=[v36, v37, v38, v39], preserve_unit_iters=True, disable_predication=False)
v44, v45 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l46, l47 = sch.split(loop=l9, factors=[v44, v45], preserve_unit_iters=True, disable_predication=False)
v48, v49 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l50, l51 = sch.split(loop=l10, factors=[v48, v49], preserve_unit_iters=True, disable_predication=False)
v52, v53 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[64, 8])
l54, l55 = sch.split(loop=l11, factors=[v52, v53], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l16, l24, l32, l40, l17, l25, l33, l41, l46, l50, l54, l18, l26, l34, l42, l47, l51, l55, l19, l27, l35, l43)
b56, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b56, loop=l41, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.parallel", ann_val=96)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.vectorize", ann_val=64)
v57 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v57)
2024-04-30 19:13:53 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(4), T.int64(4), T.int64(512)), "float32"), p1: T.Buffer((T.int64(1), T.int64(1), T.int64(512), T.int64(256)), "float32"), p2: T.Buffer((T.int64(1), T.int64(1), T.int64(1), T.int64(256)), "float32"), p3: T.Buffer((T.int64(1), T.int64(1), T.int64(1), T.int64(256)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(2), T.int64(2), T.int64(256)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 96, "meta_schedule.unroll_explicit": 16, "meta_schedule.vectorize": 64})
            conv2d_nhwc = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(2), T.int64(256)))
            for nn_0, yy_0, xx_0, ff_0 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                for nn_1, yy_1, xx_1, ff_1, ry_0, rx_0, rc_0, nn_2, yy_2, xx_2, ff_2, ry_1, rx_1, rc_1, nn_3, yy_3, xx_3, ff_3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(64), T.int64(1), T.int64(2), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(2), T.int64(8)):
                    with T.block("conv2d_nhwc"):
                        v_nn = T.axis.spatial(T.int64(1), nn_0 + nn_1 + nn_2 + nn_3)
                        v_yy = T.axis.spatial(T.int64(2), yy_0 * T.int64(2) + yy_1 * T.int64(2) + yy_2 + yy_3)
                        v_xx = T.axis.spatial(T.int64(2), xx_0 * T.int64(2) + xx_1 * T.int64(2) + xx_2 * T.int64(2) + xx_3)
                        v_ff = T.axis.spatial(T.int64(256), ff_0 * T.int64(256) + ff_1 * T.int64(16) + ff_2 * T.int64(8) + ff_3)
                        v_ry = T.axis.reduce(T.int64(1), ry_0 + ry_1)
                        v_rx = T.axis.reduce(T.int64(1), rx_0 + rx_1)
                        v_rc = T.axis.reduce(T.int64(512), rc_0 * T.int64(8) + rc_1)
                        T.reads(p0[v_nn, v_yy * T.int64(2) + v_ry, v_xx * T.int64(2) + v_rx, v_rc], p1[v_ry, v_rx, v_rc, v_ff])
                        T.writes(conv2d_nhwc[v_nn, v_yy, v_xx, v_ff])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_nhwc[v_nn, v_yy, v_xx, v_ff] = T.float32(0)
                        conv2d_nhwc[v_nn, v_yy, v_xx, v_ff] = conv2d_nhwc[v_nn, v_yy, v_xx, v_ff] + p0[v_nn, v_yy * T.int64(2) + v_ry, v_xx * T.int64(2) + v_rx, v_rc] * p1[v_ry, v_rx, v_rc, v_ff]
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(2), T.int64(256)):
                    with T.block("T_relu"):
                        v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                        T.reads(conv2d_nhwc[v_ax0, v_ax1, v_ax2, v_ax3], p2[v_ax0, T.int64(0), T.int64(0), v_ax3], p3[v_ax0, T.int64(0), T.int64(0), v_ax3])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(conv2d_nhwc[v_ax0, v_ax1, v_ax2, v_ax3] + p2[v_ax0, T.int64(0), T.int64(0), v_ax3] + p3[v_ax0, T.int64(0), T.int64(0), v_ax3], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nhwc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_add_1", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b3)
sch.compute_inline(block=b2)
sch.compute_inline(block=b0)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l5, factors=[v12, v13, v14, v15], preserve_unit_iters=True, disable_predication=False)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 2, 1])
l24, l25, l26, l27 = sch.split(loop=l6, factors=[v20, v21, v22, v23], preserve_unit_iters=True, disable_predication=False)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 1, 2])
l32, l33, l34, l35 = sch.split(loop=l7, factors=[v28, v29, v30, v31], preserve_unit_iters=True, disable_predication=False)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 16, 2, 8])
l40, l41, l42, l43 = sch.split(loop=l8, factors=[v36, v37, v38, v39], preserve_unit_iters=True, disable_predication=False)
v44, v45 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l46, l47 = sch.split(loop=l9, factors=[v44, v45], preserve_unit_iters=True, disable_predication=False)
v48, v49 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l50, l51 = sch.split(loop=l10, factors=[v48, v49], preserve_unit_iters=True, disable_predication=False)
v52, v53 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[64, 8])
l54, l55 = sch.split(loop=l11, factors=[v52, v53], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l16, l24, l32, l40, l17, l25, l33, l41, l46, l50, l54, l18, l26, l34, l42, l47, l51, l55, l19, l27, l35, l43)
b56, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b56, loop=l40, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.parallel", ann_val=96)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.vectorize", ann_val=64)
v57 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v57)
2024-04-30 19:15:07 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-30 19:15:07 [INFO] [evolutionary_search.cc:715] Picked top 4 candidate(s) from database
2024-04-30 19:15:08 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xcf44728)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x9afc428)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x1bf08748)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xcc825b8)]: 0 failure(s)
2024-04-30 19:15:08 [INFO] [evolutionary_search.cc:723] Sampled 508 candidate(s)
2024-04-30 19:15:09 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xcf44728)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x9afc428)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x1bf08748)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xcc825b8)]: 0 failure(s)
2024-04-30 19:15:10 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xcf44728)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x9afc428)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x1bf08748)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xcc825b8)]: 0 failure(s)
2024-04-30 19:15:11 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xcf44728)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x9afc428)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x1bf08748)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xcc825b8)]: 0 failure(s)
2024-04-30 19:15:13 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xcf44728)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x9afc428)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x1bf08748)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xcc825b8)]: 0 failure(s)
2024-04-30 19:15:13 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9994  0.9993  0.9982  0.9958  0.9956  0.9950  0.9948  0.9947  0.9942  0.9940  0.9926  0.9925  0.9925  0.9921  0.9910  0.9909
[17 : 32]:	0.9909  0.9906  0.9905  0.9896  0.9893  0.9883  0.9880  0.9880  0.9878  0.9866  0.9866  0.9862  0.9855  0.9855  0.9830  0.9827
[33 : 48]:	0.9825  0.9825  0.9824  0.9823  0.9821  0.9813  0.9812  0.9799  0.9796  0.9793  0.9780  0.9779  0.9767  0.9762  0.9758  0.9754
[49 : 64]:	0.9754  0.9753  0.9751  0.9751  0.9748  0.9740  0.9740  0.9739  0.9737  0.9735  0.9735  0.9734  0.9725  0.9724  0.9712  0.9703
2024-04-30 19:15:13 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-30 19:15:13 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-30 19:36:22 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_add_nn_relu_1] Trial #1: GFLOPs: 22.0308. Time: 47.7353 us. Best GFLOPs: 22.0308
2024-04-30 19:36:22 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_add_nn_relu_1] Trial #2: GFLOPs: 15.2682. Time: 68.8781 us. Best GFLOPs: 22.0308
2024-04-30 19:36:22 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_add_nn_relu_1] Trial #3: GFLOPs: 12.2021. Time: 86.1857 us. Best GFLOPs: 22.0308
2024-04-30 19:36:22 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_add_nn_relu_1] Trial #4: GFLOPs: 30.9422. Time: 33.9875 us. Best GFLOPs: 30.9422
2024-04-30 19:36:22 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_add_nn_relu_1] Trial #5: GFLOPs: 33.9807. Time: 30.9484 us. Best GFLOPs: 33.9807
2024-04-30 19:36:22 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_add_nn_relu_1] Trial #6: GFLOPs: 21.5101. Time: 48.8908 us. Best GFLOPs: 33.9807
2024-04-30 19:36:22 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_add_nn_relu_1] Trial #7: GFLOPs: 49.4348. Time: 21.2734 us. Best GFLOPs: 49.4348
2024-04-30 19:36:22 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_add_nn_relu_1] Trial #8: GFLOPs: 54.8136. Time: 19.1859 us. Best GFLOPs: 54.8136
2024-04-30 19:36:22 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_add_nn_relu_1] Trial #9: GFLOPs: 24.5866. Time: 42.7732 us. Best GFLOPs: 54.8136
2024-04-30 19:36:22 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_add_nn_relu_1] Trial #10: GFLOPs: 14.2949. Time: 73.5680 us. Best GFLOPs: 54.8136
2024-04-30 19:36:22 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_add_nn_relu_1] Trial #11: GFLOPs: 61.0290. Time: 17.2319 us. Best GFLOPs: 61.0290
2024-04-30 19:36:22 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_add_nn_relu_1] Trial #12: GFLOPs: 5.2869. Time: 198.9164 us. Best GFLOPs: 61.0290
2024-04-30 19:36:22 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_add_nn_relu_1] Trial #13: GFLOPs: 41.6275. Time: 25.2633 us. Best GFLOPs: 61.0290
2024-04-30 19:36:22 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_add_nn_relu_1] Trial #14: GFLOPs: 23.0033. Time: 45.7173 us. Best GFLOPs: 61.0290
2024-04-30 19:36:22 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_add_nn_relu_1] Trial #15: GFLOPs: 32.0316. Time: 32.8316 us. Best GFLOPs: 61.0290
2024-04-30 19:36:22 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_add_nn_relu_1] Trial #16: GFLOPs: 42.2234. Time: 24.9067 us. Best GFLOPs: 61.0290
2024-04-30 19:36:22 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_add_nn_relu_1] Trial #17: GFLOPs: 21.7792. Time: 48.2868 us. Best GFLOPs: 61.0290
2024-04-30 19:36:22 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_add_nn_relu_1] Trial #18: GFLOPs: 24.7572. Time: 42.4785 us. Best GFLOPs: 61.0290
2024-04-30 19:36:22 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_add_nn_relu_1] Trial #19: GFLOPs: 61.7706. Time: 17.0251 us. Best GFLOPs: 61.7706
2024-04-30 19:36:22 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_add_nn_relu_1] Trial #20: GFLOPs: 24.0740. Time: 43.6840 us. Best GFLOPs: 61.7706
2024-04-30 19:36:22 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_add_nn_relu_1] Trial #21: GFLOPs: 10.2685. Time: 102.4146 us. Best GFLOPs: 61.7706
2024-04-30 19:36:22 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_add_nn_relu_1] Trial #22: GFLOPs: 38.7745. Time: 27.1222 us. Best GFLOPs: 61.7706
2024-04-30 19:36:22 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_add_nn_relu_1] Trial #23: GFLOPs: 22.1868. Time: 47.3998 us. Best GFLOPs: 61.7706
2024-04-30 19:36:22 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_add_nn_relu_1] Trial #24: GFLOPs: 12.4413. Time: 84.5289 us. Best GFLOPs: 61.7706
2024-04-30 19:36:22 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_add_nn_relu_1] Trial #25: GFLOPs: 23.7847. Time: 44.2152 us. Best GFLOPs: 61.7706
2024-04-30 19:36:22 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_add_nn_relu_1] Trial #26: GFLOPs: 32.5460. Time: 32.3126 us. Best GFLOPs: 61.7706
2024-04-30 19:36:22 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_add_nn_relu_1] Trial #27: GFLOPs: 31.8477. Time: 33.0212 us. Best GFLOPs: 61.7706
2024-04-30 19:36:22 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_add_nn_relu_1] Trial #28: GFLOPs: 27.1154. Time: 38.7842 us. Best GFLOPs: 61.7706
2024-04-30 19:36:22 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_add_nn_relu_1] Trial #29: GFLOPs: 31.3024. Time: 33.5964 us. Best GFLOPs: 61.7706
2024-04-30 19:36:22 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_add_nn_relu_1] Trial #30: GFLOPs: 79.9048. Time: 13.1613 us. Best GFLOPs: 79.9048
2024-04-30 19:36:22 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_add_nn_relu_1] Trial #31: GFLOPs: 6.3143. Time: 166.5495 us. Best GFLOPs: 79.9048
2024-04-30 19:36:22 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_add_nn_relu_1] Trial #32: GFLOPs: 42.9974. Time: 24.4584 us. Best GFLOPs: 79.9048
2024-04-30 19:36:22 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_add_nn_relu_1] Trial #33: GFLOPs: 38.9658. Time: 26.9890 us. Best GFLOPs: 79.9048
2024-04-30 19:36:22 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_add_nn_relu_1] Trial #34: GFLOPs: 14.1270. Time: 74.4422 us. Best GFLOPs: 79.9048
2024-04-30 19:36:22 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_add_nn_relu_1] Trial #35: GFLOPs: 17.0259. Time: 61.7675 us. Best GFLOPs: 79.9048
2024-04-30 19:36:22 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_add_nn_relu_1] Trial #36: GFLOPs: 19.3812. Time: 54.2612 us. Best GFLOPs: 79.9048
2024-04-30 19:36:22 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_add_nn_relu_1] Trial #37: GFLOPs: 37.9262. Time: 27.7288 us. Best GFLOPs: 79.9048
2024-04-30 19:36:22 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_add_nn_relu_1] Trial #38: GFLOPs: 15.1137. Time: 69.5826 us. Best GFLOPs: 79.9048
2024-04-30 19:36:22 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_add_nn_relu_1] Trial #39: GFLOPs: 27.2824. Time: 38.5467 us. Best GFLOPs: 79.9048
2024-04-30 19:36:22 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_add_nn_relu_1] Trial #40: GFLOPs: 33.5711. Time: 31.3260 us. Best GFLOPs: 79.9048
2024-04-30 19:36:22 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_add_nn_relu_1] Trial #41: GFLOPs: 22.6663. Time: 46.3970 us. Best GFLOPs: 79.9048
2024-04-30 19:36:22 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_add_nn_relu_1] Trial #42: GFLOPs: 12.1045. Time: 86.8807 us. Best GFLOPs: 79.9048
2024-04-30 19:36:22 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_add_nn_relu_1] Trial #43: GFLOPs: 51.4436. Time: 20.4428 us. Best GFLOPs: 79.9048
2024-04-30 19:36:22 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_add_nn_relu_1] Trial #44: GFLOPs: 18.3826. Time: 57.2088 us. Best GFLOPs: 79.9048
2024-04-30 19:36:22 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_add_nn_relu_1] Trial #45: GFLOPs: 17.1089. Time: 61.4678 us. Best GFLOPs: 79.9048
2024-04-30 19:36:22 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_add_nn_relu_1] Trial #46: GFLOPs: 13.7534. Time: 76.4646 us. Best GFLOPs: 79.9048
2024-04-30 19:36:22 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_add_nn_relu_1] Trial #47: GFLOPs: 28.2280. Time: 37.2555 us. Best GFLOPs: 79.9048
2024-04-30 19:36:22 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_add_nn_relu_1] Trial #48: GFLOPs: 8.3702. Time: 125.6419 us. Best GFLOPs: 79.9048
2024-04-30 19:36:22 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_add_nn_relu_1] Trial #49: GFLOPs: 28.3802. Time: 37.0557 us. Best GFLOPs: 79.9048
2024-04-30 19:36:22 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_add_nn_relu_1] Trial #50: GFLOPs: 41.2317. Time: 25.5058 us. Best GFLOPs: 79.9048
2024-04-30 19:36:22 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_add_nn_relu_1] Trial #51: GFLOPs: 11.7469. Time: 89.5255 us. Best GFLOPs: 79.9048
2024-04-30 19:36:22 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_add_nn_relu_1] Trial #52: GFLOPs: 98.1976. Time: 10.7095 us. Best GFLOPs: 98.1976
2024-04-30 19:36:22 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_add_nn_relu_1] Trial #53: GFLOPs: 47.9908. Time: 21.9135 us. Best GFLOPs: 98.1976
2024-04-30 19:36:22 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_add_nn_relu_1] Trial #54: GFLOPs: 30.2916. Time: 34.7175 us. Best GFLOPs: 98.1976
2024-04-30 19:36:22 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_add_nn_relu_1] Trial #55: GFLOPs: 21.5216. Time: 48.8647 us. Best GFLOPs: 98.1976
2024-04-30 19:36:22 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_add_nn_relu_1] Trial #56: GFLOPs: 16.4226. Time: 64.0368 us. Best GFLOPs: 98.1976
2024-04-30 19:36:22 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_add_nn_relu_1] Trial #57: GFLOPs: 23.4583. Time: 44.8305 us. Best GFLOPs: 98.1976
2024-04-30 19:36:22 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_add_nn_relu_1] Trial #58: GFLOPs: 16.2741. Time: 64.6209 us. Best GFLOPs: 98.1976
2024-04-30 19:36:22 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_add_nn_relu_1] Trial #59: GFLOPs: 44.7916. Time: 23.4787 us. Best GFLOPs: 98.1976
2024-04-30 19:36:22 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_add_nn_relu_1] Trial #60: GFLOPs: 43.9865. Time: 23.9084 us. Best GFLOPs: 98.1976
2024-04-30 19:36:22 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_add_nn_relu_1] Trial #61: GFLOPs: 10.4469. Time: 100.6659 us. Best GFLOPs: 98.1976
2024-04-30 19:36:22 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_add_nn_relu_1] Trial #62: GFLOPs: 39.7120. Time: 26.4819 us. Best GFLOPs: 98.1976
2024-04-30 19:36:22 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_add_nn_relu_1] Trial #63: GFLOPs: 27.0088. Time: 38.9373 us. Best GFLOPs: 98.1976
2024-04-30 19:36:22 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_add_nn_relu_1] Trial #64: GFLOPs: 41.6883. Time: 25.2265 us. Best GFLOPs: 98.1976
