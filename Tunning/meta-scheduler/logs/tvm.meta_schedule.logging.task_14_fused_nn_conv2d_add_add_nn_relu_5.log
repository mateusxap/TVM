2024-04-30 19:06:05 [INFO] [task_scheduler.cc:160] Initializing Task #14: "fused_nn_conv2d_add_add_nn_relu_5"
2024-04-30 19:06:05 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(8), T.int64(8), T.int64(64)), "float32"), p1: T.Buffer((T.int64(3), T.int64(3), T.int64(64), T.int64(64)), "float32"), p2: T.Buffer((T.int64(1), T.int64(1), T.int64(1), T.int64(64)), "float32"), p3: T.Buffer((T.int64(1), T.int64(1), T.int64(1), T.int64(64)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(8), T.int64(8), T.int64(64)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        pad_temp = T.alloc_buffer((T.int64(1), T.int64(10), T.int64(10), T.int64(64)))
        conv2d_nhwc = T.alloc_buffer((T.int64(1), T.int64(8), T.int64(8), T.int64(64)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(8), T.int64(8), T.int64(64)))
        T_add_1 = T.alloc_buffer((T.int64(1), T.int64(8), T.int64(8), T.int64(64)))
        for i0, i1, i2, i3 in T.grid(T.int64(1), T.int64(10), T.int64(10), T.int64(64)):
            with T.block("pad_temp"):
                v_i0, v_i1, v_i2, v_i3 = T.axis.remap("SSSS", [i0, i1, i2, i3])
                T.reads(p0[v_i0, v_i1 - T.int64(1), v_i2 - T.int64(1), v_i3])
                T.writes(pad_temp[v_i0, v_i1, v_i2, v_i3])
                pad_temp[v_i0, v_i1, v_i2, v_i3] = T.if_then_else(T.int64(1) <= v_i1 and v_i1 < T.int64(9) and T.int64(1) <= v_i2 and v_i2 < T.int64(9), p0[v_i0, v_i1 - T.int64(1), v_i2 - T.int64(1), v_i3], T.float32(0))
        for nn, yy, xx, ff, ry, rx, rc in T.grid(T.int64(1), T.int64(8), T.int64(8), T.int64(64), T.int64(3), T.int64(3), T.int64(64)):
            with T.block("conv2d_nhwc"):
                v_nn, v_yy, v_xx, v_ff, v_ry, v_rx, v_rc = T.axis.remap("SSSSRRR", [nn, yy, xx, ff, ry, rx, rc])
                T.reads(pad_temp[v_nn, v_yy + v_ry, v_xx + v_rx, v_rc], p1[v_ry, v_rx, v_rc, v_ff])
                T.writes(conv2d_nhwc[v_nn, v_yy, v_xx, v_ff])
                with T.init():
                    conv2d_nhwc[v_nn, v_yy, v_xx, v_ff] = T.float32(0)
                conv2d_nhwc[v_nn, v_yy, v_xx, v_ff] = conv2d_nhwc[v_nn, v_yy, v_xx, v_ff] + pad_temp[v_nn, v_yy + v_ry, v_xx + v_rx, v_rc] * p1[v_ry, v_rx, v_rc, v_ff]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(8), T.int64(8), T.int64(64)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(conv2d_nhwc[v_ax0, v_ax1, v_ax2, v_ax3], p2[v_ax0, T.int64(0), T.int64(0), v_ax3])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3] = conv2d_nhwc[v_ax0, v_ax1, v_ax2, v_ax3] + p2[v_ax0, T.int64(0), T.int64(0), v_ax3]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(8), T.int64(8), T.int64(64)):
            with T.block("T_add_1"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3], p3[v_ax0, T.int64(0), T.int64(0), v_ax3])
                T.writes(T_add_1[v_ax0, v_ax1, v_ax2, v_ax3])
                T_add_1[v_ax0, v_ax1, v_ax2, v_ax3] = T_add[v_ax0, v_ax1, v_ax2, v_ax3] + p3[v_ax0, T.int64(0), T.int64(0), v_ax3]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(8), T.int64(8), T.int64(64)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(T_add_1[v_ax0, v_ax1, v_ax2, v_ax3])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(T_add_1[v_ax0, v_ax1, v_ax2, v_ax3], T.float32(0))
2024-04-30 19:06:06 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-30 19:06:06 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(8), T.int64(8), T.int64(64)), "float32"), p1: T.Buffer((T.int64(3), T.int64(3), T.int64(64), T.int64(64)), "float32"), p2: T.Buffer((T.int64(1), T.int64(1), T.int64(1), T.int64(64)), "float32"), p3: T.Buffer((T.int64(1), T.int64(1), T.int64(1), T.int64(64)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(8), T.int64(8), T.int64(64)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 96, "meta_schedule.unroll_explicit": 16, "meta_schedule.vectorize": 64})
            pad_temp = T.alloc_buffer((T.int64(1), T.int64(10), T.int64(10), T.int64(64)))
            conv2d_nhwc = T.alloc_buffer((T.int64(1), T.int64(8), T.int64(8), T.int64(64)))
            for nn_0, yy_0, xx_0, ff_0, nn_1, yy_1, xx_1 in T.grid(T.int64(1), T.int64(4), T.int64(2), T.int64(32), T.int64(1), T.int64(2), T.int64(2)):
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(3), T.int64(4), T.int64(64)):
                    with T.block("pad_temp"):
                        v_i0 = T.axis.spatial(T.int64(1), ax0)
                        v_i1 = T.axis.spatial(T.int64(10), yy_0 * T.int64(2) + yy_1 + ax1)
                        v_i2 = T.axis.spatial(T.int64(10), xx_0 * T.int64(4) + xx_1 * T.int64(2) + ax2)
                        v_i3 = T.axis.spatial(T.int64(64), ax3)
                        T.reads(p0[v_i0, v_i1 - T.int64(1), v_i2 - T.int64(1), v_i3])
                        T.writes(pad_temp[v_i0, v_i1, v_i2, v_i3])
                        pad_temp[v_i0, v_i1, v_i2, v_i3] = T.if_then_else(T.int64(1) <= v_i1 and v_i1 < T.int64(9) and T.int64(1) <= v_i2 and v_i2 < T.int64(9), p0[v_i0, v_i1 - T.int64(1), v_i2 - T.int64(1), v_i3], T.float32(0))
                for ff_1, ry_0, rx_0, rc_0, nn_2, yy_2, xx_2, ff_2, ry_1, rx_1, rc_1, nn_3, yy_3, xx_3, ff_3 in T.grid(T.int64(2), T.int64(3), T.int64(3), T.int64(64), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1)):
                    with T.block("conv2d_nhwc"):
                        v_nn = T.axis.spatial(T.int64(1), nn_0 + nn_1 + nn_2 + nn_3)
                        v_yy = T.axis.spatial(T.int64(8), yy_0 * T.int64(2) + yy_1 + yy_2 + yy_3)
                        v_xx = T.axis.spatial(T.int64(8), xx_0 * T.int64(4) + xx_1 * T.int64(2) + xx_2 * T.int64(2) + xx_3)
                        v_ff = T.axis.spatial(T.int64(64), ff_0 * T.int64(2) + ff_1 + ff_2 + ff_3)
                        v_ry = T.axis.reduce(T.int64(3), ry_0 + ry_1)
                        v_rx = T.axis.reduce(T.int64(3), rx_0 + rx_1)
                        v_rc = T.axis.reduce(T.int64(64), rc_0 + rc_1)
                        T.reads(pad_temp[v_nn, v_yy + v_ry, v_xx + v_rx, v_rc], p1[v_ry, v_rx, v_rc, v_ff])
                        T.writes(conv2d_nhwc[v_nn, v_yy, v_xx, v_ff])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_nhwc[v_nn, v_yy, v_xx, v_ff] = T.float32(0)
                        conv2d_nhwc[v_nn, v_yy, v_xx, v_ff] = conv2d_nhwc[v_nn, v_yy, v_xx, v_ff] + pad_temp[v_nn, v_yy + v_ry, v_xx + v_rx, v_rc] * p1[v_ry, v_rx, v_rc, v_ff]
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(8), T.int64(8), T.int64(64)):
                with T.block("T_relu"):
                    v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                    T.reads(conv2d_nhwc[v_ax0, v_ax1, v_ax2, v_ax3], p2[v_ax0, T.int64(0), T.int64(0), v_ax3], p3[v_ax0, T.int64(0), T.int64(0), v_ax3])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(conv2d_nhwc[v_ax0, v_ax1, v_ax2, v_ax3] + p2[v_ax0, T.int64(0), T.int64(0), v_ax3] + p3[v_ax0, T.int64(0), T.int64(0), v_ax3], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nhwc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_add_1", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b3)
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l5, factors=[v12, v13, v14, v15], preserve_unit_iters=True, disable_predication=False)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[4, 2, 1, 1])
l24, l25, l26, l27 = sch.split(loop=l6, factors=[v20, v21, v22, v23], preserve_unit_iters=True, disable_predication=False)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 2, 1, 2])
l32, l33, l34, l35 = sch.split(loop=l7, factors=[v28, v29, v30, v31], preserve_unit_iters=True, disable_predication=False)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[32, 2, 1, 1])
l40, l41, l42, l43 = sch.split(loop=l8, factors=[v36, v37, v38, v39], preserve_unit_iters=True, disable_predication=False)
v44, v45 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[3, 1])
l46, l47 = sch.split(loop=l9, factors=[v44, v45], preserve_unit_iters=True, disable_predication=False)
v48, v49 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 1])
l50, l51 = sch.split(loop=l10, factors=[v48, v49], preserve_unit_iters=True, disable_predication=False)
v52, v53 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[64, 1])
l54, l55 = sch.split(loop=l11, factors=[v52, v53], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l16, l24, l32, l40, l17, l25, l33, l41, l46, l50, l54, l18, l26, l34, l42, l47, l51, l55, l19, l27, l35, l43)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.parallel", ann_val=96)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.vectorize", ann_val=64)
v56 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v56)
l57 = sch.sample_compute_location(block=b0, decision=6)
sch.compute_at(block=b0, loop=l57, preserve_unit_loops=True, index=-1)
2024-04-30 19:06:06 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(8), T.int64(8), T.int64(64)), "float32"), p1: T.Buffer((T.int64(3), T.int64(3), T.int64(64), T.int64(64)), "float32"), p2: T.Buffer((T.int64(1), T.int64(1), T.int64(1), T.int64(64)), "float32"), p3: T.Buffer((T.int64(1), T.int64(1), T.int64(1), T.int64(64)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(8), T.int64(8), T.int64(64)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 96, "meta_schedule.unroll_explicit": 512, "meta_schedule.vectorize": 64})
            pad_temp = T.alloc_buffer((T.int64(1), T.int64(10), T.int64(10), T.int64(64)))
            conv2d_nhwc = T.alloc_buffer((T.int64(1), T.int64(8), T.int64(8), T.int64(64)))
            for nn_0, yy_0 in T.grid(T.int64(1), T.int64(4)):
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(4), T.int64(10), T.int64(64)):
                    with T.block("pad_temp"):
                        v_i0 = T.axis.spatial(T.int64(1), ax0)
                        v_i1 = T.axis.spatial(T.int64(10), yy_0 * T.int64(2) + ax1)
                        v_i2, v_i3 = T.axis.remap("SS", [ax2, ax3])
                        T.reads(p0[v_i0, v_i1 - T.int64(1), v_i2 - T.int64(1), v_i3])
                        T.writes(pad_temp[v_i0, v_i1, v_i2, v_i3])
                        pad_temp[v_i0, v_i1, v_i2, v_i3] = T.if_then_else(T.int64(1) <= v_i1 and v_i1 < T.int64(9) and T.int64(1) <= v_i2 and v_i2 < T.int64(9), p0[v_i0, v_i1 - T.int64(1), v_i2 - T.int64(1), v_i3], T.float32(0))
                for xx_0, ff_0, nn_1, yy_1, xx_1, ff_1 in T.grid(T.int64(2), T.int64(32), T.int64(1), T.int64(2), T.int64(2), T.int64(2)):
                    for ry_0, rx_0, rc_0, nn_2, yy_2, xx_2, ff_2, ry_1, rx_1, rc_1, nn_3, yy_3, xx_3, ff_3 in T.grid(T.int64(3), T.int64(3), T.int64(64), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1)):
                        with T.block("conv2d_nhwc"):
                            v_nn = T.axis.spatial(T.int64(1), nn_0 + nn_1 + nn_2 + nn_3)
                            v_yy = T.axis.spatial(T.int64(8), yy_0 * T.int64(2) + yy_1 + yy_2 + yy_3)
                            v_xx = T.axis.spatial(T.int64(8), xx_0 * T.int64(4) + xx_1 * T.int64(2) + xx_2 * T.int64(2) + xx_3)
                            v_ff = T.axis.spatial(T.int64(64), ff_0 * T.int64(2) + ff_1 + ff_2 + ff_3)
                            v_ry = T.axis.reduce(T.int64(3), ry_0 + ry_1)
                            v_rx = T.axis.reduce(T.int64(3), rx_0 + rx_1)
                            v_rc = T.axis.reduce(T.int64(64), rc_0 + rc_1)
                            T.reads(pad_temp[v_nn, v_yy + v_ry, v_xx + v_rx, v_rc], p1[v_ry, v_rx, v_rc, v_ff])
                            T.writes(conv2d_nhwc[v_nn, v_yy, v_xx, v_ff])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            with T.init():
                                conv2d_nhwc[v_nn, v_yy, v_xx, v_ff] = T.float32(0)
                            conv2d_nhwc[v_nn, v_yy, v_xx, v_ff] = conv2d_nhwc[v_nn, v_yy, v_xx, v_ff] + pad_temp[v_nn, v_yy + v_ry, v_xx + v_rx, v_rc] * p1[v_ry, v_rx, v_rc, v_ff]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(1)):
                        with T.block("T_relu"):
                            v_ax0 = T.axis.spatial(T.int64(1), ax0)
                            v_ax1 = T.axis.spatial(T.int64(8), yy_0 * T.int64(2) + yy_1 + ax1)
                            v_ax2 = T.axis.spatial(T.int64(8), xx_0 * T.int64(4) + xx_1 * T.int64(2) + ax2)
                            v_ax3 = T.axis.spatial(T.int64(64), ff_0 * T.int64(2) + ff_1 + ax3)
                            T.reads(conv2d_nhwc[v_ax0, v_ax1, v_ax2, v_ax3], p2[v_ax0, T.int64(0), T.int64(0), v_ax3], p3[v_ax0, T.int64(0), T.int64(0), v_ax3])
                            T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3])
                            T_relu[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(conv2d_nhwc[v_ax0, v_ax1, v_ax2, v_ax3] + p2[v_ax0, T.int64(0), T.int64(0), v_ax3] + p3[v_ax0, T.int64(0), T.int64(0), v_ax3], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nhwc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_add_1", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b3)
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l5, factors=[v12, v13, v14, v15], preserve_unit_iters=True, disable_predication=False)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[4, 2, 1, 1])
l24, l25, l26, l27 = sch.split(loop=l6, factors=[v20, v21, v22, v23], preserve_unit_iters=True, disable_predication=False)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 2, 1, 2])
l32, l33, l34, l35 = sch.split(loop=l7, factors=[v28, v29, v30, v31], preserve_unit_iters=True, disable_predication=False)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[32, 2, 1, 1])
l40, l41, l42, l43 = sch.split(loop=l8, factors=[v36, v37, v38, v39], preserve_unit_iters=True, disable_predication=False)
v44, v45 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[3, 1])
l46, l47 = sch.split(loop=l9, factors=[v44, v45], preserve_unit_iters=True, disable_predication=False)
v48, v49 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 1])
l50, l51 = sch.split(loop=l10, factors=[v48, v49], preserve_unit_iters=True, disable_predication=False)
v52, v53 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[64, 1])
l54, l55 = sch.split(loop=l11, factors=[v52, v53], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l16, l24, l32, l40, l17, l25, l33, l41, l46, l50, l54, l18, l26, l34, l42, l47, l51, l55, l19, l27, l35, l43)
b56, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b56, loop=l41, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.parallel", ann_val=96)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.vectorize", ann_val=64)
v57 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v57)
l58 = sch.sample_compute_location(block=b0, decision=1)
sch.compute_at(block=b0, loop=l58, preserve_unit_loops=True, index=-1)
2024-04-30 19:06:06 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(8), T.int64(8), T.int64(64)), "float32"), p1: T.Buffer((T.int64(3), T.int64(3), T.int64(64), T.int64(64)), "float32"), p2: T.Buffer((T.int64(1), T.int64(1), T.int64(1), T.int64(64)), "float32"), p3: T.Buffer((T.int64(1), T.int64(1), T.int64(1), T.int64(64)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(8), T.int64(8), T.int64(64)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 96, "meta_schedule.unroll_explicit": 16, "meta_schedule.vectorize": 64})
            pad_temp = T.alloc_buffer((T.int64(1), T.int64(10), T.int64(10), T.int64(64)))
            conv2d_nhwc = T.alloc_buffer((T.int64(1), T.int64(8), T.int64(8), T.int64(64)))
            for nn_0, yy_0, xx_0, ff_0 in T.grid(T.int64(1), T.int64(4), T.int64(2), T.int64(32)):
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(4), T.int64(6), T.int64(64)):
                    with T.block("pad_temp"):
                        v_i0 = T.axis.spatial(T.int64(1), ax0)
                        v_i1 = T.axis.spatial(T.int64(10), yy_0 * T.int64(2) + ax1)
                        v_i2 = T.axis.spatial(T.int64(10), xx_0 * T.int64(4) + ax2)
                        v_i3 = T.axis.spatial(T.int64(64), ax3)
                        T.reads(p0[v_i0, v_i1 - T.int64(1), v_i2 - T.int64(1), v_i3])
                        T.writes(pad_temp[v_i0, v_i1, v_i2, v_i3])
                        pad_temp[v_i0, v_i1, v_i2, v_i3] = T.if_then_else(T.int64(1) <= v_i1 and v_i1 < T.int64(9) and T.int64(1) <= v_i2 and v_i2 < T.int64(9), p0[v_i0, v_i1 - T.int64(1), v_i2 - T.int64(1), v_i3], T.float32(0))
                for nn_1, yy_1, xx_1, ff_1, ry_0, rx_0, rc_0, nn_2, yy_2, xx_2, ff_2, ry_1, rx_1, rc_1, nn_3, yy_3, xx_3, ff_3 in T.grid(T.int64(1), T.int64(2), T.int64(2), T.int64(2), T.int64(3), T.int64(3), T.int64(64), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1)):
                    with T.block("conv2d_nhwc"):
                        v_nn = T.axis.spatial(T.int64(1), nn_0 + nn_1 + nn_2 + nn_3)
                        v_yy = T.axis.spatial(T.int64(8), yy_0 * T.int64(2) + yy_1 + yy_2 + yy_3)
                        v_xx = T.axis.spatial(T.int64(8), xx_0 * T.int64(4) + xx_1 * T.int64(2) + xx_2 * T.int64(2) + xx_3)
                        v_ff = T.axis.spatial(T.int64(64), ff_0 * T.int64(2) + ff_1 + ff_2 + ff_3)
                        v_ry = T.axis.reduce(T.int64(3), ry_0 + ry_1)
                        v_rx = T.axis.reduce(T.int64(3), rx_0 + rx_1)
                        v_rc = T.axis.reduce(T.int64(64), rc_0 + rc_1)
                        T.reads(pad_temp[v_nn, v_yy + v_ry, v_xx + v_rx, v_rc], p1[v_ry, v_rx, v_rc, v_ff])
                        T.writes(conv2d_nhwc[v_nn, v_yy, v_xx, v_ff])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_nhwc[v_nn, v_yy, v_xx, v_ff] = T.float32(0)
                        conv2d_nhwc[v_nn, v_yy, v_xx, v_ff] = conv2d_nhwc[v_nn, v_yy, v_xx, v_ff] + pad_temp[v_nn, v_yy + v_ry, v_xx + v_rx, v_rc] * p1[v_ry, v_rx, v_rc, v_ff]
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(4), T.int64(2)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(8), yy_0 * T.int64(2) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(8), xx_0 * T.int64(4) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(64), ff_0 * T.int64(2) + ax3)
                        T.reads(conv2d_nhwc[v_ax0, v_ax1, v_ax2, v_ax3], p2[v_ax0, T.int64(0), T.int64(0), v_ax3], p3[v_ax0, T.int64(0), T.int64(0), v_ax3])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(conv2d_nhwc[v_ax0, v_ax1, v_ax2, v_ax3] + p2[v_ax0, T.int64(0), T.int64(0), v_ax3] + p3[v_ax0, T.int64(0), T.int64(0), v_ax3], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nhwc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_add_1", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b3)
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l5, factors=[v12, v13, v14, v15], preserve_unit_iters=True, disable_predication=False)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[4, 2, 1, 1])
l24, l25, l26, l27 = sch.split(loop=l6, factors=[v20, v21, v22, v23], preserve_unit_iters=True, disable_predication=False)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 2, 1, 2])
l32, l33, l34, l35 = sch.split(loop=l7, factors=[v28, v29, v30, v31], preserve_unit_iters=True, disable_predication=False)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[32, 2, 1, 1])
l40, l41, l42, l43 = sch.split(loop=l8, factors=[v36, v37, v38, v39], preserve_unit_iters=True, disable_predication=False)
v44, v45 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[3, 1])
l46, l47 = sch.split(loop=l9, factors=[v44, v45], preserve_unit_iters=True, disable_predication=False)
v48, v49 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 1])
l50, l51 = sch.split(loop=l10, factors=[v48, v49], preserve_unit_iters=True, disable_predication=False)
v52, v53 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[64, 1])
l54, l55 = sch.split(loop=l11, factors=[v52, v53], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l16, l24, l32, l40, l17, l25, l33, l41, l46, l50, l54, l18, l26, l34, l42, l47, l51, l55, l19, l27, l35, l43)
b56, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b56, loop=l40, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.parallel", ann_val=96)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.vectorize", ann_val=64)
v57 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v57)
l58 = sch.sample_compute_location(block=b0, decision=3)
sch.compute_at(block=b0, loop=l58, preserve_unit_loops=True, index=-1)
2024-04-30 19:13:54 [INFO] [task_scheduler.cc:160] Initializing Task #14: "fused_nn_conv2d_add_add_nn_relu_5"
2024-04-30 19:13:54 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(8), T.int64(8), T.int64(64)), "float32"), p1: T.Buffer((T.int64(3), T.int64(3), T.int64(64), T.int64(64)), "float32"), p2: T.Buffer((T.int64(1), T.int64(1), T.int64(1), T.int64(64)), "float32"), p3: T.Buffer((T.int64(1), T.int64(1), T.int64(1), T.int64(64)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(8), T.int64(8), T.int64(64)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        pad_temp = T.alloc_buffer((T.int64(1), T.int64(10), T.int64(10), T.int64(64)))
        conv2d_nhwc = T.alloc_buffer((T.int64(1), T.int64(8), T.int64(8), T.int64(64)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(8), T.int64(8), T.int64(64)))
        T_add_1 = T.alloc_buffer((T.int64(1), T.int64(8), T.int64(8), T.int64(64)))
        for i0, i1, i2, i3 in T.grid(T.int64(1), T.int64(10), T.int64(10), T.int64(64)):
            with T.block("pad_temp"):
                v_i0, v_i1, v_i2, v_i3 = T.axis.remap("SSSS", [i0, i1, i2, i3])
                T.reads(p0[v_i0, v_i1 - T.int64(1), v_i2 - T.int64(1), v_i3])
                T.writes(pad_temp[v_i0, v_i1, v_i2, v_i3])
                pad_temp[v_i0, v_i1, v_i2, v_i3] = T.if_then_else(T.int64(1) <= v_i1 and v_i1 < T.int64(9) and T.int64(1) <= v_i2 and v_i2 < T.int64(9), p0[v_i0, v_i1 - T.int64(1), v_i2 - T.int64(1), v_i3], T.float32(0))
        for nn, yy, xx, ff, ry, rx, rc in T.grid(T.int64(1), T.int64(8), T.int64(8), T.int64(64), T.int64(3), T.int64(3), T.int64(64)):
            with T.block("conv2d_nhwc"):
                v_nn, v_yy, v_xx, v_ff, v_ry, v_rx, v_rc = T.axis.remap("SSSSRRR", [nn, yy, xx, ff, ry, rx, rc])
                T.reads(pad_temp[v_nn, v_yy + v_ry, v_xx + v_rx, v_rc], p1[v_ry, v_rx, v_rc, v_ff])
                T.writes(conv2d_nhwc[v_nn, v_yy, v_xx, v_ff])
                with T.init():
                    conv2d_nhwc[v_nn, v_yy, v_xx, v_ff] = T.float32(0)
                conv2d_nhwc[v_nn, v_yy, v_xx, v_ff] = conv2d_nhwc[v_nn, v_yy, v_xx, v_ff] + pad_temp[v_nn, v_yy + v_ry, v_xx + v_rx, v_rc] * p1[v_ry, v_rx, v_rc, v_ff]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(8), T.int64(8), T.int64(64)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(conv2d_nhwc[v_ax0, v_ax1, v_ax2, v_ax3], p2[v_ax0, T.int64(0), T.int64(0), v_ax3])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3] = conv2d_nhwc[v_ax0, v_ax1, v_ax2, v_ax3] + p2[v_ax0, T.int64(0), T.int64(0), v_ax3]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(8), T.int64(8), T.int64(64)):
            with T.block("T_add_1"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3], p3[v_ax0, T.int64(0), T.int64(0), v_ax3])
                T.writes(T_add_1[v_ax0, v_ax1, v_ax2, v_ax3])
                T_add_1[v_ax0, v_ax1, v_ax2, v_ax3] = T_add[v_ax0, v_ax1, v_ax2, v_ax3] + p3[v_ax0, T.int64(0), T.int64(0), v_ax3]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(8), T.int64(8), T.int64(64)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(T_add_1[v_ax0, v_ax1, v_ax2, v_ax3])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(T_add_1[v_ax0, v_ax1, v_ax2, v_ax3], T.float32(0))
2024-04-30 19:13:54 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-30 19:13:54 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(8), T.int64(8), T.int64(64)), "float32"), p1: T.Buffer((T.int64(3), T.int64(3), T.int64(64), T.int64(64)), "float32"), p2: T.Buffer((T.int64(1), T.int64(1), T.int64(1), T.int64(64)), "float32"), p3: T.Buffer((T.int64(1), T.int64(1), T.int64(1), T.int64(64)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(8), T.int64(8), T.int64(64)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 96, "meta_schedule.unroll_explicit": 0, "meta_schedule.vectorize": 64})
            pad_temp = T.alloc_buffer((T.int64(1), T.int64(10), T.int64(10), T.int64(64)))
            conv2d_nhwc = T.alloc_buffer((T.int64(1), T.int64(8), T.int64(8), T.int64(64)))
            for nn_0, yy_0 in T.grid(T.int64(1), T.int64(2)):
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(6), T.int64(10), T.int64(64)):
                    with T.block("pad_temp"):
                        v_i0 = T.axis.spatial(T.int64(1), ax0)
                        v_i1 = T.axis.spatial(T.int64(10), yy_0 * T.int64(4) + ax1)
                        v_i2, v_i3 = T.axis.remap("SS", [ax2, ax3])
                        T.reads(p0[v_i0, v_i1 - T.int64(1), v_i2 - T.int64(1), v_i3])
                        T.writes(pad_temp[v_i0, v_i1, v_i2, v_i3])
                        pad_temp[v_i0, v_i1, v_i2, v_i3] = T.if_then_else(T.int64(1) <= v_i1 and v_i1 < T.int64(9) and T.int64(1) <= v_i2 and v_i2 < T.int64(9), p0[v_i0, v_i1 - T.int64(1), v_i2 - T.int64(1), v_i3], T.float32(0))
                for xx_0, ff_0, nn_1, yy_1, xx_1, ff_1, ry_0, rx_0, rc_0, nn_2, yy_2, xx_2, ff_2, ry_1, rx_1, rc_1, nn_3, yy_3, xx_3, ff_3 in T.grid(T.int64(1), T.int64(64), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(3), T.int64(32), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(3), T.int64(1), T.int64(2), T.int64(1), T.int64(4), T.int64(2), T.int64(1)):
                    with T.block("conv2d_nhwc"):
                        v_nn = T.axis.spatial(T.int64(1), nn_0 + nn_1 + nn_2 + nn_3)
                        v_yy = T.axis.spatial(T.int64(8), yy_0 * T.int64(4) + yy_1 * T.int64(4) + yy_2 * T.int64(4) + yy_3)
                        v_xx = T.axis.spatial(T.int64(8), xx_0 * T.int64(8) + xx_1 * T.int64(8) + xx_2 * T.int64(2) + xx_3)
                        v_ff = T.axis.spatial(T.int64(64), ff_0 + ff_1 + ff_2 + ff_3)
                        v_ry = T.axis.reduce(T.int64(3), ry_0 * T.int64(3) + ry_1)
                        v_rx = T.axis.reduce(T.int64(3), rx_0 + rx_1)
                        v_rc = T.axis.reduce(T.int64(64), rc_0 * T.int64(2) + rc_1)
                        T.reads(pad_temp[v_nn, v_yy + v_ry, v_xx + v_rx, v_rc], p1[v_ry, v_rx, v_rc, v_ff])
                        T.writes(conv2d_nhwc[v_nn, v_yy, v_xx, v_ff])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_nhwc[v_nn, v_yy, v_xx, v_ff] = T.float32(0)
                        conv2d_nhwc[v_nn, v_yy, v_xx, v_ff] = conv2d_nhwc[v_nn, v_yy, v_xx, v_ff] + pad_temp[v_nn, v_yy + v_ry, v_xx + v_rx, v_rc] * p1[v_ry, v_rx, v_rc, v_ff]
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(8), T.int64(8), T.int64(64)):
                with T.block("T_relu"):
                    v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                    T.reads(conv2d_nhwc[v_ax0, v_ax1, v_ax2, v_ax3], p2[v_ax0, T.int64(0), T.int64(0), v_ax3], p3[v_ax0, T.int64(0), T.int64(0), v_ax3])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(conv2d_nhwc[v_ax0, v_ax1, v_ax2, v_ax3] + p2[v_ax0, T.int64(0), T.int64(0), v_ax3] + p3[v_ax0, T.int64(0), T.int64(0), v_ax3], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nhwc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_add_1", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b3)
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l5, factors=[v12, v13, v14, v15], preserve_unit_iters=True, disable_predication=False)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[2, 1, 1, 4])
l24, l25, l26, l27 = sch.split(loop=l6, factors=[v20, v21, v22, v23], preserve_unit_iters=True, disable_predication=False)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 4, 2])
l32, l33, l34, l35 = sch.split(loop=l7, factors=[v28, v29, v30, v31], preserve_unit_iters=True, disable_predication=False)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[64, 1, 1, 1])
l40, l41, l42, l43 = sch.split(loop=l8, factors=[v36, v37, v38, v39], preserve_unit_iters=True, disable_predication=False)
v44, v45 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 3])
l46, l47 = sch.split(loop=l9, factors=[v44, v45], preserve_unit_iters=True, disable_predication=False)
v48, v49 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 1])
l50, l51 = sch.split(loop=l10, factors=[v48, v49], preserve_unit_iters=True, disable_predication=False)
v52, v53 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[32, 2])
l54, l55 = sch.split(loop=l11, factors=[v52, v53], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l16, l24, l32, l40, l17, l25, l33, l41, l46, l50, l54, l18, l26, l34, l42, l47, l51, l55, l19, l27, l35, l43)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.parallel", ann_val=96)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.vectorize", ann_val=64)
v56 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v56)
l57 = sch.sample_compute_location(block=b0, decision=1)
sch.compute_at(block=b0, loop=l57, preserve_unit_loops=True, index=-1)
2024-04-30 19:13:54 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(8), T.int64(8), T.int64(64)), "float32"), p1: T.Buffer((T.int64(3), T.int64(3), T.int64(64), T.int64(64)), "float32"), p2: T.Buffer((T.int64(1), T.int64(1), T.int64(1), T.int64(64)), "float32"), p3: T.Buffer((T.int64(1), T.int64(1), T.int64(1), T.int64(64)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(8), T.int64(8), T.int64(64)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 96, "meta_schedule.unroll_explicit": 0, "meta_schedule.vectorize": 64})
            pad_temp = T.alloc_buffer((T.int64(1), T.int64(10), T.int64(10), T.int64(64)))
            conv2d_nhwc = T.alloc_buffer((T.int64(1), T.int64(8), T.int64(8), T.int64(64)))
            for nn_0, yy_0, xx_0, ff_0 in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(64)):
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(6), T.int64(10), T.int64(64)):
                    with T.block("pad_temp"):
                        v_i0 = T.axis.spatial(T.int64(1), ax0)
                        v_i1 = T.axis.spatial(T.int64(10), yy_0 * T.int64(4) + ax1)
                        v_i2, v_i3 = T.axis.remap("SS", [ax2, ax3])
                        T.reads(p0[v_i0, v_i1 - T.int64(1), v_i2 - T.int64(1), v_i3])
                        T.writes(pad_temp[v_i0, v_i1, v_i2, v_i3])
                        pad_temp[v_i0, v_i1, v_i2, v_i3] = T.if_then_else(T.int64(1) <= v_i1 and v_i1 < T.int64(9) and T.int64(1) <= v_i2 and v_i2 < T.int64(9), p0[v_i0, v_i1 - T.int64(1), v_i2 - T.int64(1), v_i3], T.float32(0))
                for nn_1, yy_1, xx_1, ff_1 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                    for ry_0, rx_0, rc_0, nn_2, yy_2, xx_2, ff_2, ry_1, rx_1, rc_1, nn_3, yy_3, xx_3, ff_3 in T.grid(T.int64(1), T.int64(3), T.int64(32), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(3), T.int64(1), T.int64(2), T.int64(1), T.int64(4), T.int64(2), T.int64(1)):
                        with T.block("conv2d_nhwc"):
                            v_nn = T.axis.spatial(T.int64(1), nn_0 + nn_1 + nn_2 + nn_3)
                            v_yy = T.axis.spatial(T.int64(8), yy_0 * T.int64(4) + yy_1 * T.int64(4) + yy_2 * T.int64(4) + yy_3)
                            v_xx = T.axis.spatial(T.int64(8), xx_0 * T.int64(8) + xx_1 * T.int64(8) + xx_2 * T.int64(2) + xx_3)
                            v_ff = T.axis.spatial(T.int64(64), ff_0 + ff_1 + ff_2 + ff_3)
                            v_ry = T.axis.reduce(T.int64(3), ry_0 * T.int64(3) + ry_1)
                            v_rx = T.axis.reduce(T.int64(3), rx_0 + rx_1)
                            v_rc = T.axis.reduce(T.int64(64), rc_0 * T.int64(2) + rc_1)
                            T.reads(pad_temp[v_nn, v_yy + v_ry, v_xx + v_rx, v_rc], p1[v_ry, v_rx, v_rc, v_ff])
                            T.writes(conv2d_nhwc[v_nn, v_yy, v_xx, v_ff])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            with T.init():
                                conv2d_nhwc[v_nn, v_yy, v_xx, v_ff] = T.float32(0)
                            conv2d_nhwc[v_nn, v_yy, v_xx, v_ff] = conv2d_nhwc[v_nn, v_yy, v_xx, v_ff] + pad_temp[v_nn, v_yy + v_ry, v_xx + v_rx, v_rc] * p1[v_ry, v_rx, v_rc, v_ff]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(4), T.int64(8), T.int64(1)):
                        with T.block("T_relu"):
                            v_ax0 = T.axis.spatial(T.int64(1), ax0)
                            v_ax1 = T.axis.spatial(T.int64(8), yy_0 * T.int64(4) + ax1)
                            v_ax2 = T.axis.spatial(T.int64(8), ax2)
                            v_ax3 = T.axis.spatial(T.int64(64), ff_0 + ax3)
                            T.reads(conv2d_nhwc[v_ax0, v_ax1, v_ax2, v_ax3], p2[v_ax0, T.int64(0), T.int64(0), v_ax3], p3[v_ax0, T.int64(0), T.int64(0), v_ax3])
                            T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3])
                            T_relu[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(conv2d_nhwc[v_ax0, v_ax1, v_ax2, v_ax3] + p2[v_ax0, T.int64(0), T.int64(0), v_ax3] + p3[v_ax0, T.int64(0), T.int64(0), v_ax3], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nhwc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_add_1", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b3)
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l5, factors=[v12, v13, v14, v15], preserve_unit_iters=True, disable_predication=False)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[2, 1, 1, 4])
l24, l25, l26, l27 = sch.split(loop=l6, factors=[v20, v21, v22, v23], preserve_unit_iters=True, disable_predication=False)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 4, 2])
l32, l33, l34, l35 = sch.split(loop=l7, factors=[v28, v29, v30, v31], preserve_unit_iters=True, disable_predication=False)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[64, 1, 1, 1])
l40, l41, l42, l43 = sch.split(loop=l8, factors=[v36, v37, v38, v39], preserve_unit_iters=True, disable_predication=False)
v44, v45 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 3])
l46, l47 = sch.split(loop=l9, factors=[v44, v45], preserve_unit_iters=True, disable_predication=False)
v48, v49 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 1])
l50, l51 = sch.split(loop=l10, factors=[v48, v49], preserve_unit_iters=True, disable_predication=False)
v52, v53 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[32, 2])
l54, l55 = sch.split(loop=l11, factors=[v52, v53], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l16, l24, l32, l40, l17, l25, l33, l41, l46, l50, l54, l18, l26, l34, l42, l47, l51, l55, l19, l27, l35, l43)
b56, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b56, loop=l41, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.parallel", ann_val=96)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.vectorize", ann_val=64)
v57 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v57)
l58 = sch.sample_compute_location(block=b0, decision=3)
sch.compute_at(block=b0, loop=l58, preserve_unit_loops=True, index=-1)
2024-04-30 19:13:54 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(8), T.int64(8), T.int64(64)), "float32"), p1: T.Buffer((T.int64(3), T.int64(3), T.int64(64), T.int64(64)), "float32"), p2: T.Buffer((T.int64(1), T.int64(1), T.int64(1), T.int64(64)), "float32"), p3: T.Buffer((T.int64(1), T.int64(1), T.int64(1), T.int64(64)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(8), T.int64(8), T.int64(64)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 96, "meta_schedule.unroll_explicit": 0, "meta_schedule.vectorize": 64})
            pad_temp = T.alloc_buffer((T.int64(1), T.int64(10), T.int64(10), T.int64(64)))
            conv2d_nhwc = T.alloc_buffer((T.int64(1), T.int64(8), T.int64(8), T.int64(64)))
            for nn_0, yy_0, xx_0, ff_0 in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(64)):
                for nn_1, yy_1, xx_1, ff_1, ry_0, rx_0, rc_0 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(3), T.int64(32)):
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(6), T.int64(8), T.int64(2)):
                        with T.block("pad_temp"):
                            v_i0 = T.axis.spatial(T.int64(1), ax0)
                            v_i1 = T.axis.spatial(T.int64(10), yy_0 * T.int64(4) + ax1)
                            v_i2 = T.axis.spatial(T.int64(10), rx_0 + ax2)
                            v_i3 = T.axis.spatial(T.int64(64), rc_0 * T.int64(2) + ax3)
                            T.reads(p0[v_i0, v_i1 - T.int64(1), v_i2 - T.int64(1), v_i3])
                            T.writes(pad_temp[v_i0, v_i1, v_i2, v_i3])
                            pad_temp[v_i0, v_i1, v_i2, v_i3] = T.if_then_else(T.int64(1) <= v_i1 and v_i1 < T.int64(9) and T.int64(1) <= v_i2 and v_i2 < T.int64(9), p0[v_i0, v_i1 - T.int64(1), v_i2 - T.int64(1), v_i3], T.float32(0))
                    for nn_2, yy_2, xx_2, ff_2, ry_1, rx_1, rc_1, nn_3, yy_3, xx_3, ff_3 in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(3), T.int64(1), T.int64(2), T.int64(1), T.int64(4), T.int64(2), T.int64(1)):
                        with T.block("conv2d_nhwc"):
                            v_nn = T.axis.spatial(T.int64(1), nn_0 + nn_1 + nn_2 + nn_3)
                            v_yy = T.axis.spatial(T.int64(8), yy_0 * T.int64(4) + yy_1 * T.int64(4) + yy_2 * T.int64(4) + yy_3)
                            v_xx = T.axis.spatial(T.int64(8), xx_0 * T.int64(8) + xx_1 * T.int64(8) + xx_2 * T.int64(2) + xx_3)
                            v_ff = T.axis.spatial(T.int64(64), ff_0 + ff_1 + ff_2 + ff_3)
                            v_ry = T.axis.reduce(T.int64(3), ry_0 * T.int64(3) + ry_1)
                            v_rx = T.axis.reduce(T.int64(3), rx_0 + rx_1)
                            v_rc = T.axis.reduce(T.int64(64), rc_0 * T.int64(2) + rc_1)
                            T.reads(pad_temp[v_nn, v_yy + v_ry, v_xx + v_rx, v_rc], p1[v_ry, v_rx, v_rc, v_ff])
                            T.writes(conv2d_nhwc[v_nn, v_yy, v_xx, v_ff])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            with T.init():
                                conv2d_nhwc[v_nn, v_yy, v_xx, v_ff] = T.float32(0)
                            conv2d_nhwc[v_nn, v_yy, v_xx, v_ff] = conv2d_nhwc[v_nn, v_yy, v_xx, v_ff] + pad_temp[v_nn, v_yy + v_ry, v_xx + v_rx, v_rc] * p1[v_ry, v_rx, v_rc, v_ff]
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(4), T.int64(8), T.int64(1)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(8), yy_0 * T.int64(4) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(8), ax2)
                        v_ax3 = T.axis.spatial(T.int64(64), ff_0 + ax3)
                        T.reads(conv2d_nhwc[v_ax0, v_ax1, v_ax2, v_ax3], p2[v_ax0, T.int64(0), T.int64(0), v_ax3], p3[v_ax0, T.int64(0), T.int64(0), v_ax3])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(conv2d_nhwc[v_ax0, v_ax1, v_ax2, v_ax3] + p2[v_ax0, T.int64(0), T.int64(0), v_ax3] + p3[v_ax0, T.int64(0), T.int64(0), v_ax3], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nhwc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_add_1", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b3)
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l5, factors=[v12, v13, v14, v15], preserve_unit_iters=True, disable_predication=False)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[2, 1, 1, 4])
l24, l25, l26, l27 = sch.split(loop=l6, factors=[v20, v21, v22, v23], preserve_unit_iters=True, disable_predication=False)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 4, 2])
l32, l33, l34, l35 = sch.split(loop=l7, factors=[v28, v29, v30, v31], preserve_unit_iters=True, disable_predication=False)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[64, 1, 1, 1])
l40, l41, l42, l43 = sch.split(loop=l8, factors=[v36, v37, v38, v39], preserve_unit_iters=True, disable_predication=False)
v44, v45 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 3])
l46, l47 = sch.split(loop=l9, factors=[v44, v45], preserve_unit_iters=True, disable_predication=False)
v48, v49 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 1])
l50, l51 = sch.split(loop=l10, factors=[v48, v49], preserve_unit_iters=True, disable_predication=False)
v52, v53 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[32, 2])
l54, l55 = sch.split(loop=l11, factors=[v52, v53], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l16, l24, l32, l40, l17, l25, l33, l41, l46, l50, l54, l18, l26, l34, l42, l47, l51, l55, l19, l27, l35, l43)
b56, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b56, loop=l40, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.parallel", ann_val=96)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.vectorize", ann_val=64)
v57 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v57)
l58 = sch.sample_compute_location(block=b0, decision=10)
sch.compute_at(block=b0, loop=l58, preserve_unit_loops=True, index=-1)
2024-04-30 19:21:00 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-30 19:21:00 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-30 19:21:02 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xdec8898)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x110ba718)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xcc28088)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xf83a678)]: 0 failure(s)
2024-04-30 19:21:02 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-30 19:21:05 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xdec8898)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x110ba718)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xcc28088)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xf83a678)]: 0 failure(s)
2024-04-30 19:21:07 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xdec8898)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x110ba718)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xcc28088)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xf83a678)]: 0 failure(s)
2024-04-30 19:21:10 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xdec8898)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x110ba718)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xcc28088)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xf83a678)]: 0 failure(s)
2024-04-30 19:21:12 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xdec8898)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x110ba718)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xcc28088)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xf83a678)]: 0 failure(s)
2024-04-30 19:21:13 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.0000  0.9997  0.9996  0.9990  0.9987  0.9986  0.9986  0.9984  0.9982  0.9981  0.9977  0.9976  0.9961  0.9961  0.9954  0.9953
[17 : 32]:	0.9952  0.9941  0.9935  0.9923  0.9906  0.9902  0.9899  0.9896  0.9896  0.9895  0.9888  0.9885  0.9870  0.9863  0.9862  0.9862
[33 : 48]:	0.9852  0.9846  0.9841  0.9841  0.9839  0.9836  0.9834  0.9823  0.9813  0.9809  0.9808  0.9806  0.9802  0.9791  0.9787  0.9781
[49 : 64]:	0.9781  0.9781  0.9770  0.9768  0.9759  0.9754  0.9752  0.9750  0.9741  0.9739  0.9725  0.9722  0.9722  0.9717  0.9716  0.9712
2024-04-30 19:21:13 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-30 19:21:13 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-30 19:36:29 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_add_nn_relu_5] Trial #1: GFLOPs: 88.5010. Time: 53.4557 us. Best GFLOPs: 88.5010
2024-04-30 19:36:29 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_add_nn_relu_5] Trial #2: GFLOPs: 84.2247. Time: 56.1697 us. Best GFLOPs: 88.5010
2024-04-30 19:36:29 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_add_nn_relu_5] Trial #3: GFLOPs: 61.0985. Time: 77.4304 us. Best GFLOPs: 88.5010
2024-04-30 19:36:29 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_add_nn_relu_5] Trial #4: GFLOPs: 28.0443. Time: 168.6928 us. Best GFLOPs: 88.5010
2024-04-30 19:36:29 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_add_nn_relu_5] Trial #5: GFLOPs: 25.9692. Time: 182.1726 us. Best GFLOPs: 88.5010
2024-04-30 19:36:29 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_add_nn_relu_5] Trial #6: GFLOPs: 6.3099. Time: 749.7496 us. Best GFLOPs: 88.5010
2024-04-30 19:36:29 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_add_nn_relu_5] Trial #7: GFLOPs: 26.7827. Time: 176.6391 us. Best GFLOPs: 88.5010
2024-04-30 19:36:29 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_add_nn_relu_5] Trial #8: GFLOPs: 15.2350. Time: 310.5267 us. Best GFLOPs: 88.5010
2024-04-30 19:36:29 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_add_nn_relu_5] Trial #9: GFLOPs: 63.0494. Time: 75.0345 us. Best GFLOPs: 88.5010
2024-04-30 19:36:29 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_add_nn_relu_5] Trial #10: GFLOPs: 54.2656. Time: 87.1801 us. Best GFLOPs: 88.5010
2024-04-30 19:36:29 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_add_nn_relu_5] Trial #11: GFLOPs: 45.1905. Time: 104.6874 us. Best GFLOPs: 88.5010
2024-04-30 19:36:29 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_add_nn_relu_5] Trial #12: GFLOPs: 12.7663. Time: 370.5766 us. Best GFLOPs: 88.5010
2024-04-30 19:36:29 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_add_nn_relu_5] Trial #13: GFLOPs: 38.5633. Time: 122.6782 us. Best GFLOPs: 88.5010
2024-04-30 19:36:29 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_add_nn_relu_5] Trial #14: GFLOPs: 151.1893. Time: 31.2911 us. Best GFLOPs: 151.1893
2024-04-30 19:36:29 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_add_nn_relu_5] Trial #15: GFLOPs: 24.2730. Time: 194.9030 us. Best GFLOPs: 151.1893
2024-04-30 19:36:29 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_add_nn_relu_5] Trial #16: GFLOPs: 24.7179. Time: 191.3949 us. Best GFLOPs: 151.1893
2024-04-30 19:36:29 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_add_nn_relu_5] Trial #17: GFLOPs: 54.1821. Time: 87.3144 us. Best GFLOPs: 151.1893
2024-04-30 19:36:29 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_add_nn_relu_5] Trial #18: GFLOPs: 23.9266. Time: 197.7248 us. Best GFLOPs: 151.1893
2024-04-30 19:36:29 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_add_nn_relu_5] Trial #19: GFLOPs: 51.5823. Time: 91.7152 us. Best GFLOPs: 151.1893
2024-04-30 19:36:29 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_add_nn_relu_5] Trial #20: GFLOPs: 88.0229. Time: 53.7460 us. Best GFLOPs: 151.1893
2024-04-30 19:36:29 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_add_nn_relu_5] Trial #21: GFLOPs: 15.4703. Time: 305.8049 us. Best GFLOPs: 151.1893
2024-04-30 19:36:29 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_add_nn_relu_5] Trial #22: GFLOPs: 43.5915. Time: 108.5275 us. Best GFLOPs: 151.1893
2024-04-30 19:36:29 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_add_nn_relu_5] Trial #23: GFLOPs: 38.6420. Time: 122.4284 us. Best GFLOPs: 151.1893
2024-04-30 19:36:29 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_add_nn_relu_5] Trial #24: GFLOPs: 48.1951. Time: 98.1609 us. Best GFLOPs: 151.1893
2024-04-30 19:36:29 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_add_nn_relu_5] Trial #25: GFLOPs: 73.6132. Time: 64.2668 us. Best GFLOPs: 151.1893
2024-04-30 19:36:29 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_add_nn_relu_5] Trial #26: GFLOPs: 32.1564. Time: 147.1210 us. Best GFLOPs: 151.1893
2024-04-30 19:36:29 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_add_nn_relu_5] Trial #27: GFLOPs: 25.0972. Time: 188.5026 us. Best GFLOPs: 151.1893
2024-04-30 19:36:29 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_add_nn_relu_5] Trial #28: GFLOPs: 91.3471. Time: 51.7902 us. Best GFLOPs: 151.1893
2024-04-30 19:36:29 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_add_nn_relu_5] Trial #29: GFLOPs: 111.7655. Time: 42.3286 us. Best GFLOPs: 151.1893
2024-04-30 19:36:29 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_add_nn_relu_5] Trial #30: GFLOPs: 15.6520. Time: 302.2541 us. Best GFLOPs: 151.1893
2024-04-30 19:36:29 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_add_nn_relu_5] Trial #31: GFLOPs: 16.3560. Time: 289.2439 us. Best GFLOPs: 151.1893
2024-04-30 19:36:29 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_add_nn_relu_5] Trial #32: GFLOPs: 55.0963. Time: 85.8656 us. Best GFLOPs: 151.1893
2024-04-30 19:36:29 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_add_nn_relu_5] Trial #33: GFLOPs: 122.7852. Time: 38.5297 us. Best GFLOPs: 151.1893
2024-04-30 19:36:29 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_add_nn_relu_5] Trial #34: GFLOPs: 67.8269. Time: 69.7493 us. Best GFLOPs: 151.1893
2024-04-30 19:36:29 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_add_nn_relu_5] Trial #35: GFLOPs: 6.8143. Time: 694.2547 us. Best GFLOPs: 151.1893
2024-04-30 19:36:29 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_add_nn_relu_5] Trial #36: GFLOPs: 58.9070. Time: 80.3109 us. Best GFLOPs: 151.1893
2024-04-30 19:36:29 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_add_nn_relu_5] Trial #37: GFLOPs: 49.7487. Time: 95.0955 us. Best GFLOPs: 151.1893
2024-04-30 19:36:29 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_add_nn_relu_5] Trial #38: GFLOPs: 7.4071. Time: 638.6950 us. Best GFLOPs: 151.1893
2024-04-30 19:36:29 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_add_nn_relu_5] Trial #39: GFLOPs: 15.7921. Time: 299.5717 us. Best GFLOPs: 151.1893
2024-04-30 19:36:29 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_add_nn_relu_5] Trial #40: GFLOPs: 38.7303. Time: 122.1494 us. Best GFLOPs: 151.1893
2024-04-30 19:36:29 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_add_nn_relu_5] Trial #41: GFLOPs: 112.6310. Time: 42.0033 us. Best GFLOPs: 151.1893
2024-04-30 19:36:29 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_add_nn_relu_5] Trial #42: GFLOPs: 32.7798. Time: 144.3230 us. Best GFLOPs: 151.1893
2024-04-30 19:36:29 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_add_nn_relu_5] Trial #43: GFLOPs: 25.7595. Time: 183.6558 us. Best GFLOPs: 151.1893
2024-04-30 19:36:29 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_add_nn_relu_5] Trial #44: GFLOPs: 33.0718. Time: 143.0488 us. Best GFLOPs: 151.1893
2024-04-30 19:36:29 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_add_nn_relu_5] Trial #45: GFLOPs: 114.9420. Time: 41.1588 us. Best GFLOPs: 151.1893
2024-04-30 19:36:29 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_add_nn_relu_5] Trial #46: GFLOPs: 68.4662. Time: 69.0980 us. Best GFLOPs: 151.1893
2024-04-30 19:36:29 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_add_nn_relu_5] Trial #47: GFLOPs: 15.3099. Time: 309.0079 us. Best GFLOPs: 151.1893
2024-04-30 19:36:29 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_add_nn_relu_5] Trial #48: GFLOPs: 24.7913. Time: 190.8286 us. Best GFLOPs: 151.1893
2024-04-30 19:36:29 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_add_nn_relu_5] Trial #49: GFLOPs: 103.7622. Time: 45.5935 us. Best GFLOPs: 151.1893
2024-04-30 19:36:29 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_add_nn_relu_5] Trial #50: GFLOPs: 88.3765. Time: 53.5310 us. Best GFLOPs: 151.1893
2024-04-30 19:36:29 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_add_nn_relu_5] Trial #51: GFLOPs: 40.4597. Time: 116.9282 us. Best GFLOPs: 151.1893
2024-04-30 19:36:29 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_add_nn_relu_5] Trial #52: GFLOPs: 42.7335. Time: 110.7066 us. Best GFLOPs: 151.1893
2024-04-30 19:36:29 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_add_nn_relu_5] Trial #53: GFLOPs: 55.5179. Time: 85.2136 us. Best GFLOPs: 151.1893
2024-04-30 19:36:29 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_add_nn_relu_5] Trial #54: GFLOPs: 49.3759. Time: 95.8135 us. Best GFLOPs: 151.1893
2024-04-30 19:36:29 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_add_nn_relu_5] Trial #55: GFLOPs: 128.2622. Time: 36.8844 us. Best GFLOPs: 151.1893
2024-04-30 19:36:29 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_add_nn_relu_5] Trial #56: GFLOPs: 60.5119. Time: 78.1809 us. Best GFLOPs: 151.1893
2024-04-30 19:36:29 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_add_nn_relu_5] Trial #57: GFLOPs: 8.5812. Time: 551.3089 us. Best GFLOPs: 151.1893
2024-04-30 19:36:29 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_add_nn_relu_5] Trial #58: GFLOPs: 14.0881. Time: 335.8064 us. Best GFLOPs: 151.1893
2024-04-30 19:36:29 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_add_nn_relu_5] Trial #59: GFLOPs: 83.7110. Time: 56.5144 us. Best GFLOPs: 151.1893
2024-04-30 19:36:29 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_add_nn_relu_5] Trial #60: GFLOPs: 31.4528. Time: 150.4122 us. Best GFLOPs: 151.1893
2024-04-30 19:36:29 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_add_nn_relu_5] Trial #61: GFLOPs: 40.1662. Time: 117.7826 us. Best GFLOPs: 151.1893
2024-04-30 19:36:29 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_add_nn_relu_5] Trial #62: GFLOPs: 22.6135. Time: 209.2064 us. Best GFLOPs: 151.1893
2024-04-30 19:36:29 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_add_nn_relu_5] Trial #63: GFLOPs: 92.3629. Time: 51.2206 us. Best GFLOPs: 151.1893
2024-04-30 19:36:29 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_add_nn_relu_5] Trial #64: GFLOPs: 10.2194. Time: 462.9331 us. Best GFLOPs: 151.1893
2024-04-30 19:59:07 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-30 19:59:08 [INFO] [evolutionary_search.cc:715] Picked top 64 candidate(s) from database
2024-04-30 19:59:14 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xdec8898)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x110ba718)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xcc28088)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xf83a678)]: 0 failure(s)
2024-04-30 19:59:14 [INFO] [evolutionary_search.cc:723] Sampled 448 candidate(s)
2024-04-30 19:59:28 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xdec8898)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x110ba718)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xcc28088)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xf83a678)]: 0 failure(s)
2024-04-30 19:59:40 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xdec8898)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x110ba718)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xcc28088)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xf83a678)]: 0 failure(s)
2024-04-30 19:59:56 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xdec8898)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x110ba718)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xcc28088)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xf83a678)]: 0 failure(s)
2024-04-30 20:00:10 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xdec8898)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x110ba718)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xcc28088)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xf83a678)]: 0 failure(s)
2024-04-30 20:00:18 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.1830  1.1830  1.1830  1.0506  1.0337  1.0175  1.0005  0.9979  0.9934  0.9932  0.9900  0.9880  0.9877  0.9854  0.9837  0.9827
[17 : 32]:	0.9817  0.9801  0.9764  0.9747  0.9534  0.9533  0.9533  0.9533  0.9478  0.9478  0.9447  0.9411  0.9372  0.9351  0.9345  0.9278
[33 : 48]:	0.9262  0.9262  0.9252  0.9243  0.9233  0.9221  0.9165  0.9155  0.9110  0.9061  0.9059  0.9005  0.8977  0.8937  0.8932  0.8932
[49 : 64]:	0.8914  0.8898  0.8898  0.8844  0.8841  0.8840  0.8839  0.8839  0.8839  0.8817  0.8816  0.8809  0.8779  0.8779  0.8779  0.8752
2024-04-30 20:00:18 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-30 20:00:18 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-30 20:00:49 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_add_nn_relu_5] Trial #65: GFLOPs: 30.3331. Time: 155.9644 us. Best GFLOPs: 151.1893
2024-04-30 20:00:49 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_add_nn_relu_5] Trial #66: GFLOPs: 26.8263. Time: 176.3524 us. Best GFLOPs: 151.1893
2024-04-30 20:00:49 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_add_nn_relu_5] Trial #67: GFLOPs: 26.2204. Time: 180.4277 us. Best GFLOPs: 151.1893
2024-04-30 20:00:49 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_add_nn_relu_5] Trial #68: GFLOPs: 21.1027. Time: 224.1837 us. Best GFLOPs: 151.1893
2024-04-30 20:00:49 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_add_nn_relu_5] Trial #69: GFLOPs: 16.2534. Time: 291.0704 us. Best GFLOPs: 151.1893
2024-04-30 20:00:49 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_add_nn_relu_5] Trial #70: GFLOPs: 27.2378. Time: 173.6879 us. Best GFLOPs: 151.1893
2024-04-30 20:00:49 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_add_nn_relu_5] Trial #71: GFLOPs: 63.2933. Time: 74.7453 us. Best GFLOPs: 151.1893
2024-04-30 20:00:49 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_add_nn_relu_5] Trial #72: GFLOPs: 83.5748. Time: 56.6065 us. Best GFLOPs: 151.1893
2024-04-30 20:00:49 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_add_nn_relu_5] Trial #73: GFLOPs: 93.2899. Time: 50.7116 us. Best GFLOPs: 151.1893
2024-04-30 20:00:49 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_add_nn_relu_5] Trial #74: GFLOPs: 31.6392. Time: 149.5261 us. Best GFLOPs: 151.1893
2024-04-30 20:00:49 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_add_nn_relu_5] Trial #75: GFLOPs: 74.7012. Time: 63.3307 us. Best GFLOPs: 151.1893
2024-04-30 20:00:49 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_add_nn_relu_5] Trial #76: GFLOPs: 102.6408. Time: 46.0916 us. Best GFLOPs: 151.1893
2024-04-30 20:00:49 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_add_nn_relu_5] Trial #77: GFLOPs: 87.8515. Time: 53.8509 us. Best GFLOPs: 151.1893
2024-04-30 20:00:49 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_add_nn_relu_5] Trial #78: GFLOPs: 85.8421. Time: 55.1114 us. Best GFLOPs: 151.1893
2024-04-30 20:00:49 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_add_nn_relu_5] Trial #79: GFLOPs: 13.1627. Time: 359.4150 us. Best GFLOPs: 151.1893
2024-04-30 20:00:49 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_add_nn_relu_5] Trial #80: GFLOPs: 70.8282. Time: 66.7937 us. Best GFLOPs: 151.1893
2024-04-30 20:00:49 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_add_nn_relu_5] Trial #81: GFLOPs: 73.6858. Time: 64.2034 us. Best GFLOPs: 151.1893
2024-04-30 20:00:49 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_add_nn_relu_5] Trial #82: GFLOPs: 82.4008. Time: 57.4130 us. Best GFLOPs: 151.1893
2024-04-30 20:00:49 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_add_nn_relu_5] Trial #83: GFLOPs: 94.8411. Time: 49.8822 us. Best GFLOPs: 151.1893
2024-04-30 20:00:49 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_add_nn_relu_5] Trial #84: GFLOPs: 16.9263. Time: 279.4985 us. Best GFLOPs: 151.1893
2024-04-30 20:00:49 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_add_nn_relu_5] Trial #85: GFLOPs: 90.6815. Time: 52.1703 us. Best GFLOPs: 151.1893
2024-04-30 20:00:49 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_add_nn_relu_5] Trial #86: GFLOPs: 54.7983. Time: 86.3326 us. Best GFLOPs: 151.1893
2024-04-30 20:00:49 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_add_nn_relu_5] Trial #87: GFLOPs: 54.7375. Time: 86.4286 us. Best GFLOPs: 151.1893
2024-04-30 20:00:49 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_add_nn_relu_5] Trial #88: GFLOPs: 107.7329. Time: 43.9131 us. Best GFLOPs: 151.1893
2024-04-30 20:00:49 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_add_nn_relu_5] Trial #89: GFLOPs: 69.6836. Time: 67.8909 us. Best GFLOPs: 151.1893
2024-04-30 20:00:49 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_add_nn_relu_5] Trial #90: GFLOPs: 76.3386. Time: 61.9723 us. Best GFLOPs: 151.1893
2024-04-30 20:00:49 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_add_nn_relu_5] Trial #91: GFLOPs: 102.1937. Time: 46.2933 us. Best GFLOPs: 151.1893
2024-04-30 20:00:49 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_add_nn_relu_5] Trial #92: GFLOPs: 103.5750. Time: 45.6759 us. Best GFLOPs: 151.1893
2024-04-30 20:00:49 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_add_nn_relu_5] Trial #93: GFLOPs: 71.7688. Time: 65.9183 us. Best GFLOPs: 151.1893
2024-04-30 20:00:49 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_add_nn_relu_5] Trial #94: GFLOPs: 78.9144. Time: 59.9495 us. Best GFLOPs: 151.1893
2024-04-30 20:00:49 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_add_nn_relu_5] Trial #95: GFLOPs: 75.0318. Time: 63.0517 us. Best GFLOPs: 151.1893
2024-04-30 20:00:49 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_add_nn_relu_5] Trial #96: GFLOPs: 69.2442. Time: 68.3217 us. Best GFLOPs: 151.1893
2024-04-30 20:00:49 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_add_nn_relu_5] Trial #97: GFLOPs: 67.6458. Time: 69.9361 us. Best GFLOPs: 151.1893
2024-04-30 20:00:49 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_add_nn_relu_5] Trial #98: GFLOPs: 65.8440. Time: 71.8498 us. Best GFLOPs: 151.1893
2024-04-30 20:00:49 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_add_nn_relu_5] Trial #99: GFLOPs: 26.4603. Time: 178.7919 us. Best GFLOPs: 151.1893
2024-04-30 20:00:49 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_add_nn_relu_5] Trial #100: GFLOPs: 71.1734. Time: 66.4698 us. Best GFLOPs: 151.1893
2024-04-30 20:00:49 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_add_nn_relu_5] Trial #101: GFLOPs: 85.2105. Time: 55.5199 us. Best GFLOPs: 151.1893
2024-04-30 20:00:49 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_add_nn_relu_5] Trial #102: GFLOPs: 89.5144. Time: 52.8505 us. Best GFLOPs: 151.1893
2024-04-30 20:00:49 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_add_nn_relu_5] Trial #103: GFLOPs: 81.6820. Time: 57.9182 us. Best GFLOPs: 151.1893
2024-04-30 20:00:49 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_add_nn_relu_5] Trial #104: GFLOPs: 98.1914. Time: 48.1802 us. Best GFLOPs: 151.1893
2024-04-30 20:00:49 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_add_nn_relu_5] Trial #105: GFLOPs: 88.8856. Time: 53.2244 us. Best GFLOPs: 151.1893
2024-04-30 20:00:49 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_add_nn_relu_5] Trial #106: GFLOPs: 64.4487. Time: 73.4054 us. Best GFLOPs: 151.1893
2024-04-30 20:00:49 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_add_nn_relu_5] Trial #107: GFLOPs: 44.3372. Time: 106.7023 us. Best GFLOPs: 151.1893
2024-04-30 20:00:49 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_add_nn_relu_5] Trial #108: GFLOPs: 60.5322. Time: 78.1547 us. Best GFLOPs: 151.1893
2024-04-30 20:00:49 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_add_nn_relu_5] Trial #109: GFLOPs: 63.1097. Time: 74.9628 us. Best GFLOPs: 151.1893
2024-04-30 20:00:49 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_add_nn_relu_5] Trial #110: GFLOPs: 69.2349. Time: 68.3308 us. Best GFLOPs: 151.1893
2024-04-30 20:00:49 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_add_nn_relu_5] Trial #111: GFLOPs: 67.9110. Time: 69.6629 us. Best GFLOPs: 151.1893
2024-04-30 20:00:49 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_add_nn_relu_5] Trial #112: GFLOPs: 65.8388. Time: 71.8555 us. Best GFLOPs: 151.1893
2024-04-30 20:00:49 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_add_nn_relu_5] Trial #113: GFLOPs: 82.6588. Time: 57.2339 us. Best GFLOPs: 151.1893
2024-04-30 20:00:49 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_add_nn_relu_5] Trial #114: GFLOPs: 89.3957. Time: 52.9207 us. Best GFLOPs: 151.1893
2024-04-30 20:00:49 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_add_nn_relu_5] Trial #115: GFLOPs: 92.9416. Time: 50.9016 us. Best GFLOPs: 151.1893
2024-04-30 20:00:49 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_add_nn_relu_5] Trial #116: GFLOPs: 79.0881. Time: 59.8178 us. Best GFLOPs: 151.1893
2024-04-30 20:00:49 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_add_nn_relu_5] Trial #117: GFLOPs: 95.7731. Time: 49.3968 us. Best GFLOPs: 151.1893
2024-04-30 20:00:49 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_add_nn_relu_5] Trial #118: GFLOPs: 66.6773. Time: 70.9519 us. Best GFLOPs: 151.1893
2024-04-30 20:00:49 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_add_nn_relu_5] Trial #119: GFLOPs: 43.9176. Time: 107.7218 us. Best GFLOPs: 151.1893
2024-04-30 20:00:49 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_add_nn_relu_5] Trial #120: GFLOPs: 38.4797. Time: 122.9450 us. Best GFLOPs: 151.1893
2024-04-30 20:00:49 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_add_nn_relu_5] Trial #121: GFLOPs: 43.5121. Time: 108.7257 us. Best GFLOPs: 151.1893
2024-04-30 20:00:49 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_add_nn_relu_5] Trial #122: GFLOPs: 78.1231. Time: 60.5567 us. Best GFLOPs: 151.1893
2024-04-30 20:00:49 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_add_nn_relu_5] Trial #123: GFLOPs: 45.3054. Time: 104.4219 us. Best GFLOPs: 151.1893
2024-04-30 20:00:49 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_add_nn_relu_5] Trial #124: GFLOPs: 55.5920. Time: 85.1000 us. Best GFLOPs: 151.1893
2024-04-30 20:00:49 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_add_nn_relu_5] Trial #125: GFLOPs: 42.9758. Time: 110.0825 us. Best GFLOPs: 151.1893
2024-04-30 20:00:49 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_add_nn_relu_5] Trial #126: GFLOPs: 80.2765. Time: 58.9323 us. Best GFLOPs: 151.1893
2024-04-30 20:00:49 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_add_nn_relu_5] Trial #127: GFLOPs: 75.9349. Time: 62.3018 us. Best GFLOPs: 151.1893
2024-04-30 20:00:49 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_add_nn_relu_5] Trial #128: GFLOPs: 49.2262. Time: 96.1049 us. Best GFLOPs: 151.1893
2024-04-30 20:08:59 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-30 20:08:59 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-30 20:09:01 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xdec8898)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x110ba718)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xcc28088)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xf83a678)]: 0 failure(s)
2024-04-30 20:09:01 [INFO] [evolutionary_search.cc:723] Sampled 410 candidate(s)
2024-04-30 20:09:06 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xdec8898)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x110ba718)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xcc28088)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xf83a678)]: 0 failure(s)
2024-04-30 20:09:11 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xdec8898)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x110ba718)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xcc28088)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xf83a678)]: 0 failure(s)
2024-04-30 20:09:16 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xdec8898)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x110ba718)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xcc28088)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xf83a678)]: 0 failure(s)
2024-04-30 20:09:22 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xdec8898)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x110ba718)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xcc28088)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xf83a678)]: 0 failure(s)
2024-04-30 20:09:25 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.8029  0.8029  0.8029  0.7652  0.7562  0.7478  0.7401  0.7245  0.7218  0.7218  0.7212  0.7199  0.7190  0.7123  0.7119  0.7095
[17 : 32]:	0.7083  0.7071  0.7059  0.7057  0.7055  0.7055  0.7055  0.7052  0.7052  0.7029  0.7008  0.7008  0.7008  0.6994  0.6986  0.6954
[33 : 48]:	0.6944  0.6929  0.6925  0.6922  0.6922  0.6889  0.6888  0.6883  0.6851  0.6840  0.6840  0.6840  0.6836  0.6836  0.6836  0.6836
[49 : 64]:	0.6836  0.6822  0.6821  0.6798  0.6797  0.6796  0.6783  0.6783  0.6783  0.6783  0.6779  0.6754  0.6749  0.6748  0.6748  0.6731
2024-04-30 20:09:25 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-30 20:09:25 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-30 20:09:48 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_add_nn_relu_5] Trial #129: GFLOPs: 84.4760. Time: 56.0027 us. Best GFLOPs: 151.1893
2024-04-30 20:09:48 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_add_nn_relu_5] Trial #130: GFLOPs: 117.8266. Time: 40.1512 us. Best GFLOPs: 151.1893
2024-04-30 20:09:48 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_add_nn_relu_5] Trial #131: GFLOPs: 131.4766. Time: 35.9827 us. Best GFLOPs: 151.1893
2024-04-30 20:09:48 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_add_nn_relu_5] Trial #132: GFLOPs: 114.4436. Time: 41.3381 us. Best GFLOPs: 151.1893
2024-04-30 20:09:48 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_add_nn_relu_5] Trial #133: GFLOPs: 94.8746. Time: 49.8646 us. Best GFLOPs: 151.1893
2024-04-30 20:09:48 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_add_nn_relu_5] Trial #134: GFLOPs: 128.9188. Time: 36.6966 us. Best GFLOPs: 151.1893
2024-04-30 20:09:48 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_add_nn_relu_5] Trial #135: GFLOPs: 153.7719. Time: 30.7656 us. Best GFLOPs: 153.7719
2024-04-30 20:09:48 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_add_nn_relu_5] Trial #136: GFLOPs: 143.3454. Time: 33.0034 us. Best GFLOPs: 153.7719
2024-04-30 20:09:48 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_add_nn_relu_5] Trial #137: GFLOPs: 80.6983. Time: 58.6243 us. Best GFLOPs: 153.7719
2024-04-30 20:09:48 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_add_nn_relu_5] Trial #138: GFLOPs: 84.4342. Time: 56.0304 us. Best GFLOPs: 153.7719
2024-04-30 20:09:48 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_add_nn_relu_5] Trial #139: GFLOPs: 91.8106. Time: 51.5287 us. Best GFLOPs: 153.7719
2024-04-30 20:09:48 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_add_nn_relu_5] Trial #140: GFLOPs: 129.4971. Time: 36.5327 us. Best GFLOPs: 153.7719
2024-04-30 20:09:48 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_add_nn_relu_5] Trial #141: GFLOPs: 73.3255. Time: 64.5189 us. Best GFLOPs: 153.7719
2024-04-30 20:09:48 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_add_nn_relu_5] Trial #142: GFLOPs: 109.9033. Time: 43.0459 us. Best GFLOPs: 153.7719
2024-04-30 20:09:48 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_add_nn_relu_5] Trial #143: GFLOPs: 147.3767. Time: 32.1006 us. Best GFLOPs: 153.7719
2024-04-30 20:09:48 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_add_nn_relu_5] Trial #144: GFLOPs: 128.4083. Time: 36.8425 us. Best GFLOPs: 153.7719
2024-04-30 20:09:48 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_add_nn_relu_5] Trial #145: GFLOPs: 123.3374. Time: 38.3572 us. Best GFLOPs: 153.7719
2024-04-30 20:09:48 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_add_nn_relu_5] Trial #146: GFLOPs: 141.5181. Time: 33.4295 us. Best GFLOPs: 153.7719
2024-04-30 20:09:48 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_add_nn_relu_5] Trial #147: GFLOPs: 122.5580. Time: 38.6011 us. Best GFLOPs: 153.7719
2024-04-30 20:09:48 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_add_nn_relu_5] Trial #148: GFLOPs: 88.8414. Time: 53.2508 us. Best GFLOPs: 153.7719
2024-04-30 20:09:48 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_add_nn_relu_5] Trial #149: GFLOPs: 76.1963. Time: 62.0881 us. Best GFLOPs: 153.7719
2024-04-30 20:09:48 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_add_nn_relu_5] Trial #150: GFLOPs: 77.0818. Time: 61.3748 us. Best GFLOPs: 153.7719
2024-04-30 20:09:48 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_add_nn_relu_5] Trial #151: GFLOPs: 74.4435. Time: 63.5499 us. Best GFLOPs: 153.7719
2024-04-30 20:09:48 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_add_nn_relu_5] Trial #152: GFLOPs: 130.6990. Time: 36.1968 us. Best GFLOPs: 153.7719
2024-04-30 20:09:48 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_add_nn_relu_5] Trial #153: GFLOPs: 139.9136. Time: 33.8129 us. Best GFLOPs: 153.7719
2024-04-30 20:09:48 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_add_nn_relu_5] Trial #154: GFLOPs: 66.9001. Time: 70.7156 us. Best GFLOPs: 153.7719
2024-04-30 20:09:48 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_add_nn_relu_5] Trial #155: GFLOPs: 114.1016. Time: 41.4620 us. Best GFLOPs: 153.7719
2024-04-30 20:09:48 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_add_nn_relu_5] Trial #156: GFLOPs: 89.2964. Time: 52.9795 us. Best GFLOPs: 153.7719
2024-04-30 20:09:48 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_add_nn_relu_5] Trial #157: GFLOPs: 121.7382. Time: 38.8611 us. Best GFLOPs: 153.7719
2024-04-30 20:09:48 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_add_nn_relu_5] Trial #158: GFLOPs: 136.9379. Time: 34.5476 us. Best GFLOPs: 153.7719
2024-04-30 20:09:48 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_add_nn_relu_5] Trial #159: GFLOPs: 130.6078. Time: 36.2220 us. Best GFLOPs: 153.7719
2024-04-30 20:09:48 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_add_nn_relu_5] Trial #160: GFLOPs: 129.6176. Time: 36.4988 us. Best GFLOPs: 153.7719
2024-04-30 20:09:48 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_add_nn_relu_5] Trial #161: GFLOPs: 61.4548. Time: 76.9815 us. Best GFLOPs: 153.7719
2024-04-30 20:09:48 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_add_nn_relu_5] Trial #162: GFLOPs: 61.3439. Time: 77.1206 us. Best GFLOPs: 153.7719
2024-04-30 20:09:48 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_add_nn_relu_5] Trial #163: GFLOPs: 118.9864. Time: 39.7598 us. Best GFLOPs: 153.7719
2024-04-30 20:09:48 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_add_nn_relu_5] Trial #164: GFLOPs: 106.3079. Time: 44.5017 us. Best GFLOPs: 153.7719
2024-04-30 20:09:48 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_add_nn_relu_5] Trial #165: GFLOPs: 97.1828. Time: 48.6802 us. Best GFLOPs: 153.7719
2024-04-30 20:09:48 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_add_nn_relu_5] Trial #166: GFLOPs: 134.0751. Time: 35.2853 us. Best GFLOPs: 153.7719
2024-04-30 20:09:48 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_add_nn_relu_5] Trial #167: GFLOPs: 85.9808. Time: 55.0225 us. Best GFLOPs: 153.7719
2024-04-30 20:09:48 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_add_nn_relu_5] Trial #168: GFLOPs: 115.3809. Time: 41.0023 us. Best GFLOPs: 153.7719
2024-04-30 20:09:48 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_add_nn_relu_5] Trial #169: GFLOPs: 93.3543. Time: 50.6766 us. Best GFLOPs: 153.7719
2024-04-30 20:09:48 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_add_nn_relu_5] Trial #170: GFLOPs: 146.5089. Time: 32.2907 us. Best GFLOPs: 153.7719
2024-04-30 20:09:48 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_add_nn_relu_5] Trial #171: GFLOPs: 124.4037. Time: 38.0284 us. Best GFLOPs: 153.7719
2024-04-30 20:09:48 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_add_nn_relu_5] Trial #172: GFLOPs: 134.4236. Time: 35.1938 us. Best GFLOPs: 153.7719
2024-04-30 20:09:48 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_add_nn_relu_5] Trial #173: GFLOPs: 61.1809. Time: 77.3261 us. Best GFLOPs: 153.7719
2024-04-30 20:09:48 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_add_nn_relu_5] Trial #174: GFLOPs: 84.1679. Time: 56.2076 us. Best GFLOPs: 153.7719
2024-04-30 20:09:48 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_add_nn_relu_5] Trial #175: GFLOPs: 63.5979. Time: 74.3874 us. Best GFLOPs: 153.7719
2024-04-30 20:09:48 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_add_nn_relu_5] Trial #176: GFLOPs: 88.3413. Time: 53.5523 us. Best GFLOPs: 153.7719
2024-04-30 20:09:48 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_add_nn_relu_5] Trial #177: GFLOPs: 95.3225. Time: 49.6302 us. Best GFLOPs: 153.7719
2024-04-30 20:09:48 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_add_nn_relu_5] Trial #178: GFLOPs: 82.2333. Time: 57.5300 us. Best GFLOPs: 153.7719
2024-04-30 20:09:48 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_add_nn_relu_5] Trial #179: GFLOPs: 130.8476. Time: 36.1557 us. Best GFLOPs: 153.7719
2024-04-30 20:09:48 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_add_nn_relu_5] Trial #180: GFLOPs: 107.0717. Time: 44.1842 us. Best GFLOPs: 153.7719
2024-04-30 20:09:48 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_add_nn_relu_5] Trial #181: GFLOPs: 113.0558. Time: 41.8455 us. Best GFLOPs: 153.7719
2024-04-30 20:09:48 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_add_nn_relu_5] Trial #182: GFLOPs: 92.9779. Time: 50.8818 us. Best GFLOPs: 153.7719
2024-04-30 20:09:48 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_add_nn_relu_5] Trial #183: GFLOPs: 97.4492. Time: 48.5471 us. Best GFLOPs: 153.7719
2024-04-30 20:09:48 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_add_nn_relu_5] Trial #184: GFLOPs: 91.6278. Time: 51.6315 us. Best GFLOPs: 153.7719
2024-04-30 20:09:48 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_add_nn_relu_5] Trial #185: GFLOPs: 88.9872. Time: 53.1636 us. Best GFLOPs: 153.7719
2024-04-30 20:09:48 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_add_nn_relu_5] Trial #186: GFLOPs: 87.6727. Time: 53.9607 us. Best GFLOPs: 153.7719
2024-04-30 20:09:48 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_add_nn_relu_5] Trial #187: GFLOPs: 156.1155. Time: 30.3037 us. Best GFLOPs: 156.1155
2024-04-30 20:09:48 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_add_nn_relu_5] Trial #188: GFLOPs: 101.0172. Time: 46.8324 us. Best GFLOPs: 156.1155
2024-04-30 20:09:48 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_add_nn_relu_5] Trial #189: GFLOPs: 134.5958. Time: 35.1488 us. Best GFLOPs: 156.1155
2024-04-30 20:09:48 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_add_nn_relu_5] Trial #190: GFLOPs: 15.3356. Time: 308.4904 us. Best GFLOPs: 156.1155
2024-04-30 20:09:48 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_add_nn_relu_5] Trial #191: GFLOPs: 17.3051. Time: 273.3805 us. Best GFLOPs: 156.1155
2024-04-30 20:09:48 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_add_nn_relu_5] Trial #192: GFLOPs: 126.0719. Time: 37.5252 us. Best GFLOPs: 156.1155
2024-04-30 20:14:06 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-30 20:14:06 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-30 20:14:08 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xdec8898)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x110ba718)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xcc28088)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xf83a678)]: 0 failure(s)
2024-04-30 20:14:08 [INFO] [evolutionary_search.cc:723] Sampled 410 candidate(s)
2024-04-30 20:14:14 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xdec8898)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x110ba718)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xcc28088)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xf83a678)]: 0 failure(s)
2024-04-30 20:14:19 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xdec8898)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x110ba718)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xcc28088)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xf83a678)]: 0 failure(s)
2024-04-30 20:14:25 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xdec8898)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x110ba718)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xcc28088)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xf83a678)]: 0 failure(s)
2024-04-30 20:14:31 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xdec8898)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x110ba718)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xcc28088)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xf83a678)]: 0 failure(s)
2024-04-30 20:14:34 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9829  0.9829  0.9629  0.9612  0.9612  0.9475  0.9390  0.9390  0.9375  0.9375  0.9324  0.9324  0.9324  0.9186  0.9178  0.9178
[17 : 32]:	0.9168  0.9168  0.9153  0.9153  0.9017  0.9017  0.9004  0.9004  0.9004  0.9004  0.9003  0.9003  0.8925  0.8918  0.8918  0.8904
[33 : 48]:	0.8871  0.8868  0.8868  0.8827  0.8792  0.8792  0.8774  0.8748  0.8729  0.8672  0.8646  0.8646  0.8594  0.8593  0.8593  0.8588
[49 : 64]:	0.8560  0.8543  0.8537  0.8517  0.8516  0.8516  0.8494  0.8462  0.8458  0.8458  0.8458  0.8458  0.8458  0.8450  0.8449  0.8437
2024-04-30 20:14:34 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-30 20:14:34 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-30 20:14:59 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_add_nn_relu_5] Trial #193: GFLOPs: 153.7695. Time: 30.7661 us. Best GFLOPs: 156.1155
2024-04-30 20:14:59 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_add_nn_relu_5] Trial #194: GFLOPs: 168.0555. Time: 28.1507 us. Best GFLOPs: 168.0555
2024-04-30 20:14:59 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_add_nn_relu_5] Trial #195: GFLOPs: 172.7594. Time: 27.3842 us. Best GFLOPs: 172.7594
2024-04-30 20:14:59 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_add_nn_relu_5] Trial #196: GFLOPs: 172.8175. Time: 27.3750 us. Best GFLOPs: 172.8175
2024-04-30 20:14:59 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_add_nn_relu_5] Trial #197: GFLOPs: 147.8235. Time: 32.0036 us. Best GFLOPs: 172.8175
2024-04-30 20:14:59 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_add_nn_relu_5] Trial #198: GFLOPs: 140.1363. Time: 33.7591 us. Best GFLOPs: 172.8175
2024-04-30 20:14:59 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_add_nn_relu_5] Trial #199: GFLOPs: 133.3748. Time: 35.4706 us. Best GFLOPs: 172.8175
2024-04-30 20:14:59 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_add_nn_relu_5] Trial #200: GFLOPs: 132.6123. Time: 35.6745 us. Best GFLOPs: 172.8175
2024-04-30 20:14:59 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_add_nn_relu_5] Trial #201: GFLOPs: 129.0466. Time: 36.6603 us. Best GFLOPs: 172.8175
2024-04-30 20:14:59 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_add_nn_relu_5] Trial #202: GFLOPs: 118.9395. Time: 39.7755 us. Best GFLOPs: 172.8175
2024-04-30 20:14:59 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_add_nn_relu_5] Trial #203: GFLOPs: 144.8740. Time: 32.6551 us. Best GFLOPs: 172.8175
2024-04-30 20:14:59 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_add_nn_relu_5] Trial #204: GFLOPs: 138.4300. Time: 34.1753 us. Best GFLOPs: 172.8175
2024-04-30 20:14:59 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_add_nn_relu_5] Trial #205: GFLOPs: 136.5117. Time: 34.6555 us. Best GFLOPs: 172.8175
2024-04-30 20:14:59 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_add_nn_relu_5] Trial #206: GFLOPs: 155.3103. Time: 30.4608 us. Best GFLOPs: 172.8175
2024-04-30 20:14:59 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_add_nn_relu_5] Trial #207: GFLOPs: 162.1348. Time: 29.1787 us. Best GFLOPs: 172.8175
2024-04-30 20:14:59 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_add_nn_relu_5] Trial #208: GFLOPs: 156.4675. Time: 30.2355 us. Best GFLOPs: 172.8175
2024-04-30 20:14:59 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_add_nn_relu_5] Trial #209: GFLOPs: 139.8424. Time: 33.8301 us. Best GFLOPs: 172.8175
2024-04-30 20:14:59 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_add_nn_relu_5] Trial #210: GFLOPs: 142.4864. Time: 33.2023 us. Best GFLOPs: 172.8175
2024-04-30 20:14:59 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_add_nn_relu_5] Trial #211: GFLOPs: 127.5207. Time: 37.0989 us. Best GFLOPs: 172.8175
2024-04-30 20:14:59 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_add_nn_relu_5] Trial #212: GFLOPs: 120.3539. Time: 39.3081 us. Best GFLOPs: 172.8175
2024-04-30 20:14:59 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_add_nn_relu_5] Trial #213: GFLOPs: 135.8483. Time: 34.8247 us. Best GFLOPs: 172.8175
2024-04-30 20:14:59 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_add_nn_relu_5] Trial #214: GFLOPs: 135.7235. Time: 34.8567 us. Best GFLOPs: 172.8175
2024-04-30 20:14:59 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_add_nn_relu_5] Trial #215: GFLOPs: 137.0154. Time: 34.5281 us. Best GFLOPs: 172.8175
2024-04-30 20:14:59 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_add_nn_relu_5] Trial #216: GFLOPs: 142.9364. Time: 33.0978 us. Best GFLOPs: 172.8175
2024-04-30 20:14:59 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_add_nn_relu_5] Trial #217: GFLOPs: 132.2656. Time: 35.7680 us. Best GFLOPs: 172.8175
2024-04-30 20:14:59 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_add_nn_relu_5] Trial #218: GFLOPs: 121.4022. Time: 38.9687 us. Best GFLOPs: 172.8175
2024-04-30 20:14:59 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_add_nn_relu_5] Trial #219: GFLOPs: 162.7175. Time: 29.0742 us. Best GFLOPs: 172.8175
2024-04-30 20:14:59 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_add_nn_relu_5] Trial #220: GFLOPs: 165.5832. Time: 28.5710 us. Best GFLOPs: 172.8175
2024-04-30 20:14:59 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_add_nn_relu_5] Trial #221: GFLOPs: 148.8262. Time: 31.7880 us. Best GFLOPs: 172.8175
2024-04-30 20:14:59 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_add_nn_relu_5] Trial #222: GFLOPs: 145.6173. Time: 32.4885 us. Best GFLOPs: 172.8175
2024-04-30 20:14:59 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_add_nn_relu_5] Trial #223: GFLOPs: 119.6964. Time: 39.5240 us. Best GFLOPs: 172.8175
2024-04-30 20:14:59 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_add_nn_relu_5] Trial #224: GFLOPs: 137.6938. Time: 34.3580 us. Best GFLOPs: 172.8175
2024-04-30 20:14:59 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_add_nn_relu_5] Trial #225: GFLOPs: 128.2226. Time: 36.8958 us. Best GFLOPs: 172.8175
2024-04-30 20:14:59 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_add_nn_relu_5] Trial #226: GFLOPs: 123.0537. Time: 38.4457 us. Best GFLOPs: 172.8175
2024-04-30 20:14:59 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_add_nn_relu_5] Trial #227: GFLOPs: 139.0075. Time: 34.0333 us. Best GFLOPs: 172.8175
2024-04-30 20:14:59 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_add_nn_relu_5] Trial #228: GFLOPs: 138.2923. Time: 34.2093 us. Best GFLOPs: 172.8175
2024-04-30 20:14:59 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_add_nn_relu_5] Trial #229: GFLOPs: 133.8381. Time: 35.3478 us. Best GFLOPs: 172.8175
2024-04-30 20:14:59 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_add_nn_relu_5] Trial #230: GFLOPs: 126.0229. Time: 37.5398 us. Best GFLOPs: 172.8175
2024-04-30 20:14:59 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_add_nn_relu_5] Trial #231: GFLOPs: 134.5353. Time: 35.1646 us. Best GFLOPs: 172.8175
2024-04-30 20:14:59 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_add_nn_relu_5] Trial #232: GFLOPs: 133.0767. Time: 35.5500 us. Best GFLOPs: 172.8175
2024-04-30 20:14:59 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_add_nn_relu_5] Trial #233: GFLOPs: 27.5353. Time: 171.8112 us. Best GFLOPs: 172.8175
2024-04-30 20:14:59 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_add_nn_relu_5] Trial #234: GFLOPs: 153.5059. Time: 30.8189 us. Best GFLOPs: 172.8175
2024-04-30 20:14:59 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_add_nn_relu_5] Trial #235: GFLOPs: 159.7073. Time: 29.6222 us. Best GFLOPs: 172.8175
2024-04-30 20:14:59 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_add_nn_relu_5] Trial #236: GFLOPs: 107.9677. Time: 43.8175 us. Best GFLOPs: 172.8175
2024-04-30 20:14:59 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_add_nn_relu_5] Trial #237: GFLOPs: 129.3324. Time: 36.5792 us. Best GFLOPs: 172.8175
2024-04-30 20:14:59 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_add_nn_relu_5] Trial #238: GFLOPs: 112.4051. Time: 42.0878 us. Best GFLOPs: 172.8175
2024-04-30 20:14:59 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_add_nn_relu_5] Trial #239: GFLOPs: 109.1814. Time: 43.3305 us. Best GFLOPs: 172.8175
2024-04-30 20:14:59 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_add_nn_relu_5] Trial #240: GFLOPs: 133.7895. Time: 35.3606 us. Best GFLOPs: 172.8175
2024-04-30 20:14:59 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_add_nn_relu_5] Trial #241: GFLOPs: 41.0940. Time: 115.1233 us. Best GFLOPs: 172.8175
2024-04-30 20:14:59 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_add_nn_relu_5] Trial #242: GFLOPs: 158.8089. Time: 29.7898 us. Best GFLOPs: 172.8175
2024-04-30 20:14:59 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_add_nn_relu_5] Trial #243: GFLOPs: 128.1310. Time: 36.9222 us. Best GFLOPs: 172.8175
2024-04-30 20:14:59 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_add_nn_relu_5] Trial #244: GFLOPs: 68.2125. Time: 69.3551 us. Best GFLOPs: 172.8175
2024-04-30 20:14:59 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_add_nn_relu_5] Trial #245: GFLOPs: 121.7079. Time: 38.8708 us. Best GFLOPs: 172.8175
2024-04-30 20:14:59 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_add_nn_relu_5] Trial #246: GFLOPs: 129.5856. Time: 36.5078 us. Best GFLOPs: 172.8175
2024-04-30 20:14:59 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_add_nn_relu_5] Trial #247: GFLOPs: 60.7068. Time: 77.9299 us. Best GFLOPs: 172.8175
2024-04-30 20:14:59 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_add_nn_relu_5] Trial #248: GFLOPs: 128.8428. Time: 36.7182 us. Best GFLOPs: 172.8175
2024-04-30 20:14:59 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_add_nn_relu_5] Trial #249: GFLOPs: 129.0001. Time: 36.6734 us. Best GFLOPs: 172.8175
2024-04-30 20:14:59 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_add_nn_relu_5] Trial #250: GFLOPs: 128.3531. Time: 36.8583 us. Best GFLOPs: 172.8175
2024-04-30 20:14:59 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_add_nn_relu_5] Trial #251: GFLOPs: 129.7985. Time: 36.4479 us. Best GFLOPs: 172.8175
2024-04-30 20:14:59 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_add_nn_relu_5] Trial #252: GFLOPs: 111.1312. Time: 42.5702 us. Best GFLOPs: 172.8175
2024-04-30 20:14:59 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_add_nn_relu_5] Trial #253: GFLOPs: 105.7813. Time: 44.7232 us. Best GFLOPs: 172.8175
2024-04-30 20:14:59 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_add_nn_relu_5] Trial #254: GFLOPs: 67.8176. Time: 69.7588 us. Best GFLOPs: 172.8175
2024-04-30 20:14:59 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_add_nn_relu_5] Trial #255: GFLOPs: 15.9364. Time: 296.8599 us. Best GFLOPs: 172.8175
2024-04-30 20:14:59 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_add_nn_relu_5] Trial #256: GFLOPs: 81.6960. Time: 57.9084 us. Best GFLOPs: 172.8175
